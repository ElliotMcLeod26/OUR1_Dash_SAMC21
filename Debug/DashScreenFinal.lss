
DashScreenFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000060f0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20000000  000060f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005e4  20000088  00006178  00020088  2**2
                  ALLOC
  3 .stack        00002004  2000066c  0000675c  00020088  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003441c  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000047a9  00000000  00000000  00054525  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00011dd6  00000000  00000000  00058cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001038  00000000  00000000  0006aaa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001068  00000000  00000000  0006badc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00024a42  00000000  00000000  0006cb44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a6a8  00000000  00000000  00091586  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009ea10  00000000  00000000  000abc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000034e4  00000000  00000000  0014a640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 26 00 20 35 01 00 00 31 01 00 00 31 01 00 00     p&. 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 15 1e 00 00     1...1...1.......
      4c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	51 1a 00 00 31 01 00 00 31 01 00 00 31 01 00 00     Q...1...1...1...
      8c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000088 	.word	0x20000088
      dc:	00000000 	.word	0x00000000
      e0:	000060f0 	.word	0x000060f0

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000008c 	.word	0x2000008c
     110:	000060f0 	.word	0x000060f0
     114:	000060f0 	.word	0x000060f0
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	00000d7d 	.word	0x00000d7d
     12c:	00003365 	.word	0x00003365

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a10      	ldr	r2, [pc, #64]	; (178 <Reset_Handler+0x44>)
     138:	4b10      	ldr	r3, [pc, #64]	; (17c <Reset_Handler+0x48>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b0f      	ldr	r3, [pc, #60]	; (17c <Reset_Handler+0x48>)
     140:	4a0d      	ldr	r2, [pc, #52]	; (178 <Reset_Handler+0x44>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	490c      	ldr	r1, [pc, #48]	; (180 <Reset_Handler+0x4c>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <Reset_Handler+0x50>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a0a      	ldr	r2, [pc, #40]	; (188 <Reset_Handler+0x54>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a0a      	ldr	r2, [pc, #40]	; (18c <Reset_Handler+0x58>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <Reset_Handler+0x5c>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     16c:	4b09      	ldr	r3, [pc, #36]	; (194 <Reset_Handler+0x60>)
     16e:	4798      	blx	r3
        main();
     170:	4b09      	ldr	r3, [pc, #36]	; (198 <Reset_Handler+0x64>)
     172:	4798      	blx	r3
     174:	e7fe      	b.n	174 <Reset_Handler+0x40>
     176:	46c0      	nop			; (mov r8, r8)
     178:	000060f0 	.word	0x000060f0
     17c:	20000000 	.word	0x20000000
     180:	20000088 	.word	0x20000088
     184:	20000088 	.word	0x20000088
     188:	2000066c 	.word	0x2000066c
     18c:	e000ed00 	.word	0xe000ed00
     190:	00000000 	.word	0x00000000
     194:	00004d91 	.word	0x00004d91
     198:	00002ff9 	.word	0x00002ff9

0000019c <FT8_cmdWrite>:

volatile uint16_t cmdOffset = 0x0000;	/* used to navigate command ring buffer */


void FT8_cmdWrite(uint8_t data)
{
     19c:	b510      	push	{r4, lr}
     19e:	0004      	movs	r4, r0
	FT8_cs_set();
     1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <FT8_cmdWrite+0x1c>)
     1a2:	4798      	blx	r3
	spi_transmit(data);
     1a4:	0020      	movs	r0, r4
     1a6:	4c05      	ldr	r4, [pc, #20]	; (1bc <FT8_cmdWrite+0x20>)
     1a8:	47a0      	blx	r4
	spi_transmit(0x00);
     1aa:	2000      	movs	r0, #0
     1ac:	47a0      	blx	r4
	spi_transmit(0x00);
     1ae:	2000      	movs	r0, #0
     1b0:	47a0      	blx	r4
	FT8_cs_clear();
     1b2:	4b03      	ldr	r3, [pc, #12]	; (1c0 <FT8_cmdWrite+0x24>)
     1b4:	4798      	blx	r3
}
     1b6:	bd10      	pop	{r4, pc}
     1b8:	00000abd 	.word	0x00000abd
     1bc:	00000ad9 	.word	0x00000ad9
     1c0:	00000ac9 	.word	0x00000ac9

000001c4 <FT8_memRead8>:


uint8_t FT8_memRead8(uint32_t ftAddress)
{
     1c4:	b570      	push	{r4, r5, r6, lr}
     1c6:	0004      	movs	r4, r0
	uint8_t ftData8 = 0;
	FT8_cs_set();
     1c8:	4b0a      	ldr	r3, [pc, #40]	; (1f4 <FT8_memRead8+0x30>)
     1ca:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_READ);	/* send Memory Write plus high address byte */
     1cc:	0c20      	lsrs	r0, r4, #16
     1ce:	b2c0      	uxtb	r0, r0
     1d0:	4d09      	ldr	r5, [pc, #36]	; (1f8 <FT8_memRead8+0x34>)
     1d2:	47a8      	blx	r5
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     1d4:	0a20      	lsrs	r0, r4, #8
     1d6:	b2c0      	uxtb	r0, r0
     1d8:	47a8      	blx	r5
	spi_transmit((uint8_t)(ftAddress));	/* send low address byte */
     1da:	b2e0      	uxtb	r0, r4
     1dc:	47a8      	blx	r5
	spi_transmit(0x00);	/* send dummy byte */
     1de:	2000      	movs	r0, #0
     1e0:	47a8      	blx	r5
	ftData8 = spi_receive(ftData8);	/* read data byte */
     1e2:	2000      	movs	r0, #0
     1e4:	4b05      	ldr	r3, [pc, #20]	; (1fc <FT8_memRead8+0x38>)
     1e6:	4798      	blx	r3
     1e8:	0004      	movs	r4, r0
	FT8_cs_clear();
     1ea:	4b05      	ldr	r3, [pc, #20]	; (200 <FT8_memRead8+0x3c>)
     1ec:	4798      	blx	r3
	return ftData8;	/* return byte read */
}
     1ee:	0020      	movs	r0, r4
     1f0:	bd70      	pop	{r4, r5, r6, pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	00000abd 	.word	0x00000abd
     1f8:	00000ad9 	.word	0x00000ad9
     1fc:	00000af9 	.word	0x00000af9
     200:	00000ac9 	.word	0x00000ac9

00000204 <FT8_memRead16>:


uint16_t FT8_memRead16(uint32_t ftAddress)
{
     204:	b570      	push	{r4, r5, r6, lr}
     206:	0004      	movs	r4, r0
	uint16_t ftData16 = 0;
	FT8_cs_set();
     208:	4b0c      	ldr	r3, [pc, #48]	; (23c <FT8_memRead16+0x38>)
     20a:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_READ);	/* send Memory Write plus high address byte */
     20c:	0c20      	lsrs	r0, r4, #16
     20e:	b2c0      	uxtb	r0, r0
     210:	4d0b      	ldr	r5, [pc, #44]	; (240 <FT8_memRead16+0x3c>)
     212:	47a8      	blx	r5
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     214:	0a20      	lsrs	r0, r4, #8
     216:	b2c0      	uxtb	r0, r0
     218:	47a8      	blx	r5
	spi_transmit((uint8_t)(ftAddress));	/* send low address byte */
     21a:	b2e0      	uxtb	r0, r4
     21c:	47a8      	blx	r5
	spi_transmit(0x00);	/* send dummy byte */
     21e:	2000      	movs	r0, #0
     220:	47a8      	blx	r5
	ftData16 = (spi_receive(0x00));	/* read low byte */
     222:	2000      	movs	r0, #0
     224:	4d07      	ldr	r5, [pc, #28]	; (244 <FT8_memRead16+0x40>)
     226:	47a8      	blx	r5
     228:	0004      	movs	r4, r0
	ftData16 = (spi_receive(0x00) << 8) | ftData16;	/* read high byte */
     22a:	2000      	movs	r0, #0
     22c:	47a8      	blx	r5
     22e:	0200      	lsls	r0, r0, #8
     230:	4304      	orrs	r4, r0
     232:	b2a4      	uxth	r4, r4
	FT8_cs_clear();
     234:	4b04      	ldr	r3, [pc, #16]	; (248 <FT8_memRead16+0x44>)
     236:	4798      	blx	r3
	return ftData16;	/* return integer read */
}
     238:	0020      	movs	r0, r4
     23a:	bd70      	pop	{r4, r5, r6, pc}
     23c:	00000abd 	.word	0x00000abd
     240:	00000ad9 	.word	0x00000ad9
     244:	00000af9 	.word	0x00000af9
     248:	00000ac9 	.word	0x00000ac9

0000024c <FT8_memWrite8>:
	return ftData32;	/* return long read */
}


void FT8_memWrite8(uint32_t ftAddress, uint8_t ftData8)
{
     24c:	b570      	push	{r4, r5, r6, lr}
     24e:	0004      	movs	r4, r0
     250:	000d      	movs	r5, r1
	FT8_cs_set();
     252:	4b0a      	ldr	r3, [pc, #40]	; (27c <FT8_memWrite8+0x30>)
     254:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE);
     256:	0c23      	lsrs	r3, r4, #16
     258:	b2db      	uxtb	r3, r3
     25a:	2080      	movs	r0, #128	; 0x80
     25c:	4240      	negs	r0, r0
     25e:	4318      	orrs	r0, r3
     260:	b2c0      	uxtb	r0, r0
     262:	4e07      	ldr	r6, [pc, #28]	; (280 <FT8_memWrite8+0x34>)
     264:	47b0      	blx	r6
	spi_transmit((uint8_t)(ftAddress >> 8));
     266:	0a20      	lsrs	r0, r4, #8
     268:	b2c0      	uxtb	r0, r0
     26a:	47b0      	blx	r6
	spi_transmit((uint8_t)(ftAddress));
     26c:	b2e0      	uxtb	r0, r4
     26e:	47b0      	blx	r6
	spi_transmit(ftData8);
     270:	0028      	movs	r0, r5
     272:	47b0      	blx	r6
	FT8_cs_clear();
     274:	4b03      	ldr	r3, [pc, #12]	; (284 <FT8_memWrite8+0x38>)
     276:	4798      	blx	r3
}
     278:	bd70      	pop	{r4, r5, r6, pc}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	00000abd 	.word	0x00000abd
     280:	00000ad9 	.word	0x00000ad9
     284:	00000ac9 	.word	0x00000ac9

00000288 <FT8_memWrite16>:


void FT8_memWrite16(uint32_t ftAddress, uint16_t ftData16)
{
     288:	b570      	push	{r4, r5, r6, lr}
     28a:	0005      	movs	r5, r0
     28c:	000e      	movs	r6, r1
	FT8_cs_set();
     28e:	4b0b      	ldr	r3, [pc, #44]	; (2bc <FT8_memWrite16+0x34>)
     290:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
     292:	0c2b      	lsrs	r3, r5, #16
     294:	b2db      	uxtb	r3, r3
     296:	2080      	movs	r0, #128	; 0x80
     298:	4240      	negs	r0, r0
     29a:	4318      	orrs	r0, r3
     29c:	b2c0      	uxtb	r0, r0
     29e:	4c08      	ldr	r4, [pc, #32]	; (2c0 <FT8_memWrite16+0x38>)
     2a0:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     2a2:	0a28      	lsrs	r0, r5, #8
     2a4:	b2c0      	uxtb	r0, r0
     2a6:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress));		/* send low address byte */
     2a8:	b2e8      	uxtb	r0, r5
     2aa:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData16));		/* send data low byte */
     2ac:	b2f0      	uxtb	r0, r6
     2ae:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData16 >> 8));	/* send data high byte */
     2b0:	0a30      	lsrs	r0, r6, #8
     2b2:	47a0      	blx	r4
	FT8_cs_clear();
     2b4:	4b03      	ldr	r3, [pc, #12]	; (2c4 <FT8_memWrite16+0x3c>)
     2b6:	4798      	blx	r3
}
     2b8:	bd70      	pop	{r4, r5, r6, pc}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	00000abd 	.word	0x00000abd
     2c0:	00000ad9 	.word	0x00000ad9
     2c4:	00000ac9 	.word	0x00000ac9

000002c8 <FT8_memWrite32>:


void FT8_memWrite32(uint32_t ftAddress, uint32_t ftData32)
{
     2c8:	b570      	push	{r4, r5, r6, lr}
     2ca:	0006      	movs	r6, r0
     2cc:	000d      	movs	r5, r1
	FT8_cs_set();
     2ce:	4b0e      	ldr	r3, [pc, #56]	; (308 <FT8_memWrite32+0x40>)
     2d0:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
     2d2:	0c33      	lsrs	r3, r6, #16
     2d4:	b2db      	uxtb	r3, r3
     2d6:	2080      	movs	r0, #128	; 0x80
     2d8:	4240      	negs	r0, r0
     2da:	4318      	orrs	r0, r3
     2dc:	b2c0      	uxtb	r0, r0
     2de:	4c0b      	ldr	r4, [pc, #44]	; (30c <FT8_memWrite32+0x44>)
     2e0:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     2e2:	0a30      	lsrs	r0, r6, #8
     2e4:	b2c0      	uxtb	r0, r0
     2e6:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress));		/* send low address byte */
     2e8:	b2f0      	uxtb	r0, r6
     2ea:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData32));		/* send data low byte */
     2ec:	b2e8      	uxtb	r0, r5
     2ee:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData32 >> 8));
     2f0:	0a28      	lsrs	r0, r5, #8
     2f2:	b2c0      	uxtb	r0, r0
     2f4:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData32 >> 16));
     2f6:	0c28      	lsrs	r0, r5, #16
     2f8:	b2c0      	uxtb	r0, r0
     2fa:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData32 >> 24));	/* send data high byte */
     2fc:	0e28      	lsrs	r0, r5, #24
     2fe:	47a0      	blx	r4
	FT8_cs_clear();
     300:	4b03      	ldr	r3, [pc, #12]	; (310 <FT8_memWrite32+0x48>)
     302:	4798      	blx	r3
}
     304:	bd70      	pop	{r4, r5, r6, pc}
     306:	46c0      	nop			; (mov r8, r8)
     308:	00000abd 	.word	0x00000abd
     30c:	00000ad9 	.word	0x00000ad9
     310:	00000ac9 	.word	0x00000ac9

00000314 <FT8_busy>:


/* Check if the graphics processor completed executing the current command list. */
/* This is the case when REG_CMD_READ matches cmdOffset, indicating that all commands have been executed. */
uint8_t FT8_busy(void)
{
     314:	b510      	push	{r4, lr}
	uint16_t cmdBufferRead;

	cmdBufferRead = FT8_memRead16(REG_CMD_READ);	/* read the graphics processor read pointer */
     316:	4806      	ldr	r0, [pc, #24]	; (330 <FT8_busy+0x1c>)
     318:	4b06      	ldr	r3, [pc, #24]	; (334 <FT8_busy+0x20>)
     31a:	4798      	blx	r3

	if(cmdOffset != cmdBufferRead)
     31c:	4b06      	ldr	r3, [pc, #24]	; (338 <FT8_busy+0x24>)
     31e:	881b      	ldrh	r3, [r3, #0]
     320:	b29b      	uxth	r3, r3
     322:	4298      	cmp	r0, r3
     324:	d001      	beq.n	32a <FT8_busy+0x16>
	{
		return 1;
     326:	2001      	movs	r0, #1
	}
	else
	{
		return 0;
	}
}
     328:	bd10      	pop	{r4, pc}
		return 0;
     32a:	2000      	movs	r0, #0
     32c:	e7fc      	b.n	328 <FT8_busy+0x14>
     32e:	46c0      	nop			; (mov r8, r8)
     330:	003020f8 	.word	0x003020f8
     334:	00000205 	.word	0x00000205
     338:	200000a4 	.word	0x200000a4

0000033c <FT8_cmd_execute>:
}


/* order the command co-prozessor to start processing its FIFO que */
void FT8_cmd_execute(void)
{
     33c:	b570      	push	{r4, r5, r6, lr}
	uint32_t ftAddress;

	ftAddress = REG_CMD_WRITE;

	FT8_cs_set();
     33e:	4b0b      	ldr	r3, [pc, #44]	; (36c <FT8_cmd_execute+0x30>)
     340:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
     342:	20b0      	movs	r0, #176	; 0xb0
     344:	4c0a      	ldr	r4, [pc, #40]	; (370 <FT8_cmd_execute+0x34>)
     346:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     348:	2020      	movs	r0, #32
     34a:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress));			/* send low address byte */
     34c:	20fc      	movs	r0, #252	; 0xfc
     34e:	47a0      	blx	r4
	spi_transmit((uint8_t)(cmdOffset));			/* send data low byte */
     350:	4d08      	ldr	r5, [pc, #32]	; (374 <FT8_cmd_execute+0x38>)
     352:	8828      	ldrh	r0, [r5, #0]
     354:	b2c0      	uxtb	r0, r0
     356:	47a0      	blx	r4
	spi_transmit((uint8_t)(cmdOffset >> 8));	/* send data high byte */
     358:	8828      	ldrh	r0, [r5, #0]
     35a:	0a00      	lsrs	r0, r0, #8
     35c:	47a0      	blx	r4
	FT8_cs_clear();
     35e:	4b06      	ldr	r3, [pc, #24]	; (378 <FT8_cmd_execute+0x3c>)
     360:	4798      	blx	r3
	while (FT8_busy());
     362:	4b06      	ldr	r3, [pc, #24]	; (37c <FT8_cmd_execute+0x40>)
     364:	4798      	blx	r3
     366:	2800      	cmp	r0, #0
     368:	d1fb      	bne.n	362 <FT8_cmd_execute+0x26>
}
     36a:	bd70      	pop	{r4, r5, r6, pc}
     36c:	00000abd 	.word	0x00000abd
     370:	00000ad9 	.word	0x00000ad9
     374:	200000a4 	.word	0x200000a4
     378:	00000ac9 	.word	0x00000ac9
     37c:	00000315 	.word	0x00000315

00000380 <FT8_get_cmdoffset>:


void FT8_get_cmdoffset(void)
{
     380:	b510      	push	{r4, lr}
	cmdOffset = FT8_memRead16(REG_CMD_WRITE);
     382:	4803      	ldr	r0, [pc, #12]	; (390 <FT8_get_cmdoffset+0x10>)
     384:	4b03      	ldr	r3, [pc, #12]	; (394 <FT8_get_cmdoffset+0x14>)
     386:	4798      	blx	r3
     388:	4b03      	ldr	r3, [pc, #12]	; (398 <FT8_get_cmdoffset+0x18>)
     38a:	8018      	strh	r0, [r3, #0]
}
     38c:	bd10      	pop	{r4, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	003020fc 	.word	0x003020fc
     394:	00000205 	.word	0x00000205
     398:	200000a4 	.word	0x200000a4

0000039c <FT8_inc_cmdoffset>:


void FT8_inc_cmdoffset(uint16_t increment)
{
	cmdOffset += increment;
     39c:	4a04      	ldr	r2, [pc, #16]	; (3b0 <FT8_inc_cmdoffset+0x14>)
     39e:	8813      	ldrh	r3, [r2, #0]
     3a0:	1818      	adds	r0, r3, r0
     3a2:	b280      	uxth	r0, r0
     3a4:	8010      	strh	r0, [r2, #0]
	cmdOffset &= 0x0fff;
     3a6:	8813      	ldrh	r3, [r2, #0]
     3a8:	051b      	lsls	r3, r3, #20
     3aa:	0d1b      	lsrs	r3, r3, #20
     3ac:	8013      	strh	r3, [r2, #0]
}
     3ae:	4770      	bx	lr
     3b0:	200000a4 	.word	0x200000a4

000003b4 <FT8_start_cmd>:


/* Beginn a co-prozessor command */
void FT8_start_cmd(uint32_t command)
{
     3b4:	b570      	push	{r4, r5, r6, lr}
     3b6:	0006      	movs	r6, r0
	uint32_t ftAddress;

	ftAddress = FT8_RAM_CMD + cmdOffset;
     3b8:	4b11      	ldr	r3, [pc, #68]	; (400 <FT8_start_cmd+0x4c>)
     3ba:	881d      	ldrh	r5, [r3, #0]
     3bc:	23c2      	movs	r3, #194	; 0xc2
     3be:	039b      	lsls	r3, r3, #14
     3c0:	469c      	mov	ip, r3
     3c2:	4465      	add	r5, ip
	FT8_cs_set();
     3c4:	4b0f      	ldr	r3, [pc, #60]	; (404 <FT8_start_cmd+0x50>)
     3c6:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
     3c8:	0c2b      	lsrs	r3, r5, #16
     3ca:	b2db      	uxtb	r3, r3
     3cc:	2080      	movs	r0, #128	; 0x80
     3ce:	4240      	negs	r0, r0
     3d0:	4318      	orrs	r0, r3
     3d2:	b2c0      	uxtb	r0, r0
     3d4:	4c0c      	ldr	r4, [pc, #48]	; (408 <FT8_start_cmd+0x54>)
     3d6:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     3d8:	0a28      	lsrs	r0, r5, #8
     3da:	b2c0      	uxtb	r0, r0
     3dc:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress));		/* send low address byte */
     3de:	b2e8      	uxtb	r0, r5
     3e0:	47a0      	blx	r4
	spi_transmit((uint8_t)(command));		/* send data low byte */
     3e2:	b2f0      	uxtb	r0, r6
     3e4:	47a0      	blx	r4
	spi_transmit((uint8_t)(command >> 8));
     3e6:	0a30      	lsrs	r0, r6, #8
     3e8:	b2c0      	uxtb	r0, r0
     3ea:	47a0      	blx	r4
	spi_transmit((uint8_t)(command >> 16));
     3ec:	0c30      	lsrs	r0, r6, #16
     3ee:	b2c0      	uxtb	r0, r0
     3f0:	47a0      	blx	r4
	spi_transmit((uint8_t)(command >> 24));		/* Send data high byte */
     3f2:	0e30      	lsrs	r0, r6, #24
     3f4:	47a0      	blx	r4
	FT8_inc_cmdoffset(4);			/* update the command-ram pointer */
     3f6:	2004      	movs	r0, #4
     3f8:	4b04      	ldr	r3, [pc, #16]	; (40c <FT8_start_cmd+0x58>)
     3fa:	4798      	blx	r3
}
     3fc:	bd70      	pop	{r4, r5, r6, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	200000a4 	.word	0x200000a4
     404:	00000abd 	.word	0x00000abd
     408:	00000ad9 	.word	0x00000ad9
     40c:	0000039d 	.word	0x0000039d

00000410 <FT8_cmd_dl>:
 FT8_cmd_dl(LINE_WIDTH(1*16));
 FT8_cmd_dl(VERTEX2F(0,0));
 FT8_cmd_dl(DL_BEGIN | FT8_RECTS);
*/
void FT8_cmd_dl(uint32_t command)
{
     410:	b510      	push	{r4, lr}
	FT8_start_cmd(command);
     412:	4b02      	ldr	r3, [pc, #8]	; (41c <FT8_cmd_dl+0xc>)
     414:	4798      	blx	r3
	FT8_cs_clear();
     416:	4b02      	ldr	r3, [pc, #8]	; (420 <FT8_cmd_dl+0x10>)
     418:	4798      	blx	r3
}
     41a:	bd10      	pop	{r4, pc}
     41c:	000003b5 	.word	0x000003b5
     420:	00000ac9 	.word	0x00000ac9

00000424 <FT8_write_string>:


/* Write a string to co-processor memory in context of a command: no chip-select, just plain spi-transfers */
void FT8_write_string(const char *text)
{
     424:	b570      	push	{r4, r5, r6, lr}
     426:	0005      	movs	r5, r0
	uint8_t textindex = 0;
     428:	2400      	movs	r4, #0
	uint8_t padding = 0;

	while(text[textindex] != 0)
     42a:	e003      	b.n	434 <FT8_write_string+0x10>
	{
		spi_transmit(text[textindex]);
     42c:	4b0c      	ldr	r3, [pc, #48]	; (460 <FT8_write_string+0x3c>)
     42e:	4798      	blx	r3
		textindex++;
     430:	3401      	adds	r4, #1
     432:	b2e4      	uxtb	r4, r4
	while(text[textindex] != 0)
     434:	5d28      	ldrb	r0, [r5, r4]
     436:	2800      	cmp	r0, #0
     438:	d1f8      	bne.n	42c <FT8_write_string+0x8>
	}

	padding = textindex % 4;  /* 0, 1, 2 oder 3 */
     43a:	2303      	movs	r3, #3
     43c:	4023      	ands	r3, r4
	padding = 4-padding; /* 4, 3, 2, 1 */
     43e:	2504      	movs	r5, #4
     440:	1aed      	subs	r5, r5, r3
     442:	b2ed      	uxtb	r5, r5

	while(padding > 0)
     444:	e006      	b.n	454 <FT8_write_string+0x30>
	{
		spi_transmit(0);
     446:	2000      	movs	r0, #0
     448:	4b05      	ldr	r3, [pc, #20]	; (460 <FT8_write_string+0x3c>)
     44a:	4798      	blx	r3
		padding--;
     44c:	3d01      	subs	r5, #1
     44e:	b2ed      	uxtb	r5, r5
		textindex++;
     450:	3401      	adds	r4, #1
     452:	b2e4      	uxtb	r4, r4
	while(padding > 0)
     454:	2d00      	cmp	r5, #0
     456:	d1f6      	bne.n	446 <FT8_write_string+0x22>
	}

	FT8_inc_cmdoffset(textindex);
     458:	b2a0      	uxth	r0, r4
     45a:	4b02      	ldr	r3, [pc, #8]	; (464 <FT8_write_string+0x40>)
     45c:	4798      	blx	r3
}
     45e:	bd70      	pop	{r4, r5, r6, pc}
     460:	00000ad9 	.word	0x00000ad9
     464:	0000039d 	.word	0x0000039d

00000468 <FT8_cmd_text>:

/* commands to draw graphics objects: */

void FT8_cmd_text(int16_t x0, int16_t y0, int16_t font, uint16_t options, const char* text)
{
     468:	b5f0      	push	{r4, r5, r6, r7, lr}
     46a:	b083      	sub	sp, #12
     46c:	0006      	movs	r6, r0
     46e:	000d      	movs	r5, r1
     470:	0014      	movs	r4, r2
     472:	9301      	str	r3, [sp, #4]
	FT8_start_cmd(CMD_TEXT);
     474:	20f4      	movs	r0, #244	; 0xf4
     476:	4240      	negs	r0, r0
     478:	4b10      	ldr	r3, [pc, #64]	; (4bc <FT8_cmd_text+0x54>)
     47a:	4798      	blx	r3

	spi_transmit((uint8_t)(x0));
     47c:	b2f0      	uxtb	r0, r6
     47e:	4f10      	ldr	r7, [pc, #64]	; (4c0 <FT8_cmd_text+0x58>)
     480:	47b8      	blx	r7
	spi_transmit((uint8_t)(x0 >> 8));
     482:	1236      	asrs	r6, r6, #8
     484:	b2f0      	uxtb	r0, r6
     486:	47b8      	blx	r7

	spi_transmit((uint8_t)(y0));
     488:	b2e8      	uxtb	r0, r5
     48a:	47b8      	blx	r7
	spi_transmit((uint8_t)(y0 >> 8));
     48c:	122d      	asrs	r5, r5, #8
     48e:	b2e8      	uxtb	r0, r5
     490:	47b8      	blx	r7

	spi_transmit((uint8_t)(font));
     492:	b2e0      	uxtb	r0, r4
     494:	47b8      	blx	r7
	spi_transmit((uint8_t)(font >> 8));
     496:	1224      	asrs	r4, r4, #8
     498:	b2e0      	uxtb	r0, r4
     49a:	47b8      	blx	r7

	spi_transmit((uint8_t)(options));
     49c:	9c01      	ldr	r4, [sp, #4]
     49e:	b2e0      	uxtb	r0, r4
     4a0:	47b8      	blx	r7
	spi_transmit((uint8_t)(options >> 8));
     4a2:	0a20      	lsrs	r0, r4, #8
     4a4:	47b8      	blx	r7

	FT8_inc_cmdoffset(8);
     4a6:	2008      	movs	r0, #8
     4a8:	4b06      	ldr	r3, [pc, #24]	; (4c4 <FT8_cmd_text+0x5c>)
     4aa:	4798      	blx	r3
	FT8_write_string(text);
     4ac:	9808      	ldr	r0, [sp, #32]
     4ae:	4b06      	ldr	r3, [pc, #24]	; (4c8 <FT8_cmd_text+0x60>)
     4b0:	4798      	blx	r3

	FT8_cs_clear();
     4b2:	4b06      	ldr	r3, [pc, #24]	; (4cc <FT8_cmd_text+0x64>)
     4b4:	4798      	blx	r3
}
     4b6:	b003      	add	sp, #12
     4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	000003b5 	.word	0x000003b5
     4c0:	00000ad9 	.word	0x00000ad9
     4c4:	0000039d 	.word	0x0000039d
     4c8:	00000425 	.word	0x00000425
     4cc:	00000ac9 	.word	0x00000ac9

000004d0 <FT8_cmd_bgcolor>:
	FT8_inc_cmdoffset(16);
}


void FT8_cmd_bgcolor(uint32_t color)
{
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	0004      	movs	r4, r0
	FT8_start_cmd(CMD_BGCOLOR);
     4d4:	20f7      	movs	r0, #247	; 0xf7
     4d6:	4240      	negs	r0, r0
     4d8:	4b09      	ldr	r3, [pc, #36]	; (500 <FT8_cmd_bgcolor+0x30>)
     4da:	4798      	blx	r3

	spi_transmit((uint8_t)(color));
     4dc:	b2e0      	uxtb	r0, r4
     4de:	4d09      	ldr	r5, [pc, #36]	; (504 <FT8_cmd_bgcolor+0x34>)
     4e0:	47a8      	blx	r5
	spi_transmit((uint8_t)(color >> 8));
     4e2:	0a20      	lsrs	r0, r4, #8
     4e4:	b2c0      	uxtb	r0, r0
     4e6:	47a8      	blx	r5
	spi_transmit((uint8_t)(color >> 16));
     4e8:	0c24      	lsrs	r4, r4, #16
     4ea:	b2e0      	uxtb	r0, r4
     4ec:	47a8      	blx	r5
	spi_transmit(0x00);
     4ee:	2000      	movs	r0, #0
     4f0:	47a8      	blx	r5

	FT8_cs_clear();
     4f2:	4b05      	ldr	r3, [pc, #20]	; (508 <FT8_cmd_bgcolor+0x38>)
     4f4:	4798      	blx	r3
	FT8_inc_cmdoffset(4);
     4f6:	2004      	movs	r0, #4
     4f8:	4b04      	ldr	r3, [pc, #16]	; (50c <FT8_cmd_bgcolor+0x3c>)
     4fa:	4798      	blx	r3
}
     4fc:	bd70      	pop	{r4, r5, r6, pc}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	000003b5 	.word	0x000003b5
     504:	00000ad9 	.word	0x00000ad9
     508:	00000ac9 	.word	0x00000ac9
     50c:	0000039d 	.word	0x0000039d

00000510 <FT8_cmd_gauge>:
	FT8_inc_cmdoffset(4);
}


void FT8_cmd_gauge(int16_t x0, int16_t y0, int16_t r0, uint16_t options, uint16_t major, uint16_t minor, uint16_t val, uint16_t range)
{
     510:	b5f0      	push	{r4, r5, r6, r7, lr}
     512:	46de      	mov	lr, fp
     514:	4657      	mov	r7, sl
     516:	464e      	mov	r6, r9
     518:	4645      	mov	r5, r8
     51a:	b5e0      	push	{r5, r6, r7, lr}
     51c:	b083      	sub	sp, #12
     51e:	0006      	movs	r6, r0
     520:	000d      	movs	r5, r1
     522:	0014      	movs	r4, r2
     524:	9301      	str	r3, [sp, #4]
     526:	ab0c      	add	r3, sp, #48	; 0x30
     528:	881a      	ldrh	r2, [r3, #0]
     52a:	4693      	mov	fp, r2
     52c:	ab0d      	add	r3, sp, #52	; 0x34
     52e:	881a      	ldrh	r2, [r3, #0]
     530:	4692      	mov	sl, r2
     532:	ab0e      	add	r3, sp, #56	; 0x38
     534:	881a      	ldrh	r2, [r3, #0]
     536:	4691      	mov	r9, r2
     538:	ab0f      	add	r3, sp, #60	; 0x3c
     53a:	881a      	ldrh	r2, [r3, #0]
     53c:	4690      	mov	r8, r2
	FT8_start_cmd(CMD_GAUGE);
     53e:	20ed      	movs	r0, #237	; 0xed
     540:	4240      	negs	r0, r0
     542:	4b21      	ldr	r3, [pc, #132]	; (5c8 <FT8_cmd_gauge+0xb8>)
     544:	4798      	blx	r3

	spi_transmit((uint8_t)(x0));
     546:	b2f0      	uxtb	r0, r6
     548:	4f20      	ldr	r7, [pc, #128]	; (5cc <FT8_cmd_gauge+0xbc>)
     54a:	47b8      	blx	r7
	spi_transmit((uint8_t)(x0 >> 8));
     54c:	1236      	asrs	r6, r6, #8
     54e:	b2f0      	uxtb	r0, r6
     550:	47b8      	blx	r7

	spi_transmit((uint8_t)(y0));
     552:	b2e8      	uxtb	r0, r5
     554:	47b8      	blx	r7
	spi_transmit((uint8_t)(y0 >> 8));
     556:	122d      	asrs	r5, r5, #8
     558:	b2e8      	uxtb	r0, r5
     55a:	47b8      	blx	r7

	spi_transmit((uint8_t)(r0));
     55c:	b2e0      	uxtb	r0, r4
     55e:	47b8      	blx	r7
	spi_transmit((uint8_t)(r0 >> 8));
     560:	1224      	asrs	r4, r4, #8
     562:	b2e0      	uxtb	r0, r4
     564:	47b8      	blx	r7

	spi_transmit((uint8_t)(options));
     566:	9c01      	ldr	r4, [sp, #4]
     568:	b2e0      	uxtb	r0, r4
     56a:	47b8      	blx	r7
	spi_transmit((uint8_t)(options >> 8));
     56c:	0a20      	lsrs	r0, r4, #8
     56e:	47b8      	blx	r7

	spi_transmit((uint8_t)(major));
     570:	465b      	mov	r3, fp
     572:	466a      	mov	r2, sp
     574:	7113      	strb	r3, [r2, #4]
     576:	7910      	ldrb	r0, [r2, #4]
     578:	47b8      	blx	r7
	spi_transmit((uint8_t)(major >> 8));
     57a:	465b      	mov	r3, fp
     57c:	0a18      	lsrs	r0, r3, #8
     57e:	47b8      	blx	r7

	spi_transmit((uint8_t)(minor));
     580:	4653      	mov	r3, sl
     582:	466a      	mov	r2, sp
     584:	7113      	strb	r3, [r2, #4]
     586:	7910      	ldrb	r0, [r2, #4]
     588:	47b8      	blx	r7
	spi_transmit((uint8_t)(minor >> 8));
     58a:	4653      	mov	r3, sl
     58c:	0a18      	lsrs	r0, r3, #8
     58e:	47b8      	blx	r7

	spi_transmit((uint8_t)(val));
     590:	464b      	mov	r3, r9
     592:	466a      	mov	r2, sp
     594:	7113      	strb	r3, [r2, #4]
     596:	7910      	ldrb	r0, [r2, #4]
     598:	47b8      	blx	r7
	spi_transmit((uint8_t)(val >> 8));
     59a:	464b      	mov	r3, r9
     59c:	0a18      	lsrs	r0, r3, #8
     59e:	47b8      	blx	r7

	spi_transmit((uint8_t)(range));
     5a0:	4643      	mov	r3, r8
     5a2:	466a      	mov	r2, sp
     5a4:	7113      	strb	r3, [r2, #4]
     5a6:	7910      	ldrb	r0, [r2, #4]
     5a8:	47b8      	blx	r7
	spi_transmit((uint8_t)(range >> 8));
     5aa:	4643      	mov	r3, r8
     5ac:	0a18      	lsrs	r0, r3, #8
     5ae:	47b8      	blx	r7

	FT8_cs_clear();
     5b0:	4b07      	ldr	r3, [pc, #28]	; (5d0 <FT8_cmd_gauge+0xc0>)
     5b2:	4798      	blx	r3
	FT8_inc_cmdoffset(16);
     5b4:	2010      	movs	r0, #16
     5b6:	4b07      	ldr	r3, [pc, #28]	; (5d4 <FT8_cmd_gauge+0xc4>)
     5b8:	4798      	blx	r3
}
     5ba:	b003      	add	sp, #12
     5bc:	bc3c      	pop	{r2, r3, r4, r5}
     5be:	4690      	mov	r8, r2
     5c0:	4699      	mov	r9, r3
     5c2:	46a2      	mov	sl, r4
     5c4:	46ab      	mov	fp, r5
     5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c8:	000003b5 	.word	0x000003b5
     5cc:	00000ad9 	.word	0x00000ad9
     5d0:	00000ac9 	.word	0x00000ac9
     5d4:	0000039d 	.word	0x0000039d

000005d8 <FT8_cmd_progress>:
	FT8_cs_clear();
}


void FT8_cmd_progress(int16_t x0, int16_t y0, int16_t w0, int16_t h0, uint16_t options, uint16_t val, uint16_t range)
{
     5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5da:	46de      	mov	lr, fp
     5dc:	4657      	mov	r7, sl
     5de:	464e      	mov	r6, r9
     5e0:	b5c0      	push	{r6, r7, lr}
     5e2:	b082      	sub	sp, #8
     5e4:	0007      	movs	r7, r0
     5e6:	000e      	movs	r6, r1
     5e8:	0015      	movs	r5, r2
     5ea:	9301      	str	r3, [sp, #4]
     5ec:	ab0a      	add	r3, sp, #40	; 0x28
     5ee:	881a      	ldrh	r2, [r3, #0]
     5f0:	4693      	mov	fp, r2
     5f2:	ab0b      	add	r3, sp, #44	; 0x2c
     5f4:	881a      	ldrh	r2, [r3, #0]
     5f6:	4692      	mov	sl, r2
     5f8:	ab0c      	add	r3, sp, #48	; 0x30
     5fa:	881a      	ldrh	r2, [r3, #0]
     5fc:	4691      	mov	r9, r2
	FT8_start_cmd(CMD_PROGRESS);
     5fe:	20f1      	movs	r0, #241	; 0xf1
     600:	4240      	negs	r0, r0
     602:	4b1f      	ldr	r3, [pc, #124]	; (680 <FT8_cmd_progress+0xa8>)
     604:	4798      	blx	r3

	spi_transmit((uint8_t)(x0));
     606:	b2f8      	uxtb	r0, r7
     608:	4c1e      	ldr	r4, [pc, #120]	; (684 <FT8_cmd_progress+0xac>)
     60a:	47a0      	blx	r4
	spi_transmit((uint8_t)(x0 >> 8));
     60c:	123f      	asrs	r7, r7, #8
     60e:	b2f8      	uxtb	r0, r7
     610:	47a0      	blx	r4

	spi_transmit((uint8_t)(y0));
     612:	b2f0      	uxtb	r0, r6
     614:	47a0      	blx	r4
	spi_transmit((uint8_t)(y0 >> 8));
     616:	1236      	asrs	r6, r6, #8
     618:	b2f0      	uxtb	r0, r6
     61a:	47a0      	blx	r4

	spi_transmit((uint8_t)(w0));
     61c:	b2e8      	uxtb	r0, r5
     61e:	47a0      	blx	r4
	spi_transmit((uint8_t)(w0 >> 8));
     620:	122d      	asrs	r5, r5, #8
     622:	b2e8      	uxtb	r0, r5
     624:	47a0      	blx	r4

	spi_transmit((uint8_t)(h0));
     626:	9d01      	ldr	r5, [sp, #4]
     628:	b2e8      	uxtb	r0, r5
     62a:	47a0      	blx	r4
	spi_transmit((uint8_t)(h0 >> 8));
     62c:	122b      	asrs	r3, r5, #8
     62e:	b2d8      	uxtb	r0, r3
     630:	47a0      	blx	r4

	spi_transmit((uint8_t)(options));
     632:	465b      	mov	r3, fp
     634:	466a      	mov	r2, sp
     636:	7113      	strb	r3, [r2, #4]
     638:	7910      	ldrb	r0, [r2, #4]
     63a:	47a0      	blx	r4
	spi_transmit((uint8_t)(options >> 8));
     63c:	465b      	mov	r3, fp
     63e:	0a18      	lsrs	r0, r3, #8
     640:	47a0      	blx	r4

	spi_transmit((uint8_t)(val));
     642:	4653      	mov	r3, sl
     644:	466a      	mov	r2, sp
     646:	7113      	strb	r3, [r2, #4]
     648:	7910      	ldrb	r0, [r2, #4]
     64a:	47a0      	blx	r4
	spi_transmit((uint8_t)(val >> 8));
     64c:	4653      	mov	r3, sl
     64e:	0a18      	lsrs	r0, r3, #8
     650:	47a0      	blx	r4

	spi_transmit((uint8_t)(range));
     652:	464b      	mov	r3, r9
     654:	466a      	mov	r2, sp
     656:	7113      	strb	r3, [r2, #4]
     658:	7910      	ldrb	r0, [r2, #4]
     65a:	47a0      	blx	r4
	spi_transmit((uint8_t)(range >> 8));
     65c:	464b      	mov	r3, r9
     65e:	0a18      	lsrs	r0, r3, #8
     660:	47a0      	blx	r4

	spi_transmit(0x00);	/* dummy byte for 4-byte alignment */
     662:	2000      	movs	r0, #0
     664:	47a0      	blx	r4
	spi_transmit(0x00); /* dummy byte for 4-byte alignment */
     666:	2000      	movs	r0, #0
     668:	47a0      	blx	r4

	FT8_cs_clear();
     66a:	4b07      	ldr	r3, [pc, #28]	; (688 <FT8_cmd_progress+0xb0>)
     66c:	4798      	blx	r3
	FT8_inc_cmdoffset(16);	/* update the command-ram pointer */
     66e:	2010      	movs	r0, #16
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <FT8_cmd_progress+0xb4>)
     672:	4798      	blx	r3
}
     674:	b002      	add	sp, #8
     676:	bc1c      	pop	{r2, r3, r4}
     678:	4691      	mov	r9, r2
     67a:	469a      	mov	sl, r3
     67c:	46a3      	mov	fp, r4
     67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     680:	000003b5 	.word	0x000003b5
     684:	00000ad9 	.word	0x00000ad9
     688:	00000ac9 	.word	0x00000ac9
     68c:	0000039d 	.word	0x0000039d

00000690 <FT8_cmd_number>:
}
#endif


void FT8_cmd_number(int16_t x0, int16_t y0, int16_t font, uint16_t options, int32_t number)
{
     690:	b5f0      	push	{r4, r5, r6, r7, lr}
     692:	b083      	sub	sp, #12
     694:	0006      	movs	r6, r0
     696:	000d      	movs	r5, r1
     698:	0014      	movs	r4, r2
     69a:	9301      	str	r3, [sp, #4]
	FT8_start_cmd(CMD_NUMBER);
     69c:	20d2      	movs	r0, #210	; 0xd2
     69e:	4240      	negs	r0, r0
     6a0:	4b15      	ldr	r3, [pc, #84]	; (6f8 <FT8_cmd_number+0x68>)
     6a2:	4798      	blx	r3

	spi_transmit((uint8_t)(x0));
     6a4:	b2f0      	uxtb	r0, r6
     6a6:	4f15      	ldr	r7, [pc, #84]	; (6fc <FT8_cmd_number+0x6c>)
     6a8:	47b8      	blx	r7
	spi_transmit((uint8_t)(x0 >> 8));
     6aa:	1236      	asrs	r6, r6, #8
     6ac:	b2f0      	uxtb	r0, r6
     6ae:	47b8      	blx	r7

	spi_transmit((uint8_t)(y0));
     6b0:	b2e8      	uxtb	r0, r5
     6b2:	47b8      	blx	r7
	spi_transmit((uint8_t)(y0 >> 8));
     6b4:	122d      	asrs	r5, r5, #8
     6b6:	b2e8      	uxtb	r0, r5
     6b8:	47b8      	blx	r7

	spi_transmit((uint8_t)(font));
     6ba:	b2e0      	uxtb	r0, r4
     6bc:	47b8      	blx	r7
	spi_transmit((uint8_t)(font >> 8));
     6be:	1224      	asrs	r4, r4, #8
     6c0:	b2e0      	uxtb	r0, r4
     6c2:	47b8      	blx	r7
	

	spi_transmit((uint8_t)(options));
     6c4:	9c01      	ldr	r4, [sp, #4]
     6c6:	b2e0      	uxtb	r0, r4
     6c8:	47b8      	blx	r7
	spi_transmit((uint8_t)(options >> 8));
     6ca:	0a20      	lsrs	r0, r4, #8
     6cc:	47b8      	blx	r7

	spi_transmit((uint8_t)(number));
     6ce:	ab02      	add	r3, sp, #8
     6d0:	7e18      	ldrb	r0, [r3, #24]
     6d2:	47b8      	blx	r7
	spi_transmit((uint8_t)(number >> 8));
     6d4:	9b08      	ldr	r3, [sp, #32]
     6d6:	1218      	asrs	r0, r3, #8
     6d8:	b2c0      	uxtb	r0, r0
     6da:	47b8      	blx	r7
	spi_transmit((uint8_t)(number >> 16));
     6dc:	9b08      	ldr	r3, [sp, #32]
     6de:	1418      	asrs	r0, r3, #16
     6e0:	b2c0      	uxtb	r0, r0
     6e2:	47b8      	blx	r7
	spi_transmit((uint8_t)(number >> 24));
     6e4:	9b08      	ldr	r3, [sp, #32]
     6e6:	0e18      	lsrs	r0, r3, #24
     6e8:	47b8      	blx	r7

	FT8_cs_clear();
     6ea:	4b05      	ldr	r3, [pc, #20]	; (700 <FT8_cmd_number+0x70>)
     6ec:	4798      	blx	r3

	FT8_inc_cmdoffset(12);
     6ee:	200c      	movs	r0, #12
     6f0:	4b04      	ldr	r3, [pc, #16]	; (704 <FT8_cmd_number+0x74>)
     6f2:	4798      	blx	r3
}
     6f4:	b003      	add	sp, #12
     6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6f8:	000003b5 	.word	0x000003b5
     6fc:	00000ad9 	.word	0x00000ad9
     700:	00000ac9 	.word	0x00000ac9
     704:	0000039d 	.word	0x0000039d

00000708 <FT8_cmd_romfont>:
}


#ifdef FT8_81X_ENABLE
void FT8_cmd_romfont(uint32_t font, uint32_t romslot)
{
     708:	b570      	push	{r4, r5, r6, lr}
     70a:	0006      	movs	r6, r0
     70c:	000d      	movs	r5, r1
	FT8_start_cmd(CMD_ROMFONT);
     70e:	20c1      	movs	r0, #193	; 0xc1
     710:	4240      	negs	r0, r0
     712:	4b0d      	ldr	r3, [pc, #52]	; (748 <FT8_cmd_romfont+0x40>)
     714:	4798      	blx	r3
	
	spi_transmit((uint8_t)(font));
     716:	b2f0      	uxtb	r0, r6
     718:	4c0c      	ldr	r4, [pc, #48]	; (74c <FT8_cmd_romfont+0x44>)
     71a:	47a0      	blx	r4
	spi_transmit((uint8_t)(font >> 8));
     71c:	0a36      	lsrs	r6, r6, #8
     71e:	b2f0      	uxtb	r0, r6
     720:	47a0      	blx	r4
	spi_transmit(0x00);
     722:	2000      	movs	r0, #0
     724:	47a0      	blx	r4
	spi_transmit(0x00);
     726:	2000      	movs	r0, #0
     728:	47a0      	blx	r4
	
	spi_transmit((uint8_t)(romslot));
     72a:	b2e8      	uxtb	r0, r5
     72c:	47a0      	blx	r4
	spi_transmit((uint8_t)(romslot >> 8));
     72e:	0a2d      	lsrs	r5, r5, #8
     730:	b2e8      	uxtb	r0, r5
     732:	47a0      	blx	r4
	spi_transmit(0x00);
     734:	2000      	movs	r0, #0
     736:	47a0      	blx	r4
	spi_transmit(0x00);	
     738:	2000      	movs	r0, #0
     73a:	47a0      	blx	r4
	
	FT8_inc_cmdoffset(8);
     73c:	2008      	movs	r0, #8
     73e:	4b04      	ldr	r3, [pc, #16]	; (750 <FT8_cmd_romfont+0x48>)
     740:	4798      	blx	r3
	FT8_cs_clear();
     742:	4b04      	ldr	r3, [pc, #16]	; (754 <FT8_cmd_romfont+0x4c>)
     744:	4798      	blx	r3
}
     746:	bd70      	pop	{r4, r5, r6, pc}
     748:	000003b5 	.word	0x000003b5
     74c:	00000ad9 	.word	0x00000ad9
     750:	0000039d 	.word	0x0000039d
     754:	00000ac9 	.word	0x00000ac9

00000758 <FT8_cmd_line>:
	FT8_inc_cmdoffset(12);
}


void FT8_cmd_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t width)
{
     758:	b5f0      	push	{r4, r5, r6, r7, lr}
     75a:	46d6      	mov	lr, sl
     75c:	464f      	mov	r7, r9
     75e:	4646      	mov	r6, r8
     760:	b5c0      	push	{r6, r7, lr}
     762:	0005      	movs	r5, r0
     764:	000e      	movs	r6, r1
     766:	4691      	mov	r9, r2
     768:	4698      	mov	r8, r3
     76a:	ab08      	add	r3, sp, #32
     76c:	881c      	ldrh	r4, [r3, #0]
	uint32_t calc;

	FT8_start_cmd((DL_BEGIN | FT8_LINES));
     76e:	4827      	ldr	r0, [pc, #156]	; (80c <FT8_cmd_line+0xb4>)
     770:	4b27      	ldr	r3, [pc, #156]	; (810 <FT8_cmd_line+0xb8>)
     772:	4798      	blx	r3

	calc = LINE_WIDTH(width * 16);
     774:	0124      	lsls	r4, r4, #4
     776:	20ff      	movs	r0, #255	; 0xff
     778:	0100      	lsls	r0, r0, #4
     77a:	4004      	ands	r4, r0
     77c:	27e0      	movs	r7, #224	; 0xe0
     77e:	053f      	lsls	r7, r7, #20
     780:	4327      	orrs	r7, r4
	spi_transmit((uint8_t)(calc));
     782:	b2f8      	uxtb	r0, r7
     784:	4c23      	ldr	r4, [pc, #140]	; (814 <FT8_cmd_line+0xbc>)
     786:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     788:	0a38      	lsrs	r0, r7, #8
     78a:	b2c0      	uxtb	r0, r0
     78c:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     78e:	2000      	movs	r0, #0
     790:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     792:	0e38      	lsrs	r0, r7, #24
     794:	47a0      	blx	r4

	calc = VERTEX2F(x0 * 16, y0 * 16);
     796:	04ed      	lsls	r5, r5, #19
     798:	4b1f      	ldr	r3, [pc, #124]	; (818 <FT8_cmd_line+0xc0>)
     79a:	469a      	mov	sl, r3
     79c:	401d      	ands	r5, r3
     79e:	0136      	lsls	r6, r6, #4
     7a0:	4f1e      	ldr	r7, [pc, #120]	; (81c <FT8_cmd_line+0xc4>)
     7a2:	403e      	ands	r6, r7
     7a4:	4335      	orrs	r5, r6
     7a6:	2680      	movs	r6, #128	; 0x80
     7a8:	05f6      	lsls	r6, r6, #23
     7aa:	4335      	orrs	r5, r6
	spi_transmit((uint8_t)(calc));
     7ac:	b2e8      	uxtb	r0, r5
     7ae:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     7b0:	0a28      	lsrs	r0, r5, #8
     7b2:	b2c0      	uxtb	r0, r0
     7b4:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     7b6:	0c28      	lsrs	r0, r5, #16
     7b8:	b2c0      	uxtb	r0, r0
     7ba:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     7bc:	0e28      	lsrs	r0, r5, #24
     7be:	47a0      	blx	r4

	calc = VERTEX2F(x1 * 16, y1 * 16);
     7c0:	464b      	mov	r3, r9
     7c2:	04dd      	lsls	r5, r3, #19
     7c4:	4653      	mov	r3, sl
     7c6:	401d      	ands	r5, r3
     7c8:	4643      	mov	r3, r8
     7ca:	0118      	lsls	r0, r3, #4
     7cc:	4038      	ands	r0, r7
     7ce:	4305      	orrs	r5, r0
     7d0:	4335      	orrs	r5, r6
	spi_transmit((uint8_t)(calc));
     7d2:	b2e8      	uxtb	r0, r5
     7d4:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     7d6:	0a28      	lsrs	r0, r5, #8
     7d8:	b2c0      	uxtb	r0, r0
     7da:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     7dc:	0c28      	lsrs	r0, r5, #16
     7de:	b2c0      	uxtb	r0, r0
     7e0:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     7e2:	0e28      	lsrs	r0, r5, #24
     7e4:	47a0      	blx	r4

	spi_transmit((uint8_t)(DL_END));
     7e6:	2000      	movs	r0, #0
     7e8:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 8));
     7ea:	2000      	movs	r0, #0
     7ec:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 16));
     7ee:	2000      	movs	r0, #0
     7f0:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 24));
     7f2:	2021      	movs	r0, #33	; 0x21
     7f4:	47a0      	blx	r4

	FT8_cs_clear();
     7f6:	4b0a      	ldr	r3, [pc, #40]	; (820 <FT8_cmd_line+0xc8>)
     7f8:	4798      	blx	r3
	FT8_inc_cmdoffset(16);
     7fa:	2010      	movs	r0, #16
     7fc:	4b09      	ldr	r3, [pc, #36]	; (824 <FT8_cmd_line+0xcc>)
     7fe:	4798      	blx	r3
}
     800:	bc1c      	pop	{r2, r3, r4}
     802:	4690      	mov	r8, r2
     804:	4699      	mov	r9, r3
     806:	46a2      	mov	sl, r4
     808:	bdf0      	pop	{r4, r5, r6, r7, pc}
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	1f000003 	.word	0x1f000003
     810:	000003b5 	.word	0x000003b5
     814:	00000ad9 	.word	0x00000ad9
     818:	3ff80000 	.word	0x3ff80000
     81c:	00007ff0 	.word	0x00007ff0
     820:	00000ac9 	.word	0x00000ac9
     824:	0000039d 	.word	0x0000039d

00000828 <FT8_cmd_rect>:


void FT8_cmd_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t corner)
{
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
     82a:	46d6      	mov	lr, sl
     82c:	464f      	mov	r7, r9
     82e:	4646      	mov	r6, r8
     830:	b5c0      	push	{r6, r7, lr}
     832:	0005      	movs	r5, r0
     834:	000e      	movs	r6, r1
     836:	4691      	mov	r9, r2
     838:	4698      	mov	r8, r3
     83a:	ab08      	add	r3, sp, #32
     83c:	881c      	ldrh	r4, [r3, #0]
	uint32_t calc;

	FT8_start_cmd((DL_BEGIN | FT8_RECTS));
     83e:	4827      	ldr	r0, [pc, #156]	; (8dc <FT8_cmd_rect+0xb4>)
     840:	4b27      	ldr	r3, [pc, #156]	; (8e0 <FT8_cmd_rect+0xb8>)
     842:	4798      	blx	r3

	calc = LINE_WIDTH(corner * 16);
     844:	0124      	lsls	r4, r4, #4
     846:	20ff      	movs	r0, #255	; 0xff
     848:	0100      	lsls	r0, r0, #4
     84a:	4004      	ands	r4, r0
     84c:	27e0      	movs	r7, #224	; 0xe0
     84e:	053f      	lsls	r7, r7, #20
     850:	4327      	orrs	r7, r4
	spi_transmit((uint8_t)(calc));
     852:	b2f8      	uxtb	r0, r7
     854:	4c23      	ldr	r4, [pc, #140]	; (8e4 <FT8_cmd_rect+0xbc>)
     856:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     858:	0a38      	lsrs	r0, r7, #8
     85a:	b2c0      	uxtb	r0, r0
     85c:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     85e:	2000      	movs	r0, #0
     860:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     862:	0e38      	lsrs	r0, r7, #24
     864:	47a0      	blx	r4

	calc = VERTEX2F(x0 * 16, y0 * 16);
     866:	04ed      	lsls	r5, r5, #19
     868:	4b1f      	ldr	r3, [pc, #124]	; (8e8 <FT8_cmd_rect+0xc0>)
     86a:	469a      	mov	sl, r3
     86c:	401d      	ands	r5, r3
     86e:	0136      	lsls	r6, r6, #4
     870:	4f1e      	ldr	r7, [pc, #120]	; (8ec <FT8_cmd_rect+0xc4>)
     872:	403e      	ands	r6, r7
     874:	4335      	orrs	r5, r6
     876:	2680      	movs	r6, #128	; 0x80
     878:	05f6      	lsls	r6, r6, #23
     87a:	4335      	orrs	r5, r6
	spi_transmit((uint8_t)(calc));
     87c:	b2e8      	uxtb	r0, r5
     87e:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     880:	0a28      	lsrs	r0, r5, #8
     882:	b2c0      	uxtb	r0, r0
     884:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     886:	0c28      	lsrs	r0, r5, #16
     888:	b2c0      	uxtb	r0, r0
     88a:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     88c:	0e28      	lsrs	r0, r5, #24
     88e:	47a0      	blx	r4

	calc = VERTEX2F(x1 * 16, y1 * 16);
     890:	464b      	mov	r3, r9
     892:	04dd      	lsls	r5, r3, #19
     894:	4653      	mov	r3, sl
     896:	401d      	ands	r5, r3
     898:	4643      	mov	r3, r8
     89a:	0118      	lsls	r0, r3, #4
     89c:	4038      	ands	r0, r7
     89e:	4305      	orrs	r5, r0
     8a0:	4335      	orrs	r5, r6
	spi_transmit((uint8_t)(calc));
     8a2:	b2e8      	uxtb	r0, r5
     8a4:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     8a6:	0a28      	lsrs	r0, r5, #8
     8a8:	b2c0      	uxtb	r0, r0
     8aa:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     8ac:	0c28      	lsrs	r0, r5, #16
     8ae:	b2c0      	uxtb	r0, r0
     8b0:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     8b2:	0e28      	lsrs	r0, r5, #24
     8b4:	47a0      	blx	r4

	spi_transmit((uint8_t)(DL_END));
     8b6:	2000      	movs	r0, #0
     8b8:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 8));
     8ba:	2000      	movs	r0, #0
     8bc:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 16));
     8be:	2000      	movs	r0, #0
     8c0:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 24));
     8c2:	2021      	movs	r0, #33	; 0x21
     8c4:	47a0      	blx	r4

	FT8_cs_clear();
     8c6:	4b0a      	ldr	r3, [pc, #40]	; (8f0 <FT8_cmd_rect+0xc8>)
     8c8:	4798      	blx	r3
	FT8_inc_cmdoffset(16);
     8ca:	2010      	movs	r0, #16
     8cc:	4b09      	ldr	r3, [pc, #36]	; (8f4 <FT8_cmd_rect+0xcc>)
     8ce:	4798      	blx	r3
}
     8d0:	bc1c      	pop	{r2, r3, r4}
     8d2:	4690      	mov	r8, r2
     8d4:	4699      	mov	r9, r3
     8d6:	46a2      	mov	sl, r4
     8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	1f000009 	.word	0x1f000009
     8e0:	000003b5 	.word	0x000003b5
     8e4:	00000ad9 	.word	0x00000ad9
     8e8:	3ff80000 	.word	0x3ff80000
     8ec:	00007ff0 	.word	0x00007ff0
     8f0:	00000ac9 	.word	0x00000ac9
     8f4:	0000039d 	.word	0x0000039d

000008f8 <FT8_init>:


/* init, has to be executed with the SPI setup to 11 MHz or less as required by FT8xx */

uint8_t FT8_init(void)
{
     8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t gpio;
	uint8_t chipid;
	uint8_t timeout = 0;

	FT8_pdn_set();
     8fa:	4b4b      	ldr	r3, [pc, #300]	; (a28 <FT8_init+0x130>)
     8fc:	4798      	blx	r3
	DELAY_MS(6);	/* minimum time for power-down is 5ms */
     8fe:	2006      	movs	r0, #6
     900:	4c4a      	ldr	r4, [pc, #296]	; (a2c <FT8_init+0x134>)
     902:	47a0      	blx	r4
	FT8_pdn_clear();
     904:	4b4a      	ldr	r3, [pc, #296]	; (a30 <FT8_init+0x138>)
     906:	4798      	blx	r3
	DELAY_MS(21);	/* minimum time to allow from rising PD_N to first access is 20ms */
     908:	2015      	movs	r0, #21
     90a:	47a0      	blx	r4
	{
		FT8_cmdWrite(FT8_CLKEXT);	/* setup FT8xx for external clock */
	}
	else
	{
		FT8_cmdWrite(FT8_CLKINT);	/* setup FT8xx for internal clock */
     90c:	2048      	movs	r0, #72	; 0x48
     90e:	4c49      	ldr	r4, [pc, #292]	; (a34 <FT8_init+0x13c>)
     910:	47a0      	blx	r4
	}

	FT8_cmdWrite(FT8_ACTIVE);	/* start FT8xx */
     912:	2000      	movs	r0, #0
     914:	47a0      	blx	r4

	chipid = FT8_memRead8(REG_ID);	/* Read ID register */
     916:	4848      	ldr	r0, [pc, #288]	; (a38 <FT8_init+0x140>)
     918:	4b48      	ldr	r3, [pc, #288]	; (a3c <FT8_init+0x144>)
     91a:	4798      	blx	r3
     91c:	0005      	movs	r5, r0
	uint8_t timeout = 0;
     91e:	2400      	movs	r4, #0
	while(chipid != 0x7C)	/* if chipid is not 0x7c, continue to read it until it is, FT81x may need a moment for it's power on selftest */
     920:	2d7c      	cmp	r5, #124	; 0x7c
     922:	d00c      	beq.n	93e <FT8_init+0x46>
	{
		chipid = FT8_memRead8(REG_ID);
     924:	4844      	ldr	r0, [pc, #272]	; (a38 <FT8_init+0x140>)
     926:	4b45      	ldr	r3, [pc, #276]	; (a3c <FT8_init+0x144>)
     928:	4798      	blx	r3
     92a:	0005      	movs	r5, r0
		DELAY_MS(1);
     92c:	2001      	movs	r0, #1
     92e:	4b3f      	ldr	r3, [pc, #252]	; (a2c <FT8_init+0x134>)
     930:	4798      	blx	r3
		timeout++;
     932:	3401      	adds	r4, #1
     934:	b2e4      	uxtb	r4, r4
		if(timeout > 200)
     936:	2cc8      	cmp	r4, #200	; 0xc8
     938:	d9f2      	bls.n	920 <FT8_init+0x28>
		{
			return 0;
     93a:	2000      	movs	r0, #0
     93c:	e072      	b.n	a24 <FT8_init+0x12c>
		}
	}

	FT8_memWrite8(REG_PCLK, 0x00);		/* set PCLK to zero - don't clock the LCD until later */
     93e:	4f40      	ldr	r7, [pc, #256]	; (a40 <FT8_init+0x148>)
     940:	2100      	movs	r1, #0
     942:	0038      	movs	r0, r7
     944:	4d3f      	ldr	r5, [pc, #252]	; (a44 <FT8_init+0x14c>)
     946:	47a8      	blx	r5
	FT8_memWrite8(REG_PWM_DUTY, 10);		/* turn off backlight */
     948:	210a      	movs	r1, #10
     94a:	483f      	ldr	r0, [pc, #252]	; (a48 <FT8_init+0x150>)
     94c:	47a8      	blx	r5

	/* Initialize Display */
	FT8_memWrite16(REG_HSIZE,   FT8_HSIZE);	/* active display width */
     94e:	21f0      	movs	r1, #240	; 0xf0
     950:	0049      	lsls	r1, r1, #1
     952:	483e      	ldr	r0, [pc, #248]	; (a4c <FT8_init+0x154>)
     954:	4c3e      	ldr	r4, [pc, #248]	; (a50 <FT8_init+0x158>)
     956:	47a0      	blx	r4
	FT8_memWrite16(REG_HCYCLE,  FT8_HCYCLE);	/* total number of clocks per line, incl front/back porch */
     958:	2184      	movs	r1, #132	; 0x84
     95a:	00c9      	lsls	r1, r1, #3
     95c:	483d      	ldr	r0, [pc, #244]	; (a54 <FT8_init+0x15c>)
     95e:	47a0      	blx	r4
	FT8_memWrite16(REG_HOFFSET, FT8_HOFFSET);	/* start of active line */
     960:	212e      	movs	r1, #46	; 0x2e
     962:	483d      	ldr	r0, [pc, #244]	; (a58 <FT8_init+0x160>)
     964:	47a0      	blx	r4
	FT8_memWrite16(REG_HSYNC0,  FT8_HSYNC0);	/* start of horizontal sync pulse */
     966:	2100      	movs	r1, #0
     968:	483c      	ldr	r0, [pc, #240]	; (a5c <FT8_init+0x164>)
     96a:	47a0      	blx	r4
	FT8_memWrite16(REG_HSYNC1,  FT8_HSYNC1);	/* end of horizontal sync pulse */
     96c:	210a      	movs	r1, #10
     96e:	483c      	ldr	r0, [pc, #240]	; (a60 <FT8_init+0x168>)
     970:	47a0      	blx	r4
	FT8_memWrite16(REG_VSIZE,   FT8_VSIZE);	/* active display height */
     972:	2188      	movs	r1, #136	; 0x88
     974:	0049      	lsls	r1, r1, #1
     976:	483b      	ldr	r0, [pc, #236]	; (a64 <FT8_init+0x16c>)
     978:	47a0      	blx	r4
	FT8_memWrite16(REG_VCYCLE,  FT8_VCYCLE);	/* total number of lines per screen, incl pre/post */
     97a:	493b      	ldr	r1, [pc, #236]	; (a68 <FT8_init+0x170>)
     97c:	483b      	ldr	r0, [pc, #236]	; (a6c <FT8_init+0x174>)
     97e:	47a0      	blx	r4
	FT8_memWrite16(REG_VOFFSET, FT8_VOFFSET);	/* start of active screen */
     980:	2117      	movs	r1, #23
     982:	483b      	ldr	r0, [pc, #236]	; (a70 <FT8_init+0x178>)
     984:	47a0      	blx	r4
	FT8_memWrite16(REG_VSYNC0,  FT8_VSYNC0);	/* start of vertical sync pulse */
     986:	2100      	movs	r1, #0
     988:	483a      	ldr	r0, [pc, #232]	; (a74 <FT8_init+0x17c>)
     98a:	47a0      	blx	r4
	FT8_memWrite16(REG_VSYNC1,  FT8_VSYNC1);	/* end of vertical sync pulse */
     98c:	210a      	movs	r1, #10
     98e:	483a      	ldr	r0, [pc, #232]	; (a78 <FT8_init+0x180>)
     990:	47a0      	blx	r4
	FT8_memWrite8(REG_SWIZZLE,  FT8_SWIZZLE);	/* FT8xx output to LCD - pin order */
     992:	2100      	movs	r1, #0
     994:	4839      	ldr	r0, [pc, #228]	; (a7c <FT8_init+0x184>)
     996:	47a8      	blx	r5
	FT8_memWrite8(REG_PCLK_POL, FT8_PCLKPOL);	/* LCD data is clocked in on this PCLK edge */
     998:	2101      	movs	r1, #1
     99a:	4839      	ldr	r0, [pc, #228]	; (a80 <FT8_init+0x188>)
     99c:	47a8      	blx	r5
	/* Don't set PCLK yet - wait for just after the first display list */

	/* Configure Touch */
	FT8_memWrite8(REG_TOUCH_MODE, FT8_TMODE_CONTINUOUS);	/* enable touch */
     99e:	2103      	movs	r1, #3
     9a0:	4838      	ldr	r0, [pc, #224]	; (a84 <FT8_init+0x18c>)
     9a2:	47a8      	blx	r5
	FT8_memWrite16(REG_TOUCH_RZTHRESH, FT8_TOUCH_RZTHRESH);	/* eliminate any false touches */
     9a4:	21e1      	movs	r1, #225	; 0xe1
     9a6:	00c9      	lsls	r1, r1, #3
     9a8:	4837      	ldr	r0, [pc, #220]	; (a88 <FT8_init+0x190>)
     9aa:	47a0      	blx	r4

	/* Configure Audio - not used, so disable it */
	FT8_memWrite8(REG_VOL_PB, 0x00);	/* turn recorded audio volume down */
     9ac:	2100      	movs	r1, #0
     9ae:	4837      	ldr	r0, [pc, #220]	; (a8c <FT8_init+0x194>)
     9b0:	47a8      	blx	r5
/*	FT8_memWrite8(REG_VOL_SOUND, 0xff); */	/* turn synthesizer volume on */
	FT8_memWrite8(REG_VOL_SOUND, 0x00);	/* turn synthesizer volume off */
     9b2:	2100      	movs	r1, #0
     9b4:	4836      	ldr	r0, [pc, #216]	; (a90 <FT8_init+0x198>)
     9b6:	47a8      	blx	r5
	FT8_memWrite16(REG_SOUND, 0x6000);	/*	set synthesizer to mute */
     9b8:	21c0      	movs	r1, #192	; 0xc0
     9ba:	01c9      	lsls	r1, r1, #7
     9bc:	4835      	ldr	r0, [pc, #212]	; (a94 <FT8_init+0x19c>)
     9be:	47a0      	blx	r4

	FT8_memWrite32(FT8_RAM_DL, DL_CLEAR_RGB);
     9c0:	2180      	movs	r1, #128	; 0x80
     9c2:	0489      	lsls	r1, r1, #18
     9c4:	20c0      	movs	r0, #192	; 0xc0
     9c6:	0380      	lsls	r0, r0, #14
     9c8:	4c33      	ldr	r4, [pc, #204]	; (a98 <FT8_init+0x1a0>)
     9ca:	47a0      	blx	r4
	FT8_memWrite32(FT8_RAM_DL + 4, (DL_CLEAR | CLR_COL | CLR_STN | CLR_TAG));
     9cc:	4933      	ldr	r1, [pc, #204]	; (a9c <FT8_init+0x1a4>)
     9ce:	4834      	ldr	r0, [pc, #208]	; (aa0 <FT8_init+0x1a8>)
     9d0:	47a0      	blx	r4
	FT8_memWrite32(FT8_RAM_DL + 8, DL_DISPLAY);	/* end of display list */
     9d2:	2100      	movs	r1, #0
     9d4:	4833      	ldr	r0, [pc, #204]	; (aa4 <FT8_init+0x1ac>)
     9d6:	47a0      	blx	r4
	FT8_memWrite32(REG_DLSWAP, FT8_DLSWAP_FRAME);
     9d8:	2102      	movs	r1, #2
     9da:	4833      	ldr	r0, [pc, #204]	; (aa8 <FT8_init+0x1b0>)
     9dc:	47a0      	blx	r4

	/* nothing is being displayed yet... the pixel clock is still 0x00 */

	gpio = FT8_memRead8(REG_GPIO_DIR);
     9de:	4c33      	ldr	r4, [pc, #204]	; (aac <FT8_init+0x1b4>)
     9e0:	0020      	movs	r0, r4
     9e2:	4e16      	ldr	r6, [pc, #88]	; (a3c <FT8_init+0x144>)
     9e4:	47b0      	blx	r6
	gpio |= 0x82; /* set DISP to Output although it always is output, set GPIO1 to Output - Audio Enable on VM800B */
     9e6:	217e      	movs	r1, #126	; 0x7e
     9e8:	4249      	negs	r1, r1
     9ea:	4301      	orrs	r1, r0
     9ec:	b2c9      	uxtb	r1, r1
	FT8_memWrite8(REG_GPIO_DIR, gpio);
     9ee:	0020      	movs	r0, r4
     9f0:	47a8      	blx	r5

	gpio = FT8_memRead8(REG_GPIO);	/* read the FT8xx GPIO register for a read/modify/write operation */
     9f2:	4c2f      	ldr	r4, [pc, #188]	; (ab0 <FT8_init+0x1b8>)
     9f4:	0020      	movs	r0, r4
     9f6:	47b0      	blx	r6
/*	gpio |= 0x82; */					/* set bit 7 of FT8xx GPIO register (DISP), set GPIO1 to High to enable Audio - others are inputs */
	gpio |= 0x80;						/* set bit 7 of FT8xx GPIO register (DISP), others are inputs */
     9f8:	2180      	movs	r1, #128	; 0x80
     9fa:	4249      	negs	r1, r1
     9fc:	4301      	orrs	r1, r0
     9fe:	b2c9      	uxtb	r1, r1
	FT8_memWrite8(REG_GPIO, gpio);	/* enable the DISP signal to the LCD panel */
     a00:	0020      	movs	r0, r4
     a02:	47a8      	blx	r5
	FT8_memWrite8(REG_PCLK, FT8_PCLK);	/* now start clocking data to the LCD panel */
     a04:	2102      	movs	r1, #2
     a06:	0038      	movs	r0, r7
     a08:	47a8      	blx	r5

	FT8_memWrite8(REG_PWM_DUTY, 70);	/* turn on backlight */
     a0a:	2146      	movs	r1, #70	; 0x46
     a0c:	480e      	ldr	r0, [pc, #56]	; (a48 <FT8_init+0x150>)
     a0e:	47a8      	blx	r5

	DELAY_MS(2);	/* just to be safe */
     a10:	2002      	movs	r0, #2
     a12:	4b06      	ldr	r3, [pc, #24]	; (a2c <FT8_init+0x134>)
     a14:	4798      	blx	r3
	
	while(FT8_busy() == 1);
     a16:	4b27      	ldr	r3, [pc, #156]	; (ab4 <FT8_init+0x1bc>)
     a18:	4798      	blx	r3
     a1a:	2801      	cmp	r0, #1
     a1c:	d0fb      	beq.n	a16 <FT8_init+0x11e>
	FT8_get_cmdoffset();
     a1e:	4b26      	ldr	r3, [pc, #152]	; (ab8 <FT8_init+0x1c0>)
     a20:	4798      	blx	r3
	return 1;
     a22:	2001      	movs	r0, #1
}
     a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	00000ad5 	.word	0x00000ad5
     a2c:	00001059 	.word	0x00001059
     a30:	00000ad7 	.word	0x00000ad7
     a34:	0000019d 	.word	0x0000019d
     a38:	00302000 	.word	0x00302000
     a3c:	000001c5 	.word	0x000001c5
     a40:	00302070 	.word	0x00302070
     a44:	0000024d 	.word	0x0000024d
     a48:	003020d4 	.word	0x003020d4
     a4c:	00302034 	.word	0x00302034
     a50:	00000289 	.word	0x00000289
     a54:	0030202c 	.word	0x0030202c
     a58:	00302030 	.word	0x00302030
     a5c:	00302038 	.word	0x00302038
     a60:	0030203c 	.word	0x0030203c
     a64:	00302048 	.word	0x00302048
     a68:	0000020d 	.word	0x0000020d
     a6c:	00302040 	.word	0x00302040
     a70:	00302044 	.word	0x00302044
     a74:	0030204c 	.word	0x0030204c
     a78:	00302050 	.word	0x00302050
     a7c:	00302064 	.word	0x00302064
     a80:	0030206c 	.word	0x0030206c
     a84:	00302104 	.word	0x00302104
     a88:	00302118 	.word	0x00302118
     a8c:	00302080 	.word	0x00302080
     a90:	00302084 	.word	0x00302084
     a94:	00302088 	.word	0x00302088
     a98:	000002c9 	.word	0x000002c9
     a9c:	26000007 	.word	0x26000007
     aa0:	00300004 	.word	0x00300004
     aa4:	00300008 	.word	0x00300008
     aa8:	00302054 	.word	0x00302054
     aac:	00302090 	.word	0x00302090
     ab0:	00302094 	.word	0x00302094
     ab4:	00000315 	.word	0x00000315
     ab8:	00000381 	.word	0x00000381

00000abc <FT8_cs_set>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     abc:	2280      	movs	r2, #128	; 0x80
     abe:	0292      	lsls	r2, r2, #10
     ac0:	23c0      	movs	r3, #192	; 0xc0
     ac2:	05db      	lsls	r3, r3, #23
     ac4:	615a      	str	r2, [r3, #20]

void FT8_cs_set(void)
{
	//SPI.setDataMode(SPI_MODE0);
	gpio_set_pin_level(CS,false); //digitalWrite(FT8_CS, LOW)
}
     ac6:	4770      	bx	lr

00000ac8 <FT8_cs_clear>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ac8:	2280      	movs	r2, #128	; 0x80
     aca:	0292      	lsls	r2, r2, #10
     acc:	23c0      	movs	r3, #192	; 0xc0
     ace:	05db      	lsls	r3, r3, #23
     ad0:	619a      	str	r2, [r3, #24]


void FT8_cs_clear(void)
{
	gpio_set_pin_level(CS,true); //digitalWrite(FT8_CS, HIGH);
}
     ad2:	4770      	bx	lr

00000ad4 <FT8_pdn_set>:

void FT8_pdn_set(void)
{
	//digitalWrite(FT8_PDN, LOW);	/* Power-Down low */
	//not using power down
}
     ad4:	4770      	bx	lr

00000ad6 <FT8_pdn_clear>:

void FT8_pdn_clear(void)
{
	//digitalWrite(FT8_PDN, HIGH);	/* Power-Down high */
	//not using power down
}
     ad6:	4770      	bx	lr

00000ad8 <spi_transmit>:

void spi_transmit(uint8_t data)
{
     ad8:	b500      	push	{lr}
     ada:	b083      	sub	sp, #12
     adc:	466b      	mov	r3, sp
     ade:	1dd9      	adds	r1, r3, #7
     ae0:	7008      	strb	r0, [r1, #0]
	
	io_write(io, &data,1);	//SPI.transfer(data);
     ae2:	4b03      	ldr	r3, [pc, #12]	; (af0 <spi_transmit+0x18>)
     ae4:	6818      	ldr	r0, [r3, #0]
     ae6:	2201      	movs	r2, #1
     ae8:	4b02      	ldr	r3, [pc, #8]	; (af4 <spi_transmit+0x1c>)
     aea:	4798      	blx	r3
}
     aec:	b003      	add	sp, #12
     aee:	bd00      	pop	{pc}
     af0:	20000198 	.word	0x20000198
     af4:	00001079 	.word	0x00001079

00000af8 <spi_receive>:


uint8_t spi_receive(uint8_t data)
{
     af8:	b510      	push	{r4, lr}
     afa:	b082      	sub	sp, #8
     afc:	466b      	mov	r3, sp
     afe:	1ddc      	adds	r4, r3, #7
     b00:	71d8      	strb	r0, [r3, #7]
	io_read(io, &data,1);		//SPI.transfer(data);
     b02:	4b04      	ldr	r3, [pc, #16]	; (b14 <spi_receive+0x1c>)
     b04:	6818      	ldr	r0, [r3, #0]
     b06:	2201      	movs	r2, #1
     b08:	0021      	movs	r1, r4
     b0a:	4b03      	ldr	r3, [pc, #12]	; (b18 <spi_receive+0x20>)
     b0c:	4798      	blx	r3
	return data;
     b0e:	7820      	ldrb	r0, [r4, #0]
}
     b10:	b002      	add	sp, #8
     b12:	bd10      	pop	{r4, pc}
     b14:	20000198 	.word	0x20000198
     b18:	000010b1 	.word	0x000010b1

00000b1c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     b1c:	b510      	push	{r4, lr}
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     b1e:	4a07      	ldr	r2, [pc, #28]	; (b3c <TIMER_0_init+0x20>)
     b20:	6951      	ldr	r1, [r2, #20]
     b22:	2380      	movs	r3, #128	; 0x80
     b24:	009b      	lsls	r3, r3, #2
     b26:	430b      	orrs	r3, r1
     b28:	6153      	str	r3, [r2, #20]
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     b2a:	4b05      	ldr	r3, [pc, #20]	; (b40 <TIMER_0_init+0x24>)
     b2c:	4798      	blx	r3
     b2e:	0002      	movs	r2, r0
     b30:	4904      	ldr	r1, [pc, #16]	; (b44 <TIMER_0_init+0x28>)
     b32:	4805      	ldr	r0, [pc, #20]	; (b48 <TIMER_0_init+0x2c>)
     b34:	4b05      	ldr	r3, [pc, #20]	; (b4c <TIMER_0_init+0x30>)
     b36:	4798      	blx	r3
}
     b38:	bd10      	pop	{r4, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	40000800 	.word	0x40000800
     b40:	00001e0f 	.word	0x00001e0f
     b44:	40002400 	.word	0x40002400
     b48:	200001e8 	.word	0x200001e8
     b4c:	00001315 	.word	0x00001315

00000b50 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     b50:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b52:	2382      	movs	r3, #130	; 0x82
     b54:	05db      	lsls	r3, r3, #23
     b56:	2244      	movs	r2, #68	; 0x44
     b58:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b5a:	2501      	movs	r5, #1
     b5c:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b5e:	2401      	movs	r4, #1
     b60:	4321      	orrs	r1, r4
     b62:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b64:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b66:	2032      	movs	r0, #50	; 0x32
     b68:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b6a:	3a35      	subs	r2, #53	; 0x35
     b6c:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     b6e:	2203      	movs	r2, #3
     b70:	4311      	orrs	r1, r2
     b72:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b74:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b76:	2145      	movs	r1, #69	; 0x45
     b78:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b7a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b7c:	4322      	orrs	r2, r4
     b7e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b80:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b82:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b84:	3936      	subs	r1, #54	; 0x36
     b86:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     b88:	2130      	movs	r1, #48	; 0x30
     b8a:	430a      	orrs	r2, r1
     b8c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b8e:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
}
     b90:	bd30      	pop	{r4, r5, pc}
	...

00000b94 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     b94:	4b06      	ldr	r3, [pc, #24]	; (bb0 <TARGET_IO_CLOCK_init+0x1c>)
     b96:	2141      	movs	r1, #65	; 0x41
     b98:	22cc      	movs	r2, #204	; 0xcc
     b9a:	5099      	str	r1, [r3, r2]
     b9c:	3102      	adds	r1, #2
     b9e:	3a04      	subs	r2, #4
     ba0:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     ba2:	4a04      	ldr	r2, [pc, #16]	; (bb4 <TARGET_IO_CLOCK_init+0x20>)
     ba4:	69d3      	ldr	r3, [r2, #28]
     ba6:	3941      	subs	r1, #65	; 0x41
     ba8:	430b      	orrs	r3, r1
     baa:	61d3      	str	r3, [r2, #28]
void TARGET_IO_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
}
     bac:	4770      	bx	lr
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	40001c00 	.word	0x40001c00
     bb4:	40000800 	.word	0x40000800

00000bb8 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     bb8:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     bba:	4b05      	ldr	r3, [pc, #20]	; (bd0 <TARGET_IO_init+0x18>)
     bbc:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM0, (void *)NULL);
     bbe:	2200      	movs	r2, #0
     bc0:	4904      	ldr	r1, [pc, #16]	; (bd4 <TARGET_IO_init+0x1c>)
     bc2:	4805      	ldr	r0, [pc, #20]	; (bd8 <TARGET_IO_init+0x20>)
     bc4:	4b05      	ldr	r3, [pc, #20]	; (bdc <TARGET_IO_init+0x24>)
     bc6:	4798      	blx	r3
	TARGET_IO_PORT_init();
     bc8:	4b05      	ldr	r3, [pc, #20]	; (be0 <TARGET_IO_init+0x28>)
     bca:	4798      	blx	r3
}
     bcc:	bd10      	pop	{r4, pc}
     bce:	46c0      	nop			; (mov r8, r8)
     bd0:	00000b95 	.word	0x00000b95
     bd4:	42000400 	.word	0x42000400
     bd8:	200001dc 	.word	0x200001dc
     bdc:	00001525 	.word	0x00001525
     be0:	00000b51 	.word	0x00000b51

00000be4 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     be4:	b5f0      	push	{r4, r5, r6, r7, lr}
     be6:	46ce      	mov	lr, r9
     be8:	4647      	mov	r7, r8
     bea:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bec:	24c0      	movs	r4, #192	; 0xc0
     bee:	05e4      	lsls	r4, r4, #23
     bf0:	2380      	movs	r3, #128	; 0x80
     bf2:	025b      	lsls	r3, r3, #9
     bf4:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bf6:	60a3      	str	r3, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bf8:	2382      	movs	r3, #130	; 0x82
     bfa:	05db      	lsls	r3, r3, #23
     bfc:	2280      	movs	r2, #128	; 0x80
     bfe:	05d2      	lsls	r2, r2, #23
     c00:	4691      	mov	r9, r2
     c02:	629a      	str	r2, [r3, #40]	; 0x28
     c04:	4921      	ldr	r1, [pc, #132]	; (c8c <SPI_0_PORT_init+0xa8>)
     c06:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c08:	2050      	movs	r0, #80	; 0x50
     c0a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c0c:	2601      	movs	r6, #1
     c0e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c10:	2501      	movs	r5, #1
     c12:	4329      	orrs	r1, r5
     c14:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c16:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c18:	3818      	subs	r0, #24
     c1a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c1c:	270f      	movs	r7, #15
     c1e:	46bc      	mov	ip, r7
     c20:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     c22:	2702      	movs	r7, #2
     c24:	4339      	orrs	r1, r7
     c26:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c28:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c2a:	2180      	movs	r1, #128	; 0x80
     c2c:	02c9      	lsls	r1, r1, #11
     c2e:	6061      	str	r1, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c30:	4917      	ldr	r1, [pc, #92]	; (c90 <SPI_0_PORT_init+0xac>)
     c32:	6299      	str	r1, [r3, #40]	; 0x28
     c34:	4917      	ldr	r1, [pc, #92]	; (c94 <SPI_0_PORT_init+0xb0>)
     c36:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c38:	2152      	movs	r1, #82	; 0x52
     c3a:	5c58      	ldrb	r0, [r3, r1]
     c3c:	2204      	movs	r2, #4
     c3e:	4390      	bics	r0, r2
     c40:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c42:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c44:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c46:	4328      	orrs	r0, r5
     c48:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c4a:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c4c:	2039      	movs	r0, #57	; 0x39
     c4e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c50:	4662      	mov	r2, ip
     c52:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     c54:	4339      	orrs	r1, r7
     c56:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c58:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c5a:	2180      	movs	r1, #128	; 0x80
     c5c:	0309      	lsls	r1, r1, #12
     c5e:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c60:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c62:	464a      	mov	r2, r9
     c64:	629a      	str	r2, [r3, #40]	; 0x28
     c66:	4a0c      	ldr	r2, [pc, #48]	; (c98 <SPI_0_PORT_init+0xb4>)
     c68:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c6a:	2153      	movs	r1, #83	; 0x53
     c6c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c6e:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c70:	432a      	orrs	r2, r5
     c72:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c74:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c76:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c78:	3944      	subs	r1, #68	; 0x44
     c7a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     c7c:	2120      	movs	r1, #32
     c7e:	430a      	orrs	r2, r1
     c80:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c82:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA19, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA19, PINMUX_PA19C_SERCOM1_PAD3);
}
     c84:	bc0c      	pop	{r2, r3}
     c86:	4690      	mov	r8, r2
     c88:	4699      	mov	r9, r3
     c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c8c:	c0000001 	.word	0xc0000001
     c90:	40020000 	.word	0x40020000
     c94:	c0020004 	.word	0xc0020004
     c98:	c0000008 	.word	0xc0000008

00000c9c <SPI_0_CLOCK_init>:
     c9c:	4b06      	ldr	r3, [pc, #24]	; (cb8 <SPI_0_CLOCK_init+0x1c>)
     c9e:	2142      	movs	r1, #66	; 0x42
     ca0:	22d0      	movs	r2, #208	; 0xd0
     ca2:	5099      	str	r1, [r3, r2]
     ca4:	3101      	adds	r1, #1
     ca6:	3a08      	subs	r2, #8
     ca8:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     caa:	4a04      	ldr	r2, [pc, #16]	; (cbc <SPI_0_CLOCK_init+0x20>)
     cac:	69d3      	ldr	r3, [r2, #28]
     cae:	393f      	subs	r1, #63	; 0x3f
     cb0:	430b      	orrs	r3, r1
     cb2:	61d3      	str	r3, [r2, #28]
void SPI_0_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
}
     cb4:	4770      	bx	lr
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	40001c00 	.word	0x40001c00
     cbc:	40000800 	.word	0x40000800

00000cc0 <SPI_0_init>:

void SPI_0_init(void)
{
     cc0:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     cc2:	4b04      	ldr	r3, [pc, #16]	; (cd4 <SPI_0_init+0x14>)
     cc4:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM1);
     cc6:	4904      	ldr	r1, [pc, #16]	; (cd8 <SPI_0_init+0x18>)
     cc8:	4804      	ldr	r0, [pc, #16]	; (cdc <SPI_0_init+0x1c>)
     cca:	4b05      	ldr	r3, [pc, #20]	; (ce0 <SPI_0_init+0x20>)
     ccc:	4798      	blx	r3
	SPI_0_PORT_init();
     cce:	4b05      	ldr	r3, [pc, #20]	; (ce4 <SPI_0_init+0x24>)
     cd0:	4798      	blx	r3
}
     cd2:	bd10      	pop	{r4, pc}
     cd4:	00000c9d 	.word	0x00000c9d
     cd8:	42000800 	.word	0x42000800
     cdc:	2000019c 	.word	0x2000019c
     ce0:	000010e9 	.word	0x000010e9
     ce4:	00000be5 	.word	0x00000be5

00000ce8 <delay_driver_init>:

void delay_driver_init(void)
{
     ce8:	b510      	push	{r4, lr}
	delay_init(SysTick);
     cea:	4802      	ldr	r0, [pc, #8]	; (cf4 <delay_driver_init+0xc>)
     cec:	4b02      	ldr	r3, [pc, #8]	; (cf8 <delay_driver_init+0x10>)
     cee:	4798      	blx	r3
}
     cf0:	bd10      	pop	{r4, pc}
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	e000e010 	.word	0xe000e010
     cf8:	00001045 	.word	0x00001045

00000cfc <CAN_0_PORT_init>:

void CAN_0_PORT_init(void)
{
     cfc:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cfe:	2382      	movs	r3, #130	; 0x82
     d00:	05db      	lsls	r3, r3, #23
     d02:	2259      	movs	r2, #89	; 0x59
     d04:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d06:	2501      	movs	r5, #1
     d08:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d0a:	2401      	movs	r4, #1
     d0c:	4321      	orrs	r1, r4
     d0e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d10:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d12:	203c      	movs	r0, #60	; 0x3c
     d14:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d16:	3a4a      	subs	r2, #74	; 0x4a
     d18:	4011      	ands	r1, r2
	tmp |= PORT_PMUX_PMUXO(data);
     d1a:	2260      	movs	r2, #96	; 0x60
     d1c:	4311      	orrs	r1, r2
     d1e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d20:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d22:	2158      	movs	r1, #88	; 0x58
     d24:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d26:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d28:	4322      	orrs	r2, r4
     d2a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d2c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d2e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d30:	3949      	subs	r1, #73	; 0x49
     d32:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
     d34:	2106      	movs	r1, #6
     d36:	430a      	orrs	r2, r1
     d38:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d3a:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA25, PINMUX_PA25G_CAN0_RX);

	gpio_set_pin_function(PA24, PINMUX_PA24G_CAN0_TX);
}
     d3c:	bd30      	pop	{r4, r5, pc}
	...

00000d40 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
     d40:	b510      	push	{r4, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN0;
     d42:	4a08      	ldr	r2, [pc, #32]	; (d64 <CAN_0_init+0x24>)
     d44:	6911      	ldr	r1, [r2, #16]
     d46:	2380      	movs	r3, #128	; 0x80
     d48:	005b      	lsls	r3, r3, #1
     d4a:	430b      	orrs	r3, r1
     d4c:	6113      	str	r3, [r2, #16]
     d4e:	2141      	movs	r1, #65	; 0x41
     d50:	23e8      	movs	r3, #232	; 0xe8
     d52:	4a05      	ldr	r2, [pc, #20]	; (d68 <CAN_0_init+0x28>)
     d54:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_AHBMASK_CAN0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN0_GCLK_ID, CONF_GCLK_CAN0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_0, CAN0);
     d56:	4905      	ldr	r1, [pc, #20]	; (d6c <CAN_0_init+0x2c>)
     d58:	4805      	ldr	r0, [pc, #20]	; (d70 <CAN_0_init+0x30>)
     d5a:	4b06      	ldr	r3, [pc, #24]	; (d74 <CAN_0_init+0x34>)
     d5c:	4798      	blx	r3
	CAN_0_PORT_init();
     d5e:	4b06      	ldr	r3, [pc, #24]	; (d78 <CAN_0_init+0x38>)
     d60:	4798      	blx	r3
}
     d62:	bd10      	pop	{r4, pc}
     d64:	40000800 	.word	0x40000800
     d68:	40001c00 	.word	0x40001c00
     d6c:	42001c00 	.word	0x42001c00
     d70:	200001b4 	.word	0x200001b4
     d74:	00000ed5 	.word	0x00000ed5
     d78:	00000cfd 	.word	0x00000cfd

00000d7c <system_init>:

void system_init(void)
{
     d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d7e:	46de      	mov	lr, fp
     d80:	4657      	mov	r7, sl
     d82:	464e      	mov	r6, r9
     d84:	4645      	mov	r5, r8
     d86:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     d88:	4b36      	ldr	r3, [pc, #216]	; (e64 <system_init+0xe8>)
     d8a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d8c:	22c0      	movs	r2, #192	; 0xc0
     d8e:	05d2      	lsls	r2, r2, #23
     d90:	2380      	movs	r3, #128	; 0x80
     d92:	021b      	lsls	r3, r3, #8
     d94:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d96:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d98:	2382      	movs	r3, #130	; 0x82
     d9a:	05db      	lsls	r3, r3, #23
     d9c:	4932      	ldr	r1, [pc, #200]	; (e68 <system_init+0xec>)
     d9e:	6299      	str	r1, [r3, #40]	; 0x28
     da0:	21c0      	movs	r1, #192	; 0xc0
     da2:	0609      	lsls	r1, r1, #24
     da4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     da6:	244f      	movs	r4, #79	; 0x4f
     da8:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     daa:	2101      	movs	r1, #1
     dac:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dae:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     db0:	2080      	movs	r0, #128	; 0x80
     db2:	0280      	lsls	r0, r0, #10
     db4:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     db6:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db8:	2480      	movs	r4, #128	; 0x80
     dba:	05e4      	lsls	r4, r4, #23
     dbc:	629c      	str	r4, [r3, #40]	; 0x28
     dbe:	482b      	ldr	r0, [pc, #172]	; (e6c <system_init+0xf0>)
     dc0:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dc2:	2551      	movs	r5, #81	; 0x51
     dc4:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     dc6:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dc8:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dca:	2080      	movs	r0, #128	; 0x80
     dcc:	0380      	lsls	r0, r0, #14
     dce:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dd0:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dd2:	629c      	str	r4, [r3, #40]	; 0x28
     dd4:	4826      	ldr	r0, [pc, #152]	; (e70 <system_init+0xf4>)
     dd6:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dd8:	2455      	movs	r4, #85	; 0x55
     dda:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ddc:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dde:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     de0:	2684      	movs	r6, #132	; 0x84
     de2:	2080      	movs	r0, #128	; 0x80
     de4:	0140      	lsls	r0, r0, #5
     de6:	4684      	mov	ip, r0
     de8:	5190      	str	r0, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dea:	27a8      	movs	r7, #168	; 0xa8
     dec:	4821      	ldr	r0, [pc, #132]	; (e74 <system_init+0xf8>)
     dee:	51d8      	str	r0, [r3, r7]
     df0:	4821      	ldr	r0, [pc, #132]	; (e78 <system_init+0xfc>)
     df2:	4683      	mov	fp, r0
     df4:	51d8      	str	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     df6:	4660      	mov	r0, ip
     df8:	5190      	str	r0, [r2, r6]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     dfa:	357b      	adds	r5, #123	; 0x7b
     dfc:	5d5c      	ldrb	r4, [r3, r5]
     dfe:	2004      	movs	r0, #4
     e00:	4681      	mov	r9, r0
     e02:	4648      	mov	r0, r9
     e04:	4304      	orrs	r4, r0
     e06:	b2e4      	uxtb	r4, r4
     e08:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e0a:	2094      	movs	r0, #148	; 0x94
     e0c:	4680      	mov	r8, r0
     e0e:	4664      	mov	r4, ip
     e10:	5014      	str	r4, [r2, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e12:	24c5      	movs	r4, #197	; 0xc5
     e14:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e16:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e18:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e1a:	2020      	movs	r0, #32
     e1c:	4684      	mov	ip, r0
     e1e:	5190      	str	r0, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e20:	4816      	ldr	r0, [pc, #88]	; (e7c <system_init+0x100>)
     e22:	51d8      	str	r0, [r3, r7]
     e24:	4658      	mov	r0, fp
     e26:	51d8      	str	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e28:	4660      	mov	r0, ip
     e2a:	5190      	str	r0, [r2, r6]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     e2c:	5d18      	ldrb	r0, [r3, r4]
     e2e:	464e      	mov	r6, r9
     e30:	4330      	orrs	r0, r6
     e32:	b2c0      	uxtb	r0, r0
     e34:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e36:	4640      	mov	r0, r8
     e38:	4664      	mov	r4, ip
     e3a:	5014      	str	r4, [r2, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e3c:	5d5a      	ldrb	r2, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e3e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e40:	555a      	strb	r2, [r3, r5]
	// <GPIO_PULL_DOWN"> Pull-down
	GPIO_PULL_DOWN);

	gpio_set_pin_function(RTD_SWITCH, GPIO_PIN_FUNCTION_OFF);

	TIMER_0_init();
     e42:	4b0f      	ldr	r3, [pc, #60]	; (e80 <system_init+0x104>)
     e44:	4798      	blx	r3

	TARGET_IO_init();
     e46:	4b0f      	ldr	r3, [pc, #60]	; (e84 <system_init+0x108>)
     e48:	4798      	blx	r3

	SPI_0_init();
     e4a:	4b0f      	ldr	r3, [pc, #60]	; (e88 <system_init+0x10c>)
     e4c:	4798      	blx	r3

	delay_driver_init();
     e4e:	4b0f      	ldr	r3, [pc, #60]	; (e8c <system_init+0x110>)
     e50:	4798      	blx	r3
	CAN_0_init();
     e52:	4b0f      	ldr	r3, [pc, #60]	; (e90 <system_init+0x114>)
     e54:	4798      	blx	r3
}
     e56:	bc3c      	pop	{r2, r3, r4, r5}
     e58:	4690      	mov	r8, r2
     e5a:	4699      	mov	r9, r3
     e5c:	46a2      	mov	sl, r4
     e5e:	46ab      	mov	fp, r5
     e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e62:	46c0      	nop			; (mov r8, r8)
     e64:	00001acd 	.word	0x00001acd
     e68:	40008000 	.word	0x40008000
     e6c:	c0000002 	.word	0xc0000002
     e70:	c0000020 	.word	0xc0000020
     e74:	40021000 	.word	0x40021000
     e78:	c0020000 	.word	0xc0020000
     e7c:	40020020 	.word	0x40020020
     e80:	00000b1d 	.word	0x00000b1d
     e84:	00000bb9 	.word	0x00000bb9
     e88:	00000cc1 	.word	0x00000cc1
     e8c:	00000ce9 	.word	0x00000ce9
     e90:	00000d41 	.word	0x00000d41

00000e94 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e94:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     e98:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     e9a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e9c:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     ea0:	4770      	bx	lr

00000ea2 <atomic_leave_critical>:
     ea2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     ea6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     ea8:	f383 8810 	msr	PRIMASK, r3
}
     eac:	4770      	bx	lr

00000eae <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     eae:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     eb0:	69c3      	ldr	r3, [r0, #28]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d000      	beq.n	eb8 <can_tx_done+0xa>
		descr->cb.tx_done(descr);
     eb6:	4798      	blx	r3
	}
}
     eb8:	bd10      	pop	{r4, pc}

00000eba <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     eba:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     ebc:	6a03      	ldr	r3, [r0, #32]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d000      	beq.n	ec4 <can_rx_done+0xa>
		descr->cb.rx_done(descr);
     ec2:	4798      	blx	r3
	}
}
     ec4:	bd10      	pop	{r4, pc}

00000ec6 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     ec6:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     ec8:	6a43      	ldr	r3, [r0, #36]	; 0x24
     eca:	2b00      	cmp	r3, #0
     ecc:	d000      	beq.n	ed0 <can_irq_handler+0xa>
		descr->cb.irq_handler(descr, type);
     ece:	4798      	blx	r3
	}
}
     ed0:	bd10      	pop	{r4, pc}
	...

00000ed4 <can_async_init>:
{
     ed4:	b570      	push	{r4, r5, r6, lr}
     ed6:	0004      	movs	r4, r0
     ed8:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     eda:	2800      	cmp	r0, #0
     edc:	d015      	beq.n	f0a <can_async_init+0x36>
     ede:	2900      	cmp	r1, #0
     ee0:	d011      	beq.n	f06 <can_async_init+0x32>
     ee2:	2001      	movs	r0, #1
     ee4:	2241      	movs	r2, #65	; 0x41
     ee6:	490a      	ldr	r1, [pc, #40]	; (f10 <can_async_init+0x3c>)
     ee8:	4b0a      	ldr	r3, [pc, #40]	; (f14 <can_async_init+0x40>)
     eea:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     eec:	0029      	movs	r1, r5
     eee:	0020      	movs	r0, r4
     ef0:	4b09      	ldr	r3, [pc, #36]	; (f18 <can_async_init+0x44>)
     ef2:	4798      	blx	r3
	if (rc) {
     ef4:	2800      	cmp	r0, #0
     ef6:	d105      	bne.n	f04 <can_async_init+0x30>
	descr->dev.cb.tx_done     = can_tx_done;
     ef8:	4b08      	ldr	r3, [pc, #32]	; (f1c <can_async_init+0x48>)
     efa:	6063      	str	r3, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     efc:	4b08      	ldr	r3, [pc, #32]	; (f20 <can_async_init+0x4c>)
     efe:	60a3      	str	r3, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     f00:	4b08      	ldr	r3, [pc, #32]	; (f24 <can_async_init+0x50>)
     f02:	60e3      	str	r3, [r4, #12]
}
     f04:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     f06:	2000      	movs	r0, #0
     f08:	e7ec      	b.n	ee4 <can_async_init+0x10>
     f0a:	2000      	movs	r0, #0
     f0c:	e7ea      	b.n	ee4 <can_async_init+0x10>
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	00005c6c 	.word	0x00005c6c
     f14:	0000159d 	.word	0x0000159d
     f18:	0000163d 	.word	0x0000163d
     f1c:	00000eaf 	.word	0x00000eaf
     f20:	00000ebb 	.word	0x00000ebb
     f24:	00000ec7 	.word	0x00000ec7

00000f28 <can_async_enable>:
{
     f28:	b510      	push	{r4, lr}
     f2a:	0004      	movs	r4, r0
	ASSERT(descr);
     f2c:	1e43      	subs	r3, r0, #1
     f2e:	4198      	sbcs	r0, r3
     f30:	b2c0      	uxtb	r0, r0
     f32:	225c      	movs	r2, #92	; 0x5c
     f34:	4903      	ldr	r1, [pc, #12]	; (f44 <can_async_enable+0x1c>)
     f36:	4b04      	ldr	r3, [pc, #16]	; (f48 <can_async_enable+0x20>)
     f38:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
     f3a:	0020      	movs	r0, r4
     f3c:	4b03      	ldr	r3, [pc, #12]	; (f4c <can_async_enable+0x24>)
     f3e:	4798      	blx	r3
}
     f40:	bd10      	pop	{r4, pc}
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	00005c6c 	.word	0x00005c6c
     f48:	0000159d 	.word	0x0000159d
     f4c:	0000174d 	.word	0x0000174d

00000f50 <can_async_read>:
{
     f50:	b570      	push	{r4, r5, r6, lr}
     f52:	0004      	movs	r4, r0
     f54:	000d      	movs	r5, r1
	ASSERT(descr && msg);
     f56:	2800      	cmp	r0, #0
     f58:	d00d      	beq.n	f76 <can_async_read+0x26>
     f5a:	2900      	cmp	r1, #0
     f5c:	d009      	beq.n	f72 <can_async_read+0x22>
     f5e:	2001      	movs	r0, #1
     f60:	226e      	movs	r2, #110	; 0x6e
     f62:	4906      	ldr	r1, [pc, #24]	; (f7c <can_async_read+0x2c>)
     f64:	4b06      	ldr	r3, [pc, #24]	; (f80 <can_async_read+0x30>)
     f66:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
     f68:	0029      	movs	r1, r5
     f6a:	0020      	movs	r0, r4
     f6c:	4b05      	ldr	r3, [pc, #20]	; (f84 <can_async_read+0x34>)
     f6e:	4798      	blx	r3
}
     f70:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && msg);
     f72:	2000      	movs	r0, #0
     f74:	e7f4      	b.n	f60 <can_async_read+0x10>
     f76:	2000      	movs	r0, #0
     f78:	e7f2      	b.n	f60 <can_async_read+0x10>
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	00005c6c 	.word	0x00005c6c
     f80:	0000159d 	.word	0x0000159d
     f84:	0000175d 	.word	0x0000175d

00000f88 <can_async_write>:
{
     f88:	b570      	push	{r4, r5, r6, lr}
     f8a:	0004      	movs	r4, r0
     f8c:	000d      	movs	r5, r1
	ASSERT(descr && msg);
     f8e:	2800      	cmp	r0, #0
     f90:	d00d      	beq.n	fae <can_async_write+0x26>
     f92:	2900      	cmp	r1, #0
     f94:	d009      	beq.n	faa <can_async_write+0x22>
     f96:	2001      	movs	r0, #1
     f98:	2277      	movs	r2, #119	; 0x77
     f9a:	4906      	ldr	r1, [pc, #24]	; (fb4 <can_async_write+0x2c>)
     f9c:	4b06      	ldr	r3, [pc, #24]	; (fb8 <can_async_write+0x30>)
     f9e:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
     fa0:	0029      	movs	r1, r5
     fa2:	0020      	movs	r0, r4
     fa4:	4b05      	ldr	r3, [pc, #20]	; (fbc <can_async_write+0x34>)
     fa6:	4798      	blx	r3
}
     fa8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && msg);
     faa:	2000      	movs	r0, #0
     fac:	e7f4      	b.n	f98 <can_async_write+0x10>
     fae:	2000      	movs	r0, #0
     fb0:	e7f2      	b.n	f98 <can_async_write+0x10>
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	00005c6c 	.word	0x00005c6c
     fb8:	0000159d 	.word	0x0000159d
     fbc:	0000181d 	.word	0x0000181d

00000fc0 <can_async_register_callback>:
{
     fc0:	b570      	push	{r4, r5, r6, lr}
     fc2:	0006      	movs	r6, r0
     fc4:	000d      	movs	r5, r1
     fc6:	0014      	movs	r4, r2
	ASSERT(descr);
     fc8:	1e43      	subs	r3, r0, #1
     fca:	4198      	sbcs	r0, r3
     fcc:	b2c0      	uxtb	r0, r0
     fce:	2281      	movs	r2, #129	; 0x81
     fd0:	490c      	ldr	r1, [pc, #48]	; (1004 <can_async_register_callback+0x44>)
     fd2:	4b0d      	ldr	r3, [pc, #52]	; (1008 <can_async_register_callback+0x48>)
     fd4:	4798      	blx	r3
	switch (type) {
     fd6:	2d01      	cmp	r5, #1
     fd8:	d010      	beq.n	ffc <can_async_register_callback+0x3c>
     fda:	2d00      	cmp	r5, #0
     fdc:	d004      	beq.n	fe8 <can_async_register_callback+0x28>
     fde:	2d02      	cmp	r5, #2
     fe0:	d00e      	beq.n	1000 <can_async_register_callback+0x40>
		return ERR_INVALID_ARG;
     fe2:	200d      	movs	r0, #13
     fe4:	4240      	negs	r0, r0
     fe6:	e008      	b.n	ffa <can_async_register_callback+0x3a>
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     fe8:	6234      	str	r4, [r6, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
     fea:	1e62      	subs	r2, r4, #1
     fec:	4194      	sbcs	r4, r2
     fee:	b2e2      	uxtb	r2, r4
     ff0:	0029      	movs	r1, r5
     ff2:	0030      	movs	r0, r6
     ff4:	4b05      	ldr	r3, [pc, #20]	; (100c <can_async_register_callback+0x4c>)
     ff6:	4798      	blx	r3
	return ERR_NONE;
     ff8:	2000      	movs	r0, #0
}
     ffa:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     ffc:	61f4      	str	r4, [r6, #28]
		break;
     ffe:	e7f4      	b.n	fea <can_async_register_callback+0x2a>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    1000:	6274      	str	r4, [r6, #36]	; 0x24
		break;
    1002:	e7f2      	b.n	fea <can_async_register_callback+0x2a>
    1004:	00005c6c 	.word	0x00005c6c
    1008:	0000159d 	.word	0x0000159d
    100c:	00001979 	.word	0x00001979

00001010 <can_async_set_filter>:
{
    1010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1012:	0004      	movs	r4, r0
    1014:	000d      	movs	r5, r1
    1016:	0016      	movs	r6, r2
    1018:	001f      	movs	r7, r3
	ASSERT(descr);
    101a:	1e43      	subs	r3, r0, #1
    101c:	4198      	sbcs	r0, r3
    101e:	b2c0      	uxtb	r0, r0
    1020:	22b8      	movs	r2, #184	; 0xb8
    1022:	4905      	ldr	r1, [pc, #20]	; (1038 <can_async_set_filter+0x28>)
    1024:	4b05      	ldr	r3, [pc, #20]	; (103c <can_async_set_filter+0x2c>)
    1026:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    1028:	003b      	movs	r3, r7
    102a:	0032      	movs	r2, r6
    102c:	0029      	movs	r1, r5
    102e:	0020      	movs	r0, r4
    1030:	4c03      	ldr	r4, [pc, #12]	; (1040 <can_async_set_filter+0x30>)
    1032:	47a0      	blx	r4
}
    1034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	00005c6c 	.word	0x00005c6c
    103c:	0000159d 	.word	0x0000159d
    1040:	000019c5 	.word	0x000019c5

00001044 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1044:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    1046:	4b02      	ldr	r3, [pc, #8]	; (1050 <delay_init+0xc>)
    1048:	6018      	str	r0, [r3, #0]
    104a:	4b02      	ldr	r3, [pc, #8]	; (1054 <delay_init+0x10>)
    104c:	4798      	blx	r3
}
    104e:	bd10      	pop	{r4, pc}
    1050:	200000a8 	.word	0x200000a8
    1054:	00002355 	.word	0x00002355

00001058 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1058:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    105a:	4b04      	ldr	r3, [pc, #16]	; (106c <delay_ms+0x14>)
    105c:	681c      	ldr	r4, [r3, #0]
    105e:	4b04      	ldr	r3, [pc, #16]	; (1070 <delay_ms+0x18>)
    1060:	4798      	blx	r3
    1062:	0001      	movs	r1, r0
    1064:	0020      	movs	r0, r4
    1066:	4b03      	ldr	r3, [pc, #12]	; (1074 <delay_ms+0x1c>)
    1068:	4798      	blx	r3
}
    106a:	bd10      	pop	{r4, pc}
    106c:	200000a8 	.word	0x200000a8
    1070:	00001ac1 	.word	0x00001ac1
    1074:	00002361 	.word	0x00002361

00001078 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1078:	b570      	push	{r4, r5, r6, lr}
    107a:	0004      	movs	r4, r0
    107c:	000d      	movs	r5, r1
    107e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    1080:	2800      	cmp	r0, #0
    1082:	d00e      	beq.n	10a2 <io_write+0x2a>
    1084:	2900      	cmp	r1, #0
    1086:	d00a      	beq.n	109e <io_write+0x26>
    1088:	2001      	movs	r0, #1
    108a:	2234      	movs	r2, #52	; 0x34
    108c:	4906      	ldr	r1, [pc, #24]	; (10a8 <io_write+0x30>)
    108e:	4b07      	ldr	r3, [pc, #28]	; (10ac <io_write+0x34>)
    1090:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1092:	6823      	ldr	r3, [r4, #0]
    1094:	0032      	movs	r2, r6
    1096:	0029      	movs	r1, r5
    1098:	0020      	movs	r0, r4
    109a:	4798      	blx	r3
}
    109c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    109e:	2000      	movs	r0, #0
    10a0:	e7f3      	b.n	108a <io_write+0x12>
    10a2:	2000      	movs	r0, #0
    10a4:	e7f1      	b.n	108a <io_write+0x12>
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	00005c88 	.word	0x00005c88
    10ac:	0000159d 	.word	0x0000159d

000010b0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    10b0:	b570      	push	{r4, r5, r6, lr}
    10b2:	0004      	movs	r4, r0
    10b4:	000d      	movs	r5, r1
    10b6:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    10b8:	2800      	cmp	r0, #0
    10ba:	d00e      	beq.n	10da <io_read+0x2a>
    10bc:	2900      	cmp	r1, #0
    10be:	d00a      	beq.n	10d6 <io_read+0x26>
    10c0:	2001      	movs	r0, #1
    10c2:	223d      	movs	r2, #61	; 0x3d
    10c4:	4906      	ldr	r1, [pc, #24]	; (10e0 <io_read+0x30>)
    10c6:	4b07      	ldr	r3, [pc, #28]	; (10e4 <io_read+0x34>)
    10c8:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    10ca:	6863      	ldr	r3, [r4, #4]
    10cc:	0032      	movs	r2, r6
    10ce:	0029      	movs	r1, r5
    10d0:	0020      	movs	r0, r4
    10d2:	4798      	blx	r3
}
    10d4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    10d6:	2000      	movs	r0, #0
    10d8:	e7f3      	b.n	10c2 <io_read+0x12>
    10da:	2000      	movs	r0, #0
    10dc:	e7f1      	b.n	10c2 <io_read+0x12>
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	00005c88 	.word	0x00005c88
    10e4:	0000159d 	.word	0x0000159d

000010e8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    10e8:	b570      	push	{r4, r5, r6, lr}
    10ea:	0004      	movs	r4, r0
    10ec:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    10ee:	2800      	cmp	r0, #0
    10f0:	d017      	beq.n	1122 <spi_m_sync_init+0x3a>
    10f2:	2900      	cmp	r1, #0
    10f4:	d013      	beq.n	111e <spi_m_sync_init+0x36>
    10f6:	2001      	movs	r0, #1
    10f8:	2240      	movs	r2, #64	; 0x40
    10fa:	490b      	ldr	r1, [pc, #44]	; (1128 <spi_m_sync_init+0x40>)
    10fc:	4b0b      	ldr	r3, [pc, #44]	; (112c <spi_m_sync_init+0x44>)
    10fe:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1100:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1102:	1d20      	adds	r0, r4, #4
    1104:	0029      	movs	r1, r5
    1106:	4b0a      	ldr	r3, [pc, #40]	; (1130 <spi_m_sync_init+0x48>)
    1108:	4798      	blx	r3

	if (rc < 0) {
    110a:	2800      	cmp	r0, #0
    110c:	db06      	blt.n	111c <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    110e:	4b09      	ldr	r3, [pc, #36]	; (1134 <spi_m_sync_init+0x4c>)
    1110:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1112:	4b09      	ldr	r3, [pc, #36]	; (1138 <spi_m_sync_init+0x50>)
    1114:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1116:	4b09      	ldr	r3, [pc, #36]	; (113c <spi_m_sync_init+0x54>)
    1118:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    111a:	2000      	movs	r0, #0
}
    111c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    111e:	2000      	movs	r0, #0
    1120:	e7ea      	b.n	10f8 <spi_m_sync_init+0x10>
    1122:	2000      	movs	r0, #0
    1124:	e7e8      	b.n	10f8 <spi_m_sync_init+0x10>
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	00005c9c 	.word	0x00005c9c
    112c:	0000159d 	.word	0x0000159d
    1130:	00001ffd 	.word	0x00001ffd
    1134:	ffff8000 	.word	0xffff8000
    1138:	000011ed 	.word	0x000011ed
    113c:	000011b1 	.word	0x000011b1

00001140 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1140:	b510      	push	{r4, lr}
    1142:	0004      	movs	r4, r0
	ASSERT(spi);
    1144:	1e43      	subs	r3, r0, #1
    1146:	4198      	sbcs	r0, r3
    1148:	b2c0      	uxtb	r0, r0
    114a:	2257      	movs	r2, #87	; 0x57
    114c:	4903      	ldr	r1, [pc, #12]	; (115c <spi_m_sync_enable+0x1c>)
    114e:	4b04      	ldr	r3, [pc, #16]	; (1160 <spi_m_sync_enable+0x20>)
    1150:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    1152:	1d20      	adds	r0, r4, #4
    1154:	4b03      	ldr	r3, [pc, #12]	; (1164 <spi_m_sync_enable+0x24>)
    1156:	4798      	blx	r3
}
    1158:	bd10      	pop	{r4, pc}
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	00005c9c 	.word	0x00005c9c
    1160:	0000159d 	.word	0x0000159d
    1164:	000021f9 	.word	0x000021f9

00001168 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1168:	b530      	push	{r4, r5, lr}
    116a:	b087      	sub	sp, #28
    116c:	0004      	movs	r4, r0
    116e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1170:	2800      	cmp	r0, #0
    1172:	d015      	beq.n	11a0 <spi_m_sync_transfer+0x38>
    1174:	2900      	cmp	r1, #0
    1176:	d011      	beq.n	119c <spi_m_sync_transfer+0x34>
    1178:	2001      	movs	r0, #1
    117a:	22b3      	movs	r2, #179	; 0xb3
    117c:	4909      	ldr	r1, [pc, #36]	; (11a4 <spi_m_sync_transfer+0x3c>)
    117e:	4b0a      	ldr	r3, [pc, #40]	; (11a8 <spi_m_sync_transfer+0x40>)
    1180:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1182:	682b      	ldr	r3, [r5, #0]
    1184:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    1186:	686b      	ldr	r3, [r5, #4]
    1188:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    118a:	68ab      	ldr	r3, [r5, #8]
    118c:	9301      	str	r3, [sp, #4]
    118e:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1190:	1d20      	adds	r0, r4, #4
    1192:	a903      	add	r1, sp, #12
    1194:	4b05      	ldr	r3, [pc, #20]	; (11ac <spi_m_sync_transfer+0x44>)
    1196:	4798      	blx	r3
}
    1198:	b007      	add	sp, #28
    119a:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    119c:	2000      	movs	r0, #0
    119e:	e7ec      	b.n	117a <spi_m_sync_transfer+0x12>
    11a0:	2000      	movs	r0, #0
    11a2:	e7ea      	b.n	117a <spi_m_sync_transfer+0x12>
    11a4:	00005c9c 	.word	0x00005c9c
    11a8:	0000159d 	.word	0x0000159d
    11ac:	0000222d 	.word	0x0000222d

000011b0 <_spi_m_sync_io_write>:
{
    11b0:	b570      	push	{r4, r5, r6, lr}
    11b2:	b084      	sub	sp, #16
    11b4:	0004      	movs	r4, r0
    11b6:	000e      	movs	r6, r1
    11b8:	0015      	movs	r5, r2
	ASSERT(io);
    11ba:	1e43      	subs	r3, r0, #1
    11bc:	4198      	sbcs	r0, r3
    11be:	b2c0      	uxtb	r0, r0
    11c0:	22a3      	movs	r2, #163	; 0xa3
    11c2:	4907      	ldr	r1, [pc, #28]	; (11e0 <_spi_m_sync_io_write+0x30>)
    11c4:	4b07      	ldr	r3, [pc, #28]	; (11e4 <_spi_m_sync_io_write+0x34>)
    11c6:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    11c8:	0020      	movs	r0, r4
    11ca:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    11cc:	2300      	movs	r3, #0
    11ce:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    11d0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    11d2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    11d4:	a901      	add	r1, sp, #4
    11d6:	4b04      	ldr	r3, [pc, #16]	; (11e8 <_spi_m_sync_io_write+0x38>)
    11d8:	4798      	blx	r3
}
    11da:	b004      	add	sp, #16
    11dc:	bd70      	pop	{r4, r5, r6, pc}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	00005c9c 	.word	0x00005c9c
    11e4:	0000159d 	.word	0x0000159d
    11e8:	00001169 	.word	0x00001169

000011ec <_spi_m_sync_io_read>:
{
    11ec:	b570      	push	{r4, r5, r6, lr}
    11ee:	b084      	sub	sp, #16
    11f0:	0004      	movs	r4, r0
    11f2:	000e      	movs	r6, r1
    11f4:	0015      	movs	r5, r2
	ASSERT(io);
    11f6:	1e43      	subs	r3, r0, #1
    11f8:	4198      	sbcs	r0, r3
    11fa:	b2c0      	uxtb	r0, r0
    11fc:	2287      	movs	r2, #135	; 0x87
    11fe:	4907      	ldr	r1, [pc, #28]	; (121c <_spi_m_sync_io_read+0x30>)
    1200:	4b07      	ldr	r3, [pc, #28]	; (1220 <_spi_m_sync_io_read+0x34>)
    1202:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1204:	0020      	movs	r0, r4
    1206:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    1208:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    120a:	2300      	movs	r3, #0
    120c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    120e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1210:	a901      	add	r1, sp, #4
    1212:	4b04      	ldr	r3, [pc, #16]	; (1224 <_spi_m_sync_io_read+0x38>)
    1214:	4798      	blx	r3
}
    1216:	b004      	add	sp, #16
    1218:	bd70      	pop	{r4, r5, r6, pc}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	00005c9c 	.word	0x00005c9c
    1220:	0000159d 	.word	0x0000159d
    1224:	00001169 	.word	0x00001169

00001228 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1228:	b570      	push	{r4, r5, r6, lr}
    122a:	0004      	movs	r4, r0
    122c:	000d      	movs	r5, r1
	ASSERT(spi && io);
    122e:	2800      	cmp	r0, #0
    1230:	d00c      	beq.n	124c <spi_m_sync_get_io_descriptor+0x24>
    1232:	2900      	cmp	r1, #0
    1234:	d008      	beq.n	1248 <spi_m_sync_get_io_descriptor+0x20>
    1236:	2001      	movs	r0, #1
    1238:	22bd      	movs	r2, #189	; 0xbd
    123a:	4905      	ldr	r1, [pc, #20]	; (1250 <spi_m_sync_get_io_descriptor+0x28>)
    123c:	4b05      	ldr	r3, [pc, #20]	; (1254 <spi_m_sync_get_io_descriptor+0x2c>)
    123e:	4798      	blx	r3
	*io = &spi->io;
    1240:	340c      	adds	r4, #12
    1242:	602c      	str	r4, [r5, #0]
	return 0;
}
    1244:	2000      	movs	r0, #0
    1246:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
    1248:	2000      	movs	r0, #0
    124a:	e7f5      	b.n	1238 <spi_m_sync_get_io_descriptor+0x10>
    124c:	2000      	movs	r0, #0
    124e:	e7f3      	b.n	1238 <spi_m_sync_get_io_descriptor+0x10>
    1250:	00005c9c 	.word	0x00005c9c
    1254:	0000159d 	.word	0x0000159d

00001258 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    125a:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    125c:	2e00      	cmp	r6, #0
    125e:	d002      	beq.n	1266 <timer_add_timer_task+0xe>
    1260:	0033      	movs	r3, r6
    1262:	2500      	movs	r5, #0
    1264:	e00c      	b.n	1280 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    1266:	4b10      	ldr	r3, [pc, #64]	; (12a8 <timer_add_timer_task+0x50>)
    1268:	4798      	blx	r3
		return;
    126a:	e018      	b.n	129e <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    126c:	689f      	ldr	r7, [r3, #8]
    126e:	46bc      	mov	ip, r7
    1270:	4464      	add	r4, ip
    1272:	1aa4      	subs	r4, r4, r2
    1274:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
    1276:	688f      	ldr	r7, [r1, #8]
    1278:	42bc      	cmp	r4, r7
    127a:	d20b      	bcs.n	1294 <timer_add_timer_task+0x3c>
			break;
		prev = it;
    127c:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    127e:	681b      	ldr	r3, [r3, #0]
    1280:	2b00      	cmp	r3, #0
    1282:	d007      	beq.n	1294 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
    1284:	685c      	ldr	r4, [r3, #4]
    1286:	4294      	cmp	r4, r2
    1288:	d8f0      	bhi.n	126c <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
    128a:	1aa4      	subs	r4, r4, r2
    128c:	689f      	ldr	r7, [r3, #8]
    128e:	46bc      	mov	ip, r7
    1290:	4464      	add	r4, ip
    1292:	e7f0      	b.n	1276 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
    1294:	42b3      	cmp	r3, r6
    1296:	d003      	beq.n	12a0 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1298:	0028      	movs	r0, r5
    129a:	4b04      	ldr	r3, [pc, #16]	; (12ac <timer_add_timer_task+0x54>)
    129c:	4798      	blx	r3
	}
}
    129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    12a0:	4b01      	ldr	r3, [pc, #4]	; (12a8 <timer_add_timer_task+0x50>)
    12a2:	4798      	blx	r3
    12a4:	e7fb      	b.n	129e <timer_add_timer_task+0x46>
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	000015bd 	.word	0x000015bd
    12ac:	000015e9 	.word	0x000015e9

000012b0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    12b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12b2:	0005      	movs	r5, r0
    12b4:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    12b6:	6903      	ldr	r3, [r0, #16]
    12b8:	1c5e      	adds	r6, r3, #1
    12ba:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    12bc:	7e03      	ldrb	r3, [r0, #24]
    12be:	07db      	lsls	r3, r3, #31
    12c0:	d402      	bmi.n	12c8 <timer_process_counted+0x18>
    12c2:	7e03      	ldrb	r3, [r0, #24]
    12c4:	079b      	lsls	r3, r3, #30
    12c6:	d50a      	bpl.n	12de <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    12c8:	7e2b      	ldrb	r3, [r5, #24]
    12ca:	2202      	movs	r2, #2
    12cc:	4313      	orrs	r3, r2
    12ce:	b2db      	uxtb	r3, r3
    12d0:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    12d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12d4:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
    12d6:	68e3      	ldr	r3, [r4, #12]
    12d8:	0020      	movs	r0, r4
    12da:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    12dc:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    12de:	2c00      	cmp	r4, #0
    12e0:	d0f7      	beq.n	12d2 <timer_process_counted+0x22>
    12e2:	6863      	ldr	r3, [r4, #4]
    12e4:	1af3      	subs	r3, r6, r3
    12e6:	68a2      	ldr	r2, [r4, #8]
    12e8:	4293      	cmp	r3, r2
    12ea:	d3f2      	bcc.n	12d2 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
    12ec:	002f      	movs	r7, r5
    12ee:	3714      	adds	r7, #20
    12f0:	0038      	movs	r0, r7
    12f2:	4b06      	ldr	r3, [pc, #24]	; (130c <timer_process_counted+0x5c>)
    12f4:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    12f6:	7c23      	ldrb	r3, [r4, #16]
    12f8:	2b01      	cmp	r3, #1
    12fa:	d1eb      	bne.n	12d4 <timer_process_counted+0x24>
			tmp->time_label = time;
    12fc:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    12fe:	0032      	movs	r2, r6
    1300:	0021      	movs	r1, r4
    1302:	0038      	movs	r0, r7
    1304:	4b02      	ldr	r3, [pc, #8]	; (1310 <timer_process_counted+0x60>)
    1306:	4798      	blx	r3
    1308:	e7e4      	b.n	12d4 <timer_process_counted+0x24>
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	000015f1 	.word	0x000015f1
    1310:	00001259 	.word	0x00001259

00001314 <timer_init>:
{
    1314:	b570      	push	{r4, r5, r6, lr}
    1316:	0004      	movs	r4, r0
    1318:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    131a:	2800      	cmp	r0, #0
    131c:	d012      	beq.n	1344 <timer_init+0x30>
    131e:	2900      	cmp	r1, #0
    1320:	d00e      	beq.n	1340 <timer_init+0x2c>
    1322:	2001      	movs	r0, #1
    1324:	223b      	movs	r2, #59	; 0x3b
    1326:	4908      	ldr	r1, [pc, #32]	; (1348 <timer_init+0x34>)
    1328:	4b08      	ldr	r3, [pc, #32]	; (134c <timer_init+0x38>)
    132a:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    132c:	0029      	movs	r1, r5
    132e:	0020      	movs	r0, r4
    1330:	4b07      	ldr	r3, [pc, #28]	; (1350 <timer_init+0x3c>)
    1332:	4798      	blx	r3
	descr->time                           = 0;
    1334:	2300      	movs	r3, #0
    1336:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1338:	4b06      	ldr	r3, [pc, #24]	; (1354 <timer_init+0x40>)
    133a:	6023      	str	r3, [r4, #0]
}
    133c:	2000      	movs	r0, #0
    133e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    1340:	2000      	movs	r0, #0
    1342:	e7ef      	b.n	1324 <timer_init+0x10>
    1344:	2000      	movs	r0, #0
    1346:	e7ed      	b.n	1324 <timer_init+0x10>
    1348:	00005cb8 	.word	0x00005cb8
    134c:	0000159d 	.word	0x0000159d
    1350:	00001d31 	.word	0x00001d31
    1354:	000012b1 	.word	0x000012b1

00001358 <timer_start>:
{
    1358:	b510      	push	{r4, lr}
    135a:	0004      	movs	r4, r0
	ASSERT(descr);
    135c:	1e43      	subs	r3, r0, #1
    135e:	4198      	sbcs	r0, r3
    1360:	b2c0      	uxtb	r0, r0
    1362:	2253      	movs	r2, #83	; 0x53
    1364:	4907      	ldr	r1, [pc, #28]	; (1384 <timer_start+0x2c>)
    1366:	4b08      	ldr	r3, [pc, #32]	; (1388 <timer_start+0x30>)
    1368:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    136a:	0020      	movs	r0, r4
    136c:	4b07      	ldr	r3, [pc, #28]	; (138c <timer_start+0x34>)
    136e:	4798      	blx	r3
    1370:	2800      	cmp	r0, #0
    1372:	d104      	bne.n	137e <timer_start+0x26>
	_timer_start(&descr->device);
    1374:	0020      	movs	r0, r4
    1376:	4b06      	ldr	r3, [pc, #24]	; (1390 <timer_start+0x38>)
    1378:	4798      	blx	r3
	return ERR_NONE;
    137a:	2000      	movs	r0, #0
}
    137c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    137e:	2011      	movs	r0, #17
    1380:	4240      	negs	r0, r0
    1382:	e7fb      	b.n	137c <timer_start+0x24>
    1384:	00005cb8 	.word	0x00005cb8
    1388:	0000159d 	.word	0x0000159d
    138c:	00001df5 	.word	0x00001df5
    1390:	00001d99 	.word	0x00001d99

00001394 <timer_add_task>:
{
    1394:	b570      	push	{r4, r5, r6, lr}
    1396:	b082      	sub	sp, #8
    1398:	0004      	movs	r4, r0
    139a:	000d      	movs	r5, r1
	ASSERT(descr && task);
    139c:	2800      	cmp	r0, #0
    139e:	d026      	beq.n	13ee <timer_add_task+0x5a>
    13a0:	2900      	cmp	r1, #0
    13a2:	d022      	beq.n	13ea <timer_add_task+0x56>
    13a4:	2001      	movs	r0, #1
    13a6:	227a      	movs	r2, #122	; 0x7a
    13a8:	491f      	ldr	r1, [pc, #124]	; (1428 <timer_add_task+0x94>)
    13aa:	4b20      	ldr	r3, [pc, #128]	; (142c <timer_add_task+0x98>)
    13ac:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    13ae:	7e23      	ldrb	r3, [r4, #24]
    13b0:	2201      	movs	r2, #1
    13b2:	4313      	orrs	r3, r2
    13b4:	b2db      	uxtb	r3, r3
    13b6:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    13b8:	0026      	movs	r6, r4
    13ba:	3614      	adds	r6, #20
    13bc:	0029      	movs	r1, r5
    13be:	0030      	movs	r0, r6
    13c0:	4b1b      	ldr	r3, [pc, #108]	; (1430 <timer_add_task+0x9c>)
    13c2:	4798      	blx	r3
    13c4:	2800      	cmp	r0, #0
    13c6:	d114      	bne.n	13f2 <timer_add_task+0x5e>
	task->time_label = descr->time;
    13c8:	6923      	ldr	r3, [r4, #16]
    13ca:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    13cc:	6922      	ldr	r2, [r4, #16]
    13ce:	0029      	movs	r1, r5
    13d0:	0030      	movs	r0, r6
    13d2:	4b18      	ldr	r3, [pc, #96]	; (1434 <timer_add_task+0xa0>)
    13d4:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    13d6:	7e23      	ldrb	r3, [r4, #24]
    13d8:	2201      	movs	r2, #1
    13da:	4393      	bics	r3, r2
    13dc:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    13de:	7e23      	ldrb	r3, [r4, #24]
    13e0:	079b      	lsls	r3, r3, #30
    13e2:	d412      	bmi.n	140a <timer_add_task+0x76>
	return ERR_NONE;
    13e4:	2000      	movs	r0, #0
}
    13e6:	b002      	add	sp, #8
    13e8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    13ea:	2000      	movs	r0, #0
    13ec:	e7db      	b.n	13a6 <timer_add_task+0x12>
    13ee:	2000      	movs	r0, #0
    13f0:	e7d9      	b.n	13a6 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    13f2:	7e23      	ldrb	r3, [r4, #24]
    13f4:	2201      	movs	r2, #1
    13f6:	4393      	bics	r3, r2
    13f8:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    13fa:	327e      	adds	r2, #126	; 0x7e
    13fc:	490a      	ldr	r1, [pc, #40]	; (1428 <timer_add_task+0x94>)
    13fe:	2000      	movs	r0, #0
    1400:	4b0a      	ldr	r3, [pc, #40]	; (142c <timer_add_task+0x98>)
    1402:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1404:	2012      	movs	r0, #18
    1406:	4240      	negs	r0, r0
    1408:	e7ed      	b.n	13e6 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    140a:	a801      	add	r0, sp, #4
    140c:	4b0a      	ldr	r3, [pc, #40]	; (1438 <timer_add_task+0xa4>)
    140e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1410:	7e23      	ldrb	r3, [r4, #24]
    1412:	2202      	movs	r2, #2
    1414:	4393      	bics	r3, r2
    1416:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1418:	0020      	movs	r0, r4
    141a:	4b08      	ldr	r3, [pc, #32]	; (143c <timer_add_task+0xa8>)
    141c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    141e:	a801      	add	r0, sp, #4
    1420:	4b07      	ldr	r3, [pc, #28]	; (1440 <timer_add_task+0xac>)
    1422:	4798      	blx	r3
	return ERR_NONE;
    1424:	2000      	movs	r0, #0
    1426:	e7de      	b.n	13e6 <timer_add_task+0x52>
    1428:	00005cb8 	.word	0x00005cb8
    142c:	0000159d 	.word	0x0000159d
    1430:	000015a5 	.word	0x000015a5
    1434:	00001259 	.word	0x00001259
    1438:	00000e95 	.word	0x00000e95
    143c:	00001e0d 	.word	0x00001e0d
    1440:	00000ea3 	.word	0x00000ea3

00001444 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1446:	0005      	movs	r5, r0
    1448:	000e      	movs	r6, r1
    144a:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    144c:	2800      	cmp	r0, #0
    144e:	d023      	beq.n	1498 <usart_sync_write+0x54>
    1450:	2900      	cmp	r1, #0
    1452:	d023      	beq.n	149c <usart_sync_write+0x58>
    1454:	2a00      	cmp	r2, #0
    1456:	d123      	bne.n	14a0 <usart_sync_write+0x5c>
    1458:	2000      	movs	r0, #0
    145a:	22f1      	movs	r2, #241	; 0xf1
    145c:	4911      	ldr	r1, [pc, #68]	; (14a4 <usart_sync_write+0x60>)
    145e:	4b12      	ldr	r3, [pc, #72]	; (14a8 <usart_sync_write+0x64>)
    1460:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1462:	002c      	movs	r4, r5
    1464:	3408      	adds	r4, #8
    1466:	0020      	movs	r0, r4
    1468:	4b10      	ldr	r3, [pc, #64]	; (14ac <usart_sync_write+0x68>)
    146a:	4798      	blx	r3
    146c:	2800      	cmp	r0, #0
    146e:	d0f8      	beq.n	1462 <usart_sync_write+0x1e>
    1470:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1472:	5d71      	ldrb	r1, [r6, r5]
    1474:	0020      	movs	r0, r4
    1476:	4b0e      	ldr	r3, [pc, #56]	; (14b0 <usart_sync_write+0x6c>)
    1478:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    147a:	0020      	movs	r0, r4
    147c:	4b0b      	ldr	r3, [pc, #44]	; (14ac <usart_sync_write+0x68>)
    147e:	4798      	blx	r3
    1480:	2800      	cmp	r0, #0
    1482:	d0fa      	beq.n	147a <usart_sync_write+0x36>
			;
	} while (++offset < length);
    1484:	3501      	adds	r5, #1
    1486:	42bd      	cmp	r5, r7
    1488:	d3f3      	bcc.n	1472 <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
    148a:	0020      	movs	r0, r4
    148c:	4b09      	ldr	r3, [pc, #36]	; (14b4 <usart_sync_write+0x70>)
    148e:	4798      	blx	r3
    1490:	2800      	cmp	r0, #0
    1492:	d0fa      	beq.n	148a <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
    1494:	0028      	movs	r0, r5
    1496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1498:	2000      	movs	r0, #0
    149a:	e7de      	b.n	145a <usart_sync_write+0x16>
    149c:	2000      	movs	r0, #0
    149e:	e7dc      	b.n	145a <usart_sync_write+0x16>
    14a0:	2001      	movs	r0, #1
    14a2:	e7da      	b.n	145a <usart_sync_write+0x16>
    14a4:	00005cd0 	.word	0x00005cd0
    14a8:	0000159d 	.word	0x0000159d
    14ac:	00001fdb 	.word	0x00001fdb
    14b0:	00001fcb 	.word	0x00001fcb
    14b4:	00001fe5 	.word	0x00001fe5

000014b8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    14b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ba:	46ce      	mov	lr, r9
    14bc:	4647      	mov	r7, r8
    14be:	b580      	push	{r7, lr}
    14c0:	1e05      	subs	r5, r0, #0
    14c2:	4688      	mov	r8, r1
    14c4:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    14c6:	d01f      	beq.n	1508 <usart_sync_read+0x50>
    14c8:	2900      	cmp	r1, #0
    14ca:	d01f      	beq.n	150c <usart_sync_read+0x54>
    14cc:	2a00      	cmp	r2, #0
    14ce:	d11f      	bne.n	1510 <usart_sync_read+0x58>
    14d0:	2000      	movs	r0, #0
    14d2:	2286      	movs	r2, #134	; 0x86
    14d4:	0052      	lsls	r2, r2, #1
    14d6:	490f      	ldr	r1, [pc, #60]	; (1514 <usart_sync_read+0x5c>)
    14d8:	4b0f      	ldr	r3, [pc, #60]	; (1518 <usart_sync_read+0x60>)
    14da:	4798      	blx	r3
	uint32_t                      offset = 0;
    14dc:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    14de:	002c      	movs	r4, r5
    14e0:	3408      	adds	r4, #8
    14e2:	0020      	movs	r0, r4
    14e4:	4b0d      	ldr	r3, [pc, #52]	; (151c <usart_sync_read+0x64>)
    14e6:	4798      	blx	r3
    14e8:	2800      	cmp	r0, #0
    14ea:	d0f8      	beq.n	14de <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    14ec:	4643      	mov	r3, r8
    14ee:	199f      	adds	r7, r3, r6
    14f0:	0020      	movs	r0, r4
    14f2:	4b0b      	ldr	r3, [pc, #44]	; (1520 <usart_sync_read+0x68>)
    14f4:	4798      	blx	r3
    14f6:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
    14f8:	3601      	adds	r6, #1
    14fa:	454e      	cmp	r6, r9
    14fc:	d3ef      	bcc.n	14de <usart_sync_read+0x26>

	return (int32_t)offset;
}
    14fe:	0030      	movs	r0, r6
    1500:	bc0c      	pop	{r2, r3}
    1502:	4690      	mov	r8, r2
    1504:	4699      	mov	r9, r3
    1506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1508:	2000      	movs	r0, #0
    150a:	e7e2      	b.n	14d2 <usart_sync_read+0x1a>
    150c:	2000      	movs	r0, #0
    150e:	e7e0      	b.n	14d2 <usart_sync_read+0x1a>
    1510:	2001      	movs	r0, #1
    1512:	e7de      	b.n	14d2 <usart_sync_read+0x1a>
    1514:	00005cd0 	.word	0x00005cd0
    1518:	0000159d 	.word	0x0000159d
    151c:	00001ff1 	.word	0x00001ff1
    1520:	00001fd3 	.word	0x00001fd3

00001524 <usart_sync_init>:
{
    1524:	b570      	push	{r4, r5, r6, lr}
    1526:	0004      	movs	r4, r0
    1528:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    152a:	2800      	cmp	r0, #0
    152c:	d014      	beq.n	1558 <usart_sync_init+0x34>
    152e:	2900      	cmp	r1, #0
    1530:	d010      	beq.n	1554 <usart_sync_init+0x30>
    1532:	2001      	movs	r0, #1
    1534:	2234      	movs	r2, #52	; 0x34
    1536:	4909      	ldr	r1, [pc, #36]	; (155c <usart_sync_init+0x38>)
    1538:	4b09      	ldr	r3, [pc, #36]	; (1560 <usart_sync_init+0x3c>)
    153a:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    153c:	0020      	movs	r0, r4
    153e:	3008      	adds	r0, #8
    1540:	0029      	movs	r1, r5
    1542:	4b08      	ldr	r3, [pc, #32]	; (1564 <usart_sync_init+0x40>)
    1544:	4798      	blx	r3
	if (init_status) {
    1546:	2800      	cmp	r0, #0
    1548:	d103      	bne.n	1552 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
    154a:	4b07      	ldr	r3, [pc, #28]	; (1568 <usart_sync_init+0x44>)
    154c:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
    154e:	4b07      	ldr	r3, [pc, #28]	; (156c <usart_sync_init+0x48>)
    1550:	6023      	str	r3, [r4, #0]
}
    1552:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    1554:	2000      	movs	r0, #0
    1556:	e7ed      	b.n	1534 <usart_sync_init+0x10>
    1558:	2000      	movs	r0, #0
    155a:	e7eb      	b.n	1534 <usart_sync_init+0x10>
    155c:	00005cd0 	.word	0x00005cd0
    1560:	0000159d 	.word	0x0000159d
    1564:	00001f8d 	.word	0x00001f8d
    1568:	000014b9 	.word	0x000014b9
    156c:	00001445 	.word	0x00001445

00001570 <usart_sync_enable>:
{
    1570:	b510      	push	{r4, lr}
    1572:	0004      	movs	r4, r0
	ASSERT(descr);
    1574:	1e43      	subs	r3, r0, #1
    1576:	4198      	sbcs	r0, r3
    1578:	b2c0      	uxtb	r0, r0
    157a:	2253      	movs	r2, #83	; 0x53
    157c:	4904      	ldr	r1, [pc, #16]	; (1590 <usart_sync_enable+0x20>)
    157e:	4b05      	ldr	r3, [pc, #20]	; (1594 <usart_sync_enable+0x24>)
    1580:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1582:	0020      	movs	r0, r4
    1584:	3008      	adds	r0, #8
    1586:	4b04      	ldr	r3, [pc, #16]	; (1598 <usart_sync_enable+0x28>)
    1588:	4798      	blx	r3
}
    158a:	2000      	movs	r0, #0
    158c:	bd10      	pop	{r4, pc}
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	00005cd0 	.word	0x00005cd0
    1594:	0000159d 	.word	0x0000159d
    1598:	00001fb9 	.word	0x00001fb9

0000159c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    159c:	2800      	cmp	r0, #0
    159e:	d100      	bne.n	15a2 <assert+0x6>
		__asm("BKPT #0");
    15a0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    15a2:	4770      	bx	lr

000015a4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    15a4:	6803      	ldr	r3, [r0, #0]
    15a6:	2b00      	cmp	r3, #0
    15a8:	d003      	beq.n	15b2 <is_list_element+0xe>
		if (it == element) {
    15aa:	428b      	cmp	r3, r1
    15ac:	d003      	beq.n	15b6 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    15ae:	681b      	ldr	r3, [r3, #0]
    15b0:	e7f9      	b.n	15a6 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    15b2:	2000      	movs	r0, #0
}
    15b4:	4770      	bx	lr
			return true;
    15b6:	2001      	movs	r0, #1
    15b8:	e7fc      	b.n	15b4 <is_list_element+0x10>
	...

000015bc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    15bc:	b570      	push	{r4, r5, r6, lr}
    15be:	0004      	movs	r4, r0
    15c0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    15c2:	4b06      	ldr	r3, [pc, #24]	; (15dc <list_insert_as_head+0x20>)
    15c4:	4798      	blx	r3
    15c6:	2301      	movs	r3, #1
    15c8:	4058      	eors	r0, r3
    15ca:	b2c0      	uxtb	r0, r0
    15cc:	2239      	movs	r2, #57	; 0x39
    15ce:	4904      	ldr	r1, [pc, #16]	; (15e0 <list_insert_as_head+0x24>)
    15d0:	4b04      	ldr	r3, [pc, #16]	; (15e4 <list_insert_as_head+0x28>)
    15d2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    15d4:	6823      	ldr	r3, [r4, #0]
    15d6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    15d8:	6025      	str	r5, [r4, #0]
}
    15da:	bd70      	pop	{r4, r5, r6, pc}
    15dc:	000015a5 	.word	0x000015a5
    15e0:	00005cec 	.word	0x00005cec
    15e4:	0000159d 	.word	0x0000159d

000015e8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    15e8:	6803      	ldr	r3, [r0, #0]
    15ea:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    15ec:	6001      	str	r1, [r0, #0]
}
    15ee:	4770      	bx	lr

000015f0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    15f0:	6803      	ldr	r3, [r0, #0]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d003      	beq.n	15fe <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    15f6:	681a      	ldr	r2, [r3, #0]
    15f8:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    15fa:	0018      	movs	r0, r3
	}

	return NULL;
}
    15fc:	4770      	bx	lr
	return NULL;
    15fe:	2000      	movs	r0, #0
    1600:	e7fc      	b.n	15fc <list_remove_head+0xc>
	...

00001604 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1604:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1606:	4a06      	ldr	r2, [pc, #24]	; (1620 <_sbrk+0x1c>)
    1608:	6812      	ldr	r2, [r2, #0]
    160a:	2a00      	cmp	r2, #0
    160c:	d004      	beq.n	1618 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    160e:	4a04      	ldr	r2, [pc, #16]	; (1620 <_sbrk+0x1c>)
    1610:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1612:	18c3      	adds	r3, r0, r3
    1614:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1616:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1618:	4902      	ldr	r1, [pc, #8]	; (1624 <_sbrk+0x20>)
    161a:	4a01      	ldr	r2, [pc, #4]	; (1620 <_sbrk+0x1c>)
    161c:	6011      	str	r1, [r2, #0]
    161e:	e7f6      	b.n	160e <_sbrk+0xa>
    1620:	200000ac 	.word	0x200000ac
    1624:	20002670 	.word	0x20002670

00001628 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    1628:	2001      	movs	r0, #1
    162a:	4240      	negs	r0, r0
    162c:	4770      	bx	lr

0000162e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    162e:	2380      	movs	r3, #128	; 0x80
    1630:	019b      	lsls	r3, r3, #6
    1632:	604b      	str	r3, [r1, #4]

	return 0;
}
    1634:	2000      	movs	r0, #0
    1636:	4770      	bx	lr

00001638 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    1638:	2000      	movs	r0, #0
    163a:	4770      	bx	lr

0000163c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    163c:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
    163e:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1640:	698b      	ldr	r3, [r1, #24]
    1642:	2201      	movs	r2, #1
    1644:	4313      	orrs	r3, r2
    1646:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    1648:	6803      	ldr	r3, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    164a:	699a      	ldr	r2, [r3, #24]
    164c:	07d2      	lsls	r2, r2, #31
    164e:	d5fb      	bpl.n	1648 <_can_async_init+0xc>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    1650:	699a      	ldr	r2, [r3, #24]
    1652:	2402      	movs	r4, #2
    1654:	4322      	orrs	r2, r4
    1656:	619a      	str	r2, [r3, #24]
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (hw == CAN0) {
    1658:	4b34      	ldr	r3, [pc, #208]	; (172c <_can_async_init+0xf0>)
    165a:	4299      	cmp	r1, r3
    165c:	d00f      	beq.n	167e <_can_async_init+0x42>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    165e:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    1660:	6993      	ldr	r3, [r2, #24]
    1662:	2102      	movs	r1, #2
    1664:	438b      	bics	r3, r1
    1666:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    1668:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    166a:	6993      	ldr	r3, [r2, #24]
    166c:	3901      	subs	r1, #1
    166e:	438b      	bics	r3, r1
    1670:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    1672:	6803      	ldr	r3, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    1674:	699b      	ldr	r3, [r3, #24]
    1676:	07db      	lsls	r3, r3, #31
    1678:	d4fb      	bmi.n	1672 <_can_async_init+0x36>
	};

	return ERR_NONE;
}
    167a:	2000      	movs	r0, #0
    167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_can0_dev    = dev;
    167e:	4b2c      	ldr	r3, [pc, #176]	; (1730 <_can_async_init+0xf4>)
    1680:	001a      	movs	r2, r3
    1682:	c201      	stmia	r2!, {r0}
		dev->context = (void *)&_can0_context;
    1684:	492b      	ldr	r1, [pc, #172]	; (1734 <_can_async_init+0xf8>)
    1686:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
    1688:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    168a:	698c      	ldr	r4, [r1, #24]
    168c:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN0_MRCFG_REG);
    168e:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    1690:	2402      	movs	r4, #2
    1692:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN0_BTP_REG);
    1694:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    1696:	4c28      	ldr	r4, [pc, #160]	; (1738 <_can_async_init+0xfc>)
    1698:	61cc      	str	r4, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
    169a:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    169c:	4c27      	ldr	r4, [pc, #156]	; (173c <_can_async_init+0x100>)
    169e:	60cc      	str	r4, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo));
    16a0:	4c27      	ldr	r4, [pc, #156]	; (1740 <_can_async_init+0x104>)
    16a2:	0424      	lsls	r4, r4, #16
    16a4:	0c24      	lsrs	r4, r4, #16
    16a6:	2180      	movs	r1, #128	; 0x80
    16a8:	0289      	lsls	r1, r1, #10
    16aa:	430c      	orrs	r4, r1
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    16ac:	25a0      	movs	r5, #160	; 0xa0
    16ae:	6806      	ldr	r6, [r0, #0]
    16b0:	5174      	str	r4, [r6, r5]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    16b2:	2400      	movs	r4, #0
    16b4:	351c      	adds	r5, #28
    16b6:	6806      	ldr	r6, [r0, #0]
    16b8:	5174      	str	r4, [r6, r5]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    16ba:	350c      	adds	r5, #12
    16bc:	6806      	ldr	r6, [r0, #0]
    16be:	5174      	str	r4, [r6, r5]
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can0_tx_fifo));
    16c0:	4d20      	ldr	r5, [pc, #128]	; (1744 <_can_async_init+0x108>)
    16c2:	042d      	lsls	r5, r5, #16
    16c4:	0c2d      	lsrs	r5, r5, #16
    16c6:	2680      	movs	r6, #128	; 0x80
    16c8:	04b6      	lsls	r6, r6, #18
    16ca:	4335      	orrs	r5, r6
	((Can *)hw)->TXBC.reg = data;
    16cc:	26c0      	movs	r6, #192	; 0xc0
    16ce:	6807      	ldr	r7, [r0, #0]
    16d0:	51bd      	str	r5, [r7, r6]
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo));
    16d2:	0412      	lsls	r2, r2, #16
    16d4:	0c12      	lsrs	r2, r2, #16
    16d6:	430a      	orrs	r2, r1
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    16d8:	25f0      	movs	r5, #240	; 0xf0
    16da:	6806      	ldr	r6, [r0, #0]
    16dc:	5172      	str	r2, [r6, r5]
	((Can *)hw)->GFC.reg = data;
    16de:	3d70      	subs	r5, #112	; 0x70
    16e0:	2228      	movs	r2, #40	; 0x28
    16e2:	6806      	ldr	r6, [r0, #0]
    16e4:	5172      	str	r2, [r6, r5]
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can0_rx_std_filter));
    16e6:	001a      	movs	r2, r3
    16e8:	3214      	adds	r2, #20
    16ea:	0412      	lsls	r2, r2, #16
    16ec:	0c12      	lsrs	r2, r2, #16
    16ee:	430a      	orrs	r2, r1
	((Can *)hw)->SIDFC.reg = data;
    16f0:	2684      	movs	r6, #132	; 0x84
    16f2:	6807      	ldr	r7, [r0, #0]
    16f4:	51ba      	str	r2, [r7, r6]
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can0_rx_ext_filter));
    16f6:	331c      	adds	r3, #28
    16f8:	041b      	lsls	r3, r3, #16
    16fa:	0c1b      	lsrs	r3, r3, #16
    16fc:	430b      	orrs	r3, r1
	((Can *)hw)->XIDFC.reg = data;
    16fe:	2288      	movs	r2, #136	; 0x88
    1700:	6801      	ldr	r1, [r0, #0]
    1702:	508b      	str	r3, [r1, r2]
	((Can *)hw)->XIDAM.reg = data;
    1704:	2390      	movs	r3, #144	; 0x90
    1706:	6802      	ldr	r2, [r0, #0]
    1708:	50d4      	str	r4, [r2, r3]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    170a:	4b0f      	ldr	r3, [pc, #60]	; (1748 <_can_async_init+0x10c>)
    170c:	2280      	movs	r2, #128	; 0x80
    170e:	0212      	lsls	r2, r2, #8
    1710:	515a      	str	r2, [r3, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    1712:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1716:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    171a:	21c0      	movs	r1, #192	; 0xc0
    171c:	0049      	lsls	r1, r1, #1
    171e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1720:	601a      	str	r2, [r3, #0]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    1722:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    1724:	2201      	movs	r2, #1
    1726:	65da      	str	r2, [r3, #92]	; 0x5c
    1728:	e799      	b.n	165e <_can_async_init+0x22>
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	42001c00 	.word	0x42001c00
    1730:	200000b0 	.word	0x200000b0
    1734:	20000000 	.word	0x20000000
    1738:	06020a03 	.word	0x06020a03
    173c:	00020a33 	.word	0x00020a33
    1740:	20000204 	.word	0x20000204
    1744:	20000224 	.word	0x20000224
    1748:	e000e100 	.word	0xe000e100

0000174c <_can_async_enable>:
/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    174c:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    174e:	6993      	ldr	r3, [r2, #24]
    1750:	2101      	movs	r1, #1
    1752:	438b      	bics	r3, r1
    1754:	6193      	str	r3, [r2, #24]
	return ERR_NONE;
}
    1756:	2000      	movs	r0, #0
    1758:	4770      	bx	lr
	...

0000175c <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    175c:	b5f0      	push	{r4, r5, r6, r7, lr}
    175e:	46c6      	mov	lr, r8
    1760:	b500      	push	{lr}
    1762:	b084      	sub	sp, #16
    1764:	4684      	mov	ip, r0
	struct _can_rx_fifo_entry *f = NULL;
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    1766:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    1768:	22a4      	movs	r2, #164	; 0xa4
    176a:	589a      	ldr	r2, [r3, r2]
    176c:	0652      	lsls	r2, r2, #25
    176e:	d048      	beq.n	1802 <_can_async_read+0xa6>
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    1770:	22a4      	movs	r2, #164	; 0xa4
    1772:	589f      	ldr	r7, [r3, r2]
    1774:	0a3f      	lsrs	r7, r7, #8
    1776:	3a65      	subs	r2, #101	; 0x65
    1778:	4017      	ands	r7, r2
    177a:	46b8      	mov	r8, r7
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (dev->hw == CAN0) {
    177c:	4a24      	ldr	r2, [pc, #144]	; (1810 <_can_async_read+0xb4>)
    177e:	4293      	cmp	r3, r2
    1780:	d01c      	beq.n	17bc <_can_async_read+0x60>
	struct _can_rx_fifo_entry *f = NULL;
    1782:	2500      	movs	r5, #0
	if (dev->hw == CAN1) {
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
	}
#endif

	if (f == NULL) {
    1784:	2d00      	cmp	r5, #0
    1786:	d03f      	beq.n	1808 <_can_async_read+0xac>
		return ERR_NO_RESOURCE;
	}

	if (f->R0.bit.XTD == 1) {
    1788:	682b      	ldr	r3, [r5, #0]
    178a:	005b      	lsls	r3, r3, #1
    178c:	d41a      	bmi.n	17c4 <_can_async_read+0x68>
		msg->fmt = CAN_FMT_EXTID;
		msg->id  = f->R0.bit.ID;
	} else {
		msg->fmt = CAN_FMT_STDID;
    178e:	2300      	movs	r3, #0
    1790:	738b      	strb	r3, [r1, #14]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    1792:	682b      	ldr	r3, [r5, #0]
    1794:	00db      	lsls	r3, r3, #3
    1796:	0d5b      	lsrs	r3, r3, #21
    1798:	600b      	str	r3, [r1, #0]
	}

	if (f->R0.bit.RTR == 1) {
    179a:	682b      	ldr	r3, [r5, #0]
    179c:	009b      	lsls	r3, r3, #2
    179e:	d418      	bmi.n	17d2 <_can_async_read+0x76>
		msg->type = CAN_TYPE_REMOTE;
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    17a0:	466b      	mov	r3, sp
    17a2:	4a1c      	ldr	r2, [pc, #112]	; (1814 <_can_async_read+0xb8>)
    17a4:	466c      	mov	r4, sp
    17a6:	cac1      	ldmia	r2!, {r0, r6, r7}
    17a8:	c4c1      	stmia	r4!, {r0, r6, r7}
    17aa:	6812      	ldr	r2, [r2, #0]
    17ac:	6022      	str	r2, [r4, #0]
	msg->len                = dlc2len[f->R1.bit.DLC];
    17ae:	686a      	ldr	r2, [r5, #4]
    17b0:	0312      	lsls	r2, r2, #12
    17b2:	0f12      	lsrs	r2, r2, #28
    17b4:	5c9e      	ldrb	r6, [r3, r2]
    17b6:	734e      	strb	r6, [r1, #13]

	for(int i = 0; i < msg->len; i++){
    17b8:	2300      	movs	r3, #0
    17ba:	e012      	b.n	17e2 <_can_async_read+0x86>
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
    17bc:	013b      	lsls	r3, r7, #4
    17be:	4d16      	ldr	r5, [pc, #88]	; (1818 <_can_async_read+0xbc>)
    17c0:	195d      	adds	r5, r3, r5
    17c2:	e7df      	b.n	1784 <_can_async_read+0x28>
		msg->fmt = CAN_FMT_EXTID;
    17c4:	2301      	movs	r3, #1
    17c6:	738b      	strb	r3, [r1, #14]
		msg->id  = f->R0.bit.ID;
    17c8:	682b      	ldr	r3, [r5, #0]
    17ca:	00db      	lsls	r3, r3, #3
    17cc:	08db      	lsrs	r3, r3, #3
    17ce:	600b      	str	r3, [r1, #0]
    17d0:	e7e3      	b.n	179a <_can_async_read+0x3e>
		msg->type = CAN_TYPE_REMOTE;
    17d2:	2301      	movs	r3, #1
    17d4:	710b      	strb	r3, [r1, #4]
    17d6:	e7e3      	b.n	17a0 <_can_async_read+0x44>
		msg->data[i] = f->data[i];
    17d8:	18ea      	adds	r2, r5, r3
    17da:	7a14      	ldrb	r4, [r2, #8]
    17dc:	18ca      	adds	r2, r1, r3
    17de:	7154      	strb	r4, [r2, #5]
	for(int i = 0; i < msg->len; i++){
    17e0:	3301      	adds	r3, #1
    17e2:	42b3      	cmp	r3, r6
    17e4:	dbf8      	blt.n	17d8 <_can_async_read+0x7c>
	}
	//memcpy(msg->data, f->data, msg->len);

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    17e6:	4663      	mov	r3, ip
    17e8:	6819      	ldr	r1, [r3, #0]
	tmp = ((Can *)hw)->RXF0A.reg;
    17ea:	22a8      	movs	r2, #168	; 0xa8
    17ec:	588b      	ldr	r3, [r1, r2]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    17ee:	203f      	movs	r0, #63	; 0x3f
    17f0:	4383      	bics	r3, r0
	tmp |= CAN_RXF0A_F0AI(data);
    17f2:	4647      	mov	r7, r8
    17f4:	431f      	orrs	r7, r3
	((Can *)hw)->RXF0A.reg = tmp;
    17f6:	508f      	str	r7, [r1, r2]

	return ERR_NONE;
    17f8:	2000      	movs	r0, #0
}
    17fa:	b004      	add	sp, #16
    17fc:	bc04      	pop	{r2}
    17fe:	4690      	mov	r8, r2
    1800:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NOT_FOUND;
    1802:	200a      	movs	r0, #10
    1804:	4240      	negs	r0, r0
    1806:	e7f8      	b.n	17fa <_can_async_read+0x9e>
		return ERR_NO_RESOURCE;
    1808:	201c      	movs	r0, #28
    180a:	4240      	negs	r0, r0
    180c:	e7f5      	b.n	17fa <_can_async_read+0x9e>
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	42001c00 	.word	0x42001c00
    1814:	00005d0c 	.word	0x00005d0c
    1818:	20000204 	.word	0x20000204

0000181c <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    181c:	b570      	push	{r4, r5, r6, lr}
    181e:	0005      	movs	r5, r0
	struct _can_tx_fifo_entry *f = NULL;
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    1820:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    1822:	22c4      	movs	r2, #196	; 0xc4
    1824:	589a      	ldr	r2, [r3, r2]
    1826:	0292      	lsls	r2, r2, #10
    1828:	d500      	bpl.n	182c <_can_async_write+0x10>
    182a:	e093      	b.n	1954 <_can_async_write+0x138>
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    182c:	22c4      	movs	r2, #196	; 0xc4
    182e:	5898      	ldr	r0, [r3, r2]
    1830:	0c00      	lsrs	r0, r0, #16
    1832:	3aa5      	subs	r2, #165	; 0xa5
    1834:	4010      	ands	r0, r2
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (dev->hw == CAN0) {
    1836:	4a4a      	ldr	r2, [pc, #296]	; (1960 <_can_async_write+0x144>)
    1838:	4293      	cmp	r3, r2
    183a:	d03a      	beq.n	18b2 <_can_async_write+0x96>
	struct _can_tx_fifo_entry *f = NULL;
    183c:	2000      	movs	r0, #0
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
	}
#endif
	if (f == NULL) {
    183e:	2800      	cmp	r0, #0
    1840:	d100      	bne.n	1844 <_can_async_write+0x28>
    1842:	e08a      	b.n	195a <_can_async_write+0x13e>
		return ERR_NO_RESOURCE;
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    1844:	7b8b      	ldrb	r3, [r1, #14]
    1846:	2b01      	cmp	r3, #1
    1848:	d037      	beq.n	18ba <_can_async_write+0x9e>
		f->T0.val     = msg->id;
		f->T0.bit.XTD = 1;
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    184a:	680b      	ldr	r3, [r1, #0]
    184c:	049b      	lsls	r3, r3, #18
    184e:	6003      	str	r3, [r0, #0]
	}

	if (msg->len <= 8) {
    1850:	7b4a      	ldrb	r2, [r1, #13]
    1852:	2a08      	cmp	r2, #8
    1854:	d839      	bhi.n	18ca <_can_async_write+0xae>
		f->T1.bit.DLC = msg->len;
    1856:	6844      	ldr	r4, [r0, #4]
    1858:	230f      	movs	r3, #15
    185a:	4013      	ands	r3, r2
    185c:	041b      	lsls	r3, r3, #16
    185e:	4a41      	ldr	r2, [pc, #260]	; (1964 <_can_async_write+0x148>)
    1860:	4014      	ands	r4, r2
    1862:	4323      	orrs	r3, r4
    1864:	6043      	str	r3, [r0, #4]
		f->T1.bit.DLC = 0xE;
	} else if (msg->len <= 64) {
		f->T1.bit.DLC = 0xF;
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    1866:	682b      	ldr	r3, [r5, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    1868:	699b      	ldr	r3, [r3, #24]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    186a:	0a1b      	lsrs	r3, r3, #8
    186c:	2401      	movs	r4, #1
    186e:	6842      	ldr	r2, [r0, #4]
    1870:	4023      	ands	r3, r4
    1872:	055b      	lsls	r3, r3, #21
    1874:	4e3c      	ldr	r6, [pc, #240]	; (1968 <_can_async_write+0x14c>)
    1876:	4032      	ands	r2, r6
    1878:	4313      	orrs	r3, r2
    187a:	6043      	str	r3, [r0, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    187c:	682b      	ldr	r3, [r5, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    187e:	699b      	ldr	r3, [r3, #24]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    1880:	0a5b      	lsrs	r3, r3, #9
    1882:	6842      	ldr	r2, [r0, #4]
    1884:	4023      	ands	r3, r4
    1886:	051b      	lsls	r3, r3, #20
    1888:	4e38      	ldr	r6, [pc, #224]	; (196c <_can_async_write+0x150>)
    188a:	4032      	ands	r2, r6
    188c:	4313      	orrs	r3, r2
    188e:	6043      	str	r3, [r0, #4]

	memcpy(f->data, msg->data, msg->len);
    1890:	3008      	adds	r0, #8
    1892:	1d4b      	adds	r3, r1, #5
    1894:	7b4a      	ldrb	r2, [r1, #13]
    1896:	0019      	movs	r1, r3
    1898:	4b35      	ldr	r3, [pc, #212]	; (1970 <_can_async_write+0x154>)
    189a:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    189c:	6829      	ldr	r1, [r5, #0]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    189e:	23c4      	movs	r3, #196	; 0xc4
    18a0:	58ca      	ldr	r2, [r1, r3]
    18a2:	0c12      	lsrs	r2, r2, #16
    18a4:	3ba5      	subs	r3, #165	; 0xa5
    18a6:	4013      	ands	r3, r2
    18a8:	409c      	lsls	r4, r3
	((Can *)hw)->TXBAR.reg = data;
    18aa:	23d0      	movs	r3, #208	; 0xd0
    18ac:	50cc      	str	r4, [r1, r3]
	return ERR_NONE;
    18ae:	2000      	movs	r0, #0
}
    18b0:	bd70      	pop	{r4, r5, r6, pc}
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
    18b2:	0100      	lsls	r0, r0, #4
    18b4:	4b2f      	ldr	r3, [pc, #188]	; (1974 <_can_async_write+0x158>)
    18b6:	18c0      	adds	r0, r0, r3
    18b8:	e7c1      	b.n	183e <_can_async_write+0x22>
		f->T0.val     = msg->id;
    18ba:	680b      	ldr	r3, [r1, #0]
    18bc:	6003      	str	r3, [r0, #0]
		f->T0.bit.XTD = 1;
    18be:	6802      	ldr	r2, [r0, #0]
    18c0:	2380      	movs	r3, #128	; 0x80
    18c2:	05db      	lsls	r3, r3, #23
    18c4:	4313      	orrs	r3, r2
    18c6:	6003      	str	r3, [r0, #0]
    18c8:	e7c2      	b.n	1850 <_can_async_write+0x34>
	} else if (msg->len <= 12) {
    18ca:	2a0c      	cmp	r2, #12
    18cc:	d807      	bhi.n	18de <_can_async_write+0xc2>
		f->T1.bit.DLC = 0x9;
    18ce:	6842      	ldr	r2, [r0, #4]
    18d0:	4b24      	ldr	r3, [pc, #144]	; (1964 <_can_async_write+0x148>)
    18d2:	401a      	ands	r2, r3
    18d4:	2390      	movs	r3, #144	; 0x90
    18d6:	031b      	lsls	r3, r3, #12
    18d8:	4313      	orrs	r3, r2
    18da:	6043      	str	r3, [r0, #4]
    18dc:	e7c3      	b.n	1866 <_can_async_write+0x4a>
	} else if (msg->len <= 16) {
    18de:	2a10      	cmp	r2, #16
    18e0:	d807      	bhi.n	18f2 <_can_async_write+0xd6>
		f->T1.bit.DLC = 0xA;
    18e2:	6842      	ldr	r2, [r0, #4]
    18e4:	4b1f      	ldr	r3, [pc, #124]	; (1964 <_can_async_write+0x148>)
    18e6:	401a      	ands	r2, r3
    18e8:	23a0      	movs	r3, #160	; 0xa0
    18ea:	031b      	lsls	r3, r3, #12
    18ec:	4313      	orrs	r3, r2
    18ee:	6043      	str	r3, [r0, #4]
    18f0:	e7b9      	b.n	1866 <_can_async_write+0x4a>
	} else if (msg->len <= 20) {
    18f2:	2a14      	cmp	r2, #20
    18f4:	d807      	bhi.n	1906 <_can_async_write+0xea>
		f->T1.bit.DLC = 0xB;
    18f6:	6842      	ldr	r2, [r0, #4]
    18f8:	4b1a      	ldr	r3, [pc, #104]	; (1964 <_can_async_write+0x148>)
    18fa:	401a      	ands	r2, r3
    18fc:	23b0      	movs	r3, #176	; 0xb0
    18fe:	031b      	lsls	r3, r3, #12
    1900:	4313      	orrs	r3, r2
    1902:	6043      	str	r3, [r0, #4]
    1904:	e7af      	b.n	1866 <_can_async_write+0x4a>
	} else if (msg->len <= 24) {
    1906:	2a18      	cmp	r2, #24
    1908:	d807      	bhi.n	191a <_can_async_write+0xfe>
		f->T1.bit.DLC = 0xC;
    190a:	6842      	ldr	r2, [r0, #4]
    190c:	4b15      	ldr	r3, [pc, #84]	; (1964 <_can_async_write+0x148>)
    190e:	401a      	ands	r2, r3
    1910:	23c0      	movs	r3, #192	; 0xc0
    1912:	031b      	lsls	r3, r3, #12
    1914:	4313      	orrs	r3, r2
    1916:	6043      	str	r3, [r0, #4]
    1918:	e7a5      	b.n	1866 <_can_async_write+0x4a>
	} else if (msg->len <= 32) {
    191a:	2a20      	cmp	r2, #32
    191c:	d807      	bhi.n	192e <_can_async_write+0x112>
		f->T1.bit.DLC = 0xD;
    191e:	6842      	ldr	r2, [r0, #4]
    1920:	4b10      	ldr	r3, [pc, #64]	; (1964 <_can_async_write+0x148>)
    1922:	401a      	ands	r2, r3
    1924:	23d0      	movs	r3, #208	; 0xd0
    1926:	031b      	lsls	r3, r3, #12
    1928:	4313      	orrs	r3, r2
    192a:	6043      	str	r3, [r0, #4]
    192c:	e79b      	b.n	1866 <_can_async_write+0x4a>
	} else if (msg->len <= 48) {
    192e:	2a30      	cmp	r2, #48	; 0x30
    1930:	d807      	bhi.n	1942 <_can_async_write+0x126>
		f->T1.bit.DLC = 0xE;
    1932:	6842      	ldr	r2, [r0, #4]
    1934:	4b0b      	ldr	r3, [pc, #44]	; (1964 <_can_async_write+0x148>)
    1936:	401a      	ands	r2, r3
    1938:	23e0      	movs	r3, #224	; 0xe0
    193a:	031b      	lsls	r3, r3, #12
    193c:	4313      	orrs	r3, r2
    193e:	6043      	str	r3, [r0, #4]
    1940:	e791      	b.n	1866 <_can_async_write+0x4a>
	} else if (msg->len <= 64) {
    1942:	2a40      	cmp	r2, #64	; 0x40
    1944:	d900      	bls.n	1948 <_can_async_write+0x12c>
    1946:	e78e      	b.n	1866 <_can_async_write+0x4a>
		f->T1.bit.DLC = 0xF;
    1948:	6842      	ldr	r2, [r0, #4]
    194a:	23f0      	movs	r3, #240	; 0xf0
    194c:	031b      	lsls	r3, r3, #12
    194e:	4313      	orrs	r3, r2
    1950:	6043      	str	r3, [r0, #4]
    1952:	e788      	b.n	1866 <_can_async_write+0x4a>
		return ERR_NO_RESOURCE;
    1954:	201c      	movs	r0, #28
    1956:	4240      	negs	r0, r0
    1958:	e7aa      	b.n	18b0 <_can_async_write+0x94>
		return ERR_NO_RESOURCE;
    195a:	201c      	movs	r0, #28
    195c:	4240      	negs	r0, r0
    195e:	e7a7      	b.n	18b0 <_can_async_write+0x94>
    1960:	42001c00 	.word	0x42001c00
    1964:	fff0ffff 	.word	0xfff0ffff
    1968:	ffdfffff 	.word	0xffdfffff
    196c:	ffefffff 	.word	0xffefffff
    1970:	00004dd9 	.word	0x00004dd9
    1974:	20000224 	.word	0x20000224

00001978 <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    1978:	b510      	push	{r4, lr}
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    197a:	2900      	cmp	r1, #0
    197c:	d009      	beq.n	1992 <_can_async_set_irq_state+0x1a>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
	} else if (type == CAN_ASYNC_TX_CB) {
    197e:	2901      	cmp	r1, #1
    1980:	d00e      	beq.n	19a0 <_can_async_set_irq_state+0x28>
		hri_can_write_IE_TCE_bit(dev->hw, state);
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
	} else if (type == CAN_ASYNC_IRQ_CB) {
    1982:	2902      	cmp	r1, #2
    1984:	d10b      	bne.n	199e <_can_async_set_irq_state+0x26>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    1986:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
    1988:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
    198a:	490c      	ldr	r1, [pc, #48]	; (19bc <_can_async_set_irq_state+0x44>)
    198c:	400b      	ands	r3, r1
	((Can *)hw)->IE.reg = data;
    198e:	6553      	str	r3, [r2, #84]	; 0x54
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    1990:	e005      	b.n	199e <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    1992:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
    1994:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_RF0NE;
    1996:	2001      	movs	r0, #1
    1998:	4383      	bics	r3, r0
	tmp |= value << CAN_IE_RF0NE_Pos;
    199a:	431a      	orrs	r2, r3
	((Can *)hw)->IE.reg = tmp;
    199c:	654a      	str	r2, [r1, #84]	; 0x54
}
    199e:	bd10      	pop	{r4, pc}
		hri_can_write_IE_TCE_bit(dev->hw, state);
    19a0:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
    19a2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_TCE;
    19a4:	4c06      	ldr	r4, [pc, #24]	; (19c0 <_can_async_set_irq_state+0x48>)
    19a6:	4023      	ands	r3, r4
	tmp |= value << CAN_IE_TCE_Pos;
    19a8:	0252      	lsls	r2, r2, #9
    19aa:	431a      	orrs	r2, r3
	((Can *)hw)->IE.reg = tmp;
    19ac:	654a      	str	r2, [r1, #84]	; 0x54
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    19ae:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->TXBTIE.reg = data;
    19b0:	2101      	movs	r1, #1
    19b2:	4249      	negs	r1, r1
    19b4:	23e0      	movs	r3, #224	; 0xe0
    19b6:	50d1      	str	r1, [r2, r3]
    19b8:	e7f1      	b.n	199e <_can_async_set_irq_state+0x26>
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	00000201 	.word	0x00000201
    19c0:	fffffdff 	.word	0xfffffdff

000019c4 <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    19c4:	b530      	push	{r4, r5, lr}
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    19c6:	6984      	ldr	r4, [r0, #24]
    19c8:	0088      	lsls	r0, r1, #2
    19ca:	68e5      	ldr	r5, [r4, #12]
    19cc:	46ac      	mov	ip, r5
    19ce:	4460      	add	r0, ip
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    19d0:	6924      	ldr	r4, [r4, #16]
    19d2:	00c9      	lsls	r1, r1, #3
    19d4:	1861      	adds	r1, r4, r1

	if (fmt == CAN_FMT_STDID) {
    19d6:	2a00      	cmp	r2, #0
    19d8:	d11d      	bne.n	1a16 <_can_async_set_filter+0x52>
		if (filter == NULL) {
    19da:	2b00      	cmp	r3, #0
    19dc:	d019      	beq.n	1a12 <_can_async_set_filter+0x4e>
			sf->S0.val = 0;
			return ERR_NONE;
		}
		sf->S0.val       = filter->mask;
    19de:	685a      	ldr	r2, [r3, #4]
    19e0:	6002      	str	r2, [r0, #0]
		sf->S0.bit.SFID1 = filter->id;
    19e2:	681b      	ldr	r3, [r3, #0]
    19e4:	6802      	ldr	r2, [r0, #0]
    19e6:	055b      	lsls	r3, r3, #21
    19e8:	095b      	lsrs	r3, r3, #5
    19ea:	4917      	ldr	r1, [pc, #92]	; (1a48 <_can_async_set_filter+0x84>)
    19ec:	400a      	ands	r2, r1
    19ee:	4313      	orrs	r3, r2
    19f0:	6003      	str	r3, [r0, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    19f2:	6803      	ldr	r3, [r0, #0]
    19f4:	009b      	lsls	r3, r3, #2
    19f6:	089b      	lsrs	r3, r3, #2
    19f8:	2280      	movs	r2, #128	; 0x80
    19fa:	0612      	lsls	r2, r2, #24
    19fc:	431a      	orrs	r2, r3
    19fe:	6002      	str	r2, [r0, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    1a00:	6802      	ldr	r2, [r0, #0]
    1a02:	4b12      	ldr	r3, [pc, #72]	; (1a4c <_can_async_set_filter+0x88>)
    1a04:	401a      	ands	r2, r3
    1a06:	2380      	movs	r3, #128	; 0x80
    1a08:	051b      	lsls	r3, r3, #20
    1a0a:	4313      	orrs	r3, r2
    1a0c:	6003      	str	r3, [r0, #0]
		ef->F1.val      = filter->mask;
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
	}

	return ERR_NONE;
}
    1a0e:	2000      	movs	r0, #0
    1a10:	bd30      	pop	{r4, r5, pc}
			sf->S0.val = 0;
    1a12:	6003      	str	r3, [r0, #0]
			return ERR_NONE;
    1a14:	e7fb      	b.n	1a0e <_can_async_set_filter+0x4a>
	} else if (fmt == CAN_FMT_EXTID) {
    1a16:	2a01      	cmp	r2, #1
    1a18:	d1f9      	bne.n	1a0e <_can_async_set_filter+0x4a>
		if (filter == NULL) {
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d012      	beq.n	1a44 <_can_async_set_filter+0x80>
		ef->F0.val      = filter->id;
    1a1e:	681a      	ldr	r2, [r3, #0]
    1a20:	600a      	str	r2, [r1, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    1a22:	680a      	ldr	r2, [r1, #0]
    1a24:	00d2      	lsls	r2, r2, #3
    1a26:	08d2      	lsrs	r2, r2, #3
    1a28:	2080      	movs	r0, #128	; 0x80
    1a2a:	0580      	lsls	r0, r0, #22
    1a2c:	4310      	orrs	r0, r2
    1a2e:	6008      	str	r0, [r1, #0]
		ef->F1.val      = filter->mask;
    1a30:	685b      	ldr	r3, [r3, #4]
    1a32:	604b      	str	r3, [r1, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    1a34:	684b      	ldr	r3, [r1, #4]
    1a36:	009b      	lsls	r3, r3, #2
    1a38:	089b      	lsrs	r3, r3, #2
    1a3a:	2280      	movs	r2, #128	; 0x80
    1a3c:	0612      	lsls	r2, r2, #24
    1a3e:	431a      	orrs	r2, r3
    1a40:	604a      	str	r2, [r1, #4]
    1a42:	e7e4      	b.n	1a0e <_can_async_set_filter+0x4a>
			ef->F0.val = 0;
    1a44:	600b      	str	r3, [r1, #0]
			return ERR_NONE;
    1a46:	e7e2      	b.n	1a0e <_can_async_set_filter+0x4a>
    1a48:	f800ffff 	.word	0xf800ffff
    1a4c:	c7ffffff 	.word	0xc7ffffff

00001a50 <CAN0_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN0_Handler(void)
{
    1a50:	b570      	push	{r4, r5, r6, lr}
	struct _can_async_device *dev = _can0_dev;
    1a52:	4b1a      	ldr	r3, [pc, #104]	; (1abc <CAN0_Handler+0x6c>)
    1a54:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    1a56:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    1a58:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    1a5a:	07e3      	lsls	r3, r4, #31
    1a5c:	d414      	bmi.n	1a88 <CAN0_Handler+0x38>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    1a5e:	05a3      	lsls	r3, r4, #22
    1a60:	d416      	bmi.n	1a90 <CAN0_Handler+0x40>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    1a62:	01a3      	lsls	r3, r4, #6
    1a64:	d418      	bmi.n	1a98 <CAN0_Handler+0x48>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    1a66:	01e3      	lsls	r3, r4, #7
    1a68:	d41b      	bmi.n	1aa2 <CAN0_Handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    1a6a:	0223      	lsls	r3, r4, #8
    1a6c:	d507      	bpl.n	1a7e <CAN0_Handler+0x2e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1a6e:	68eb      	ldr	r3, [r5, #12]
    1a70:	682a      	ldr	r2, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    1a72:	6c52      	ldr	r2, [r2, #68]	; 0x44
    1a74:	0692      	lsls	r2, r2, #26
    1a76:	d519      	bpl.n	1aac <CAN0_Handler+0x5c>
    1a78:	2102      	movs	r1, #2
    1a7a:	0028      	movs	r0, r5
    1a7c:	4798      	blx	r3
	}

	if (ir & CAN_IR_RF0L) {
    1a7e:	0723      	lsls	r3, r4, #28
    1a80:	d416      	bmi.n	1ab0 <CAN0_Handler+0x60>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    1a82:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    1a84:	651c      	str	r4, [r3, #80]	; 0x50
}
    1a86:	bd70      	pop	{r4, r5, r6, pc}
		dev->cb.rx_done(dev);
    1a88:	0028      	movs	r0, r5
    1a8a:	68ab      	ldr	r3, [r5, #8]
    1a8c:	4798      	blx	r3
    1a8e:	e7e6      	b.n	1a5e <CAN0_Handler+0xe>
		dev->cb.tx_done(dev);
    1a90:	0028      	movs	r0, r5
    1a92:	686b      	ldr	r3, [r5, #4]
    1a94:	4798      	blx	r3
    1a96:	e7e4      	b.n	1a62 <CAN0_Handler+0x12>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    1a98:	2103      	movs	r1, #3
    1a9a:	0028      	movs	r0, r5
    1a9c:	68eb      	ldr	r3, [r5, #12]
    1a9e:	4798      	blx	r3
    1aa0:	e7e1      	b.n	1a66 <CAN0_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    1aa2:	2100      	movs	r1, #0
    1aa4:	0028      	movs	r0, r5
    1aa6:	68eb      	ldr	r3, [r5, #12]
    1aa8:	4798      	blx	r3
    1aaa:	e7de      	b.n	1a6a <CAN0_Handler+0x1a>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1aac:	2101      	movs	r1, #1
    1aae:	e7e4      	b.n	1a7a <CAN0_Handler+0x2a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    1ab0:	2104      	movs	r1, #4
    1ab2:	0028      	movs	r0, r5
    1ab4:	68eb      	ldr	r3, [r5, #12]
    1ab6:	4798      	blx	r3
    1ab8:	e7e3      	b.n	1a82 <CAN0_Handler+0x32>
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	200000b0 	.word	0x200000b0

00001ac0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    1ac0:	0103      	lsls	r3, r0, #4
    1ac2:	1a1b      	subs	r3, r3, r0
    1ac4:	011a      	lsls	r2, r3, #4
    1ac6:	2064      	movs	r0, #100	; 0x64
    1ac8:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1aca:	4770      	bx	lr

00001acc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1acc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1ace:	4a09      	ldr	r2, [pc, #36]	; (1af4 <_init_chip+0x28>)
    1ad0:	6853      	ldr	r3, [r2, #4]
    1ad2:	2106      	movs	r1, #6
    1ad4:	430b      	orrs	r3, r1
    1ad6:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1ad8:	4b07      	ldr	r3, [pc, #28]	; (1af8 <_init_chip+0x2c>)
    1ada:	4798      	blx	r3
	_oscctrl_init_sources();
    1adc:	4b07      	ldr	r3, [pc, #28]	; (1afc <_init_chip+0x30>)
    1ade:	4798      	blx	r3
	_mclk_init();
    1ae0:	4b07      	ldr	r3, [pc, #28]	; (1b00 <_init_chip+0x34>)
    1ae2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1ae4:	4b07      	ldr	r3, [pc, #28]	; (1b04 <_init_chip+0x38>)
    1ae6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1ae8:	20ff      	movs	r0, #255	; 0xff
    1aea:	4b07      	ldr	r3, [pc, #28]	; (1b08 <_init_chip+0x3c>)
    1aec:	4798      	blx	r3

	_div_init();
    1aee:	4b07      	ldr	r3, [pc, #28]	; (1b0c <_init_chip+0x40>)
    1af0:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    1af2:	bd10      	pop	{r4, pc}
    1af4:	41004000 	.word	0x41004000
    1af8:	00001c41 	.word	0x00001c41
    1afc:	00001c65 	.word	0x00001c65
    1b00:	00001c35 	.word	0x00001c35
    1b04:	00001ca1 	.word	0x00001ca1
    1b08:	00001bc9 	.word	0x00001bc9
    1b0c:	00001b11 	.word	0x00001b11

00001b10 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
    1b10:	2290      	movs	r2, #144	; 0x90
    1b12:	05d2      	lsls	r2, r2, #23
    1b14:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
    1b16:	2102      	movs	r1, #2
    1b18:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
    1b1a:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
    1b1c:	4770      	bx	lr

00001b1e <__aeabi_idiv>:

/**
 * \brief Do signed division
 */
int32_t __aeabi_idiv(int32_t numerator, int32_t denominator)
{
    1b1e:	b510      	push	{r4, lr}
    1b20:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1b22:	f3ef 8310 	mrs	r3, PRIMASK
	int32_t res;
	_DIVAS_CRITICAL_ENTER();
    1b26:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1b28:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    1b2a:	2390      	movs	r3, #144	; 0x90
    1b2c:	05db      	lsls	r3, r3, #23
    1b2e:	781a      	ldrb	r2, [r3, #0]
    1b30:	2401      	movs	r4, #1
    1b32:	4322      	orrs	r2, r4
    1b34:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    1b36:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    1b38:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    1b3a:	2390      	movs	r3, #144	; 0x90
    1b3c:	05db      	lsls	r3, r3, #23
    1b3e:	791b      	ldrb	r3, [r3, #4]
    1b40:	07db      	lsls	r3, r3, #31
    1b42:	d4fa      	bmi.n	1b3a <__aeabi_idiv+0x1c>
	_divas_div(1, numerator, denominator);
	res = _divas_result32();
    1b44:	2390      	movs	r3, #144	; 0x90
    1b46:	05db      	lsls	r3, r3, #23
    1b48:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
    1b4a:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1b4c:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    1b50:	b002      	add	sp, #8
    1b52:	bd10      	pop	{r4, pc}

00001b54 <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
    1b54:	b510      	push	{r4, lr}
    1b56:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1b58:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
    1b5c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1b5e:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    1b60:	2390      	movs	r3, #144	; 0x90
    1b62:	05db      	lsls	r3, r3, #23
    1b64:	781a      	ldrb	r2, [r3, #0]
    1b66:	2401      	movs	r4, #1
    1b68:	43a2      	bics	r2, r4
    1b6a:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    1b6c:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    1b6e:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    1b70:	2390      	movs	r3, #144	; 0x90
    1b72:	05db      	lsls	r3, r3, #23
    1b74:	791b      	ldrb	r3, [r3, #4]
    1b76:	07db      	lsls	r3, r3, #31
    1b78:	d4fa      	bmi.n	1b70 <__aeabi_uidiv+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
    1b7a:	2390      	movs	r3, #144	; 0x90
    1b7c:	05db      	lsls	r3, r3, #23
    1b7e:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
    1b80:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1b82:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    1b86:	b002      	add	sp, #8
    1b88:	bd10      	pop	{r4, pc}
	...

00001b8c <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
    1b8c:	b510      	push	{r4, lr}
    1b8e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1b90:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
    1b94:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1b96:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    1b98:	2390      	movs	r3, #144	; 0x90
    1b9a:	05db      	lsls	r3, r3, #23
    1b9c:	781a      	ldrb	r2, [r3, #0]
    1b9e:	2401      	movs	r4, #1
    1ba0:	43a2      	bics	r2, r4
    1ba2:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    1ba4:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    1ba6:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    1ba8:	2390      	movs	r3, #144	; 0x90
    1baa:	05db      	lsls	r3, r3, #23
    1bac:	791b      	ldrb	r3, [r3, #4]
    1bae:	07db      	lsls	r3, r3, #31
    1bb0:	d4fa      	bmi.n	1ba8 <__aeabi_uidivmod+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
    1bb2:	4b04      	ldr	r3, [pc, #16]	; (1bc4 <__aeabi_uidivmod+0x38>)
    1bb4:	6818      	ldr	r0, [r3, #0]
    1bb6:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
    1bb8:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1bba:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    1bbe:	b002      	add	sp, #8
    1bc0:	bd10      	pop	{r4, pc}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	48000010 	.word	0x48000010

00001bc8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1bc8:	07c3      	lsls	r3, r0, #31
    1bca:	d507      	bpl.n	1bdc <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bcc:	4a13      	ldr	r2, [pc, #76]	; (1c1c <_gclk_init_generators_by_fref+0x54>)
    1bce:	4b14      	ldr	r3, [pc, #80]	; (1c20 <_gclk_init_generators_by_fref+0x58>)
    1bd0:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bd2:	4b13      	ldr	r3, [pc, #76]	; (1c20 <_gclk_init_generators_by_fref+0x58>)
    1bd4:	685a      	ldr	r2, [r3, #4]
    1bd6:	4b13      	ldr	r3, [pc, #76]	; (1c24 <_gclk_init_generators_by_fref+0x5c>)
    1bd8:	421a      	tst	r2, r3
    1bda:	d1fa      	bne.n	1bd2 <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1bdc:	0783      	lsls	r3, r0, #30
    1bde:	d507      	bpl.n	1bf0 <_gclk_init_generators_by_fref+0x28>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1be0:	4a11      	ldr	r2, [pc, #68]	; (1c28 <_gclk_init_generators_by_fref+0x60>)
    1be2:	4b0f      	ldr	r3, [pc, #60]	; (1c20 <_gclk_init_generators_by_fref+0x58>)
    1be4:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1be6:	4b0e      	ldr	r3, [pc, #56]	; (1c20 <_gclk_init_generators_by_fref+0x58>)
    1be8:	685a      	ldr	r2, [r3, #4]
    1bea:	4b0e      	ldr	r3, [pc, #56]	; (1c24 <_gclk_init_generators_by_fref+0x5c>)
    1bec:	421a      	tst	r2, r3
    1bee:	d1fa      	bne.n	1be6 <_gclk_init_generators_by_fref+0x1e>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1bf0:	0743      	lsls	r3, r0, #29
    1bf2:	d507      	bpl.n	1c04 <_gclk_init_generators_by_fref+0x3c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bf4:	4a0d      	ldr	r2, [pc, #52]	; (1c2c <_gclk_init_generators_by_fref+0x64>)
    1bf6:	4b0a      	ldr	r3, [pc, #40]	; (1c20 <_gclk_init_generators_by_fref+0x58>)
    1bf8:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bfa:	4b09      	ldr	r3, [pc, #36]	; (1c20 <_gclk_init_generators_by_fref+0x58>)
    1bfc:	685a      	ldr	r2, [r3, #4]
    1bfe:	4b09      	ldr	r3, [pc, #36]	; (1c24 <_gclk_init_generators_by_fref+0x5c>)
    1c00:	421a      	tst	r2, r3
    1c02:	d1fa      	bne.n	1bfa <_gclk_init_generators_by_fref+0x32>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1c04:	0703      	lsls	r3, r0, #28
    1c06:	d507      	bpl.n	1c18 <_gclk_init_generators_by_fref+0x50>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c08:	4a09      	ldr	r2, [pc, #36]	; (1c30 <_gclk_init_generators_by_fref+0x68>)
    1c0a:	4b05      	ldr	r3, [pc, #20]	; (1c20 <_gclk_init_generators_by_fref+0x58>)
    1c0c:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c0e:	4b04      	ldr	r3, [pc, #16]	; (1c20 <_gclk_init_generators_by_fref+0x58>)
    1c10:	685a      	ldr	r2, [r3, #4]
    1c12:	4b04      	ldr	r3, [pc, #16]	; (1c24 <_gclk_init_generators_by_fref+0x5c>)
    1c14:	421a      	tst	r2, r3
    1c16:	d1fa      	bne.n	1c0e <_gclk_init_generators_by_fref+0x46>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    1c18:	4770      	bx	lr
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	00020106 	.word	0x00020106
    1c20:	40001c00 	.word	0x40001c00
    1c24:	000007fd 	.word	0x000007fd
    1c28:	00010107 	.word	0x00010107
    1c2c:	000c0106 	.word	0x000c0106
    1c30:	00780106 	.word	0x00780106

00001c34 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1c34:	2201      	movs	r2, #1
    1c36:	4b01      	ldr	r3, [pc, #4]	; (1c3c <_mclk_init+0x8>)
    1c38:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    1c3a:	4770      	bx	lr
    1c3c:	40000800 	.word	0x40000800

00001c40 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1c40:	4a07      	ldr	r2, [pc, #28]	; (1c60 <_osc32kctrl_init_sources+0x20>)
    1c42:	238e      	movs	r3, #142	; 0x8e
    1c44:	8293      	strh	r3, [r2, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1c46:	2300      	movs	r3, #0
    1c48:	7593      	strb	r3, [r2, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1c4a:	75d3      	strb	r3, [r2, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1c4c:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    1c4e:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1c50:	021b      	lsls	r3, r3, #8
    1c52:	21f8      	movs	r1, #248	; 0xf8
    1c54:	0149      	lsls	r1, r1, #5
    1c56:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1c58:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1c5a:	2301      	movs	r3, #1
    1c5c:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1c5e:	4770      	bx	lr
    1c60:	40001400 	.word	0x40001400

00001c64 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    1c64:	4b0d      	ldr	r3, [pc, #52]	; (1c9c <_oscctrl_init_sources+0x38>)
    1c66:	2202      	movs	r2, #2
    1c68:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    1c6a:	2200      	movs	r2, #0
    1c6c:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
    1c6e:	4b0b      	ldr	r3, [pc, #44]	; (1c9c <_oscctrl_init_sources+0x38>)
    1c70:	699b      	ldr	r3, [r3, #24]
    1c72:	075b      	lsls	r3, r3, #29
    1c74:	d4fb      	bmi.n	1c6e <_oscctrl_init_sources+0xa>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    1c76:	4b09      	ldr	r3, [pc, #36]	; (1c9c <_oscctrl_init_sources+0x38>)
    1c78:	699b      	ldr	r3, [r3, #24]
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    1c7a:	075b      	lsls	r3, r3, #29
    1c7c:	d4fb      	bmi.n	1c76 <_oscctrl_init_sources+0x12>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    1c7e:	2207      	movs	r2, #7
    1c80:	4b06      	ldr	r3, [pc, #24]	; (1c9c <_oscctrl_init_sources+0x38>)
    1c82:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    1c84:	4b05      	ldr	r3, [pc, #20]	; (1c9c <_oscctrl_init_sources+0x38>)
    1c86:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    1c88:	06db      	lsls	r3, r3, #27
    1c8a:	d5fb      	bpl.n	1c84 <_oscctrl_init_sources+0x20>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
    1c8c:	4a03      	ldr	r2, [pc, #12]	; (1c9c <_oscctrl_init_sources+0x38>)
    1c8e:	7d13      	ldrb	r3, [r2, #20]
    1c90:	2180      	movs	r1, #128	; 0x80
    1c92:	4249      	negs	r1, r1
    1c94:	430b      	orrs	r3, r1
    1c96:	b2db      	uxtb	r3, r3
    1c98:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1c9a:	4770      	bx	lr
    1c9c:	40001000 	.word	0x40001000

00001ca0 <_oscctrl_init_referenced_generators>:
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLRATIO.reg = data;
    1ca0:	4a19      	ldr	r2, [pc, #100]	; (1d08 <_oscctrl_init_referenced_generators+0x68>)
    1ca2:	4b1a      	ldr	r3, [pc, #104]	; (1d0c <_oscctrl_init_referenced_generators+0x6c>)
    1ca4:	621a      	str	r2, [r3, #32]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    1ca6:	232c      	movs	r3, #44	; 0x2c
    1ca8:	4a18      	ldr	r2, [pc, #96]	; (1d0c <_oscctrl_init_referenced_generators+0x6c>)
    1caa:	5cd2      	ldrb	r2, [r2, r3]
    1cac:	3b1e      	subs	r3, #30
    1cae:	421a      	tst	r2, r3
    1cb0:	d1f9      	bne.n	1ca6 <_oscctrl_init_referenced_generators+0x6>
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLCTRLB.reg = data;
    1cb2:	4b16      	ldr	r3, [pc, #88]	; (1d0c <_oscctrl_init_referenced_generators+0x6c>)
    1cb4:	2200      	movs	r2, #0
    1cb6:	625a      	str	r2, [r3, #36]	; 0x24
}

static inline void hri_oscctrl_write_DPLLPRESC_reg(const void *const hw, hri_oscctrl_dpllpresc_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLPRESC.reg = data;
    1cb8:	2128      	movs	r1, #40	; 0x28
    1cba:	545a      	strb	r2, [r3, r1]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    1cbc:	232c      	movs	r3, #44	; 0x2c
    1cbe:	4a13      	ldr	r2, [pc, #76]	; (1d0c <_oscctrl_init_referenced_generators+0x6c>)
    1cc0:	5cd2      	ldrb	r2, [r2, r3]
    1cc2:	3b1e      	subs	r3, #30
    1cc4:	421a      	tst	r2, r3
    1cc6:	d1f9      	bne.n	1cbc <_oscctrl_init_referenced_generators+0x1c>
	((Oscctrl *)hw)->DPLLCTRLA.reg = data;
    1cc8:	2202      	movs	r2, #2
    1cca:	4b10      	ldr	r3, [pc, #64]	; (1d0c <_oscctrl_init_referenced_generators+0x6c>)
    1ccc:	771a      	strb	r2, [r3, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    1cce:	232c      	movs	r3, #44	; 0x2c
    1cd0:	4a0e      	ldr	r2, [pc, #56]	; (1d0c <_oscctrl_init_referenced_generators+0x6c>)
    1cd2:	5cd3      	ldrb	r3, [r2, r3]
    1cd4:	079b      	lsls	r3, r3, #30
    1cd6:	d4fa      	bmi.n	1cce <_oscctrl_init_referenced_generators+0x2e>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK) >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    1cd8:	2330      	movs	r3, #48	; 0x30
    1cda:	4a0c      	ldr	r2, [pc, #48]	; (1d0c <_oscctrl_init_referenced_generators+0x6c>)
    1cdc:	5cd3      	ldrb	r3, [r2, r3]
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
    1cde:	07db      	lsls	r3, r3, #31
    1ce0:	d403      	bmi.n	1cea <_oscctrl_init_referenced_generators+0x4a>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    1ce2:	2330      	movs	r3, #48	; 0x30
    1ce4:	5cd3      	ldrb	r3, [r2, r3]
    1ce6:	079b      	lsls	r3, r3, #30
    1ce8:	d5f6      	bpl.n	1cd8 <_oscctrl_init_referenced_generators+0x38>
	((Oscctrl *)hw)->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
    1cea:	4a08      	ldr	r2, [pc, #32]	; (1d0c <_oscctrl_init_referenced_generators+0x6c>)
    1cec:	7f13      	ldrb	r3, [r2, #28]
    1cee:	2180      	movs	r1, #128	; 0x80
    1cf0:	4249      	negs	r1, r1
    1cf2:	430b      	orrs	r3, r1
    1cf4:	b2db      	uxtb	r3, r3
    1cf6:	7713      	strb	r3, [r2, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    1cf8:	232c      	movs	r3, #44	; 0x2c
    1cfa:	4a04      	ldr	r2, [pc, #16]	; (1d0c <_oscctrl_init_referenced_generators+0x6c>)
    1cfc:	5cd2      	ldrb	r2, [r2, r3]
    1cfe:	3b1e      	subs	r3, #30
    1d00:	421a      	tst	r2, r3
    1d02:	d1f9      	bne.n	1cf8 <_oscctrl_init_referenced_generators+0x58>
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1d04:	4770      	bx	lr
    1d06:	46c0      	nop			; (mov r8, r8)
    1d08:	000d05b7 	.word	0x000d05b7
    1d0c:	40001000 	.word	0x40001000

00001d10 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
    1d10:	b510      	push	{r4, lr}
    1d12:	0004      	movs	r4, r0
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1d14:	68c3      	ldr	r3, [r0, #12]
    1d16:	899b      	ldrh	r3, [r3, #12]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1d18:	05db      	lsls	r3, r3, #23
    1d1a:	d507      	bpl.n	1d2c <_rtc_timer_interrupt_handler+0x1c>
		if (dev->timer_cb.period_expired) {
    1d1c:	6803      	ldr	r3, [r0, #0]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d000      	beq.n	1d24 <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
    1d22:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1d24:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1d26:	2280      	movs	r2, #128	; 0x80
    1d28:	0052      	lsls	r2, r2, #1
    1d2a:	819a      	strh	r2, [r3, #12]
	}
}
    1d2c:	bd10      	pop	{r4, pc}
	...

00001d30 <_timer_init>:
{
    1d30:	b570      	push	{r4, r5, r6, lr}
    1d32:	0004      	movs	r4, r0
    1d34:	000d      	movs	r5, r1
	ASSERT(dev);
    1d36:	1e43      	subs	r3, r0, #1
    1d38:	4198      	sbcs	r0, r3
    1d3a:	b2c0      	uxtb	r0, r0
    1d3c:	2230      	movs	r2, #48	; 0x30
    1d3e:	4911      	ldr	r1, [pc, #68]	; (1d84 <_timer_init+0x54>)
    1d40:	4b11      	ldr	r3, [pc, #68]	; (1d88 <_timer_init+0x58>)
    1d42:	4798      	blx	r3
	dev->hw = hw;
    1d44:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1d46:	2301      	movs	r3, #1
    1d48:	802b      	strh	r3, [r5, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d4a:	692a      	ldr	r2, [r5, #16]
    1d4c:	4b0f      	ldr	r3, [pc, #60]	; (1d8c <_timer_init+0x5c>)
    1d4e:	421a      	tst	r2, r3
    1d50:	d1fb      	bne.n	1d4a <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1d52:	68e3      	ldr	r3, [r4, #12]
    1d54:	691a      	ldr	r2, [r3, #16]
    1d56:	07d2      	lsls	r2, r2, #31
    1d58:	d4fc      	bmi.n	1d54 <_timer_init+0x24>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1d5a:	4a0d      	ldr	r2, [pc, #52]	; (1d90 <_timer_init+0x60>)
    1d5c:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d5e:	6919      	ldr	r1, [r3, #16]
    1d60:	4a0a      	ldr	r2, [pc, #40]	; (1d8c <_timer_init+0x5c>)
    1d62:	4211      	tst	r1, r2
    1d64:	d1fb      	bne.n	1d5e <_timer_init+0x2e>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1d66:	68e2      	ldr	r2, [r4, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1d68:	2320      	movs	r3, #32
    1d6a:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d6c:	6913      	ldr	r3, [r2, #16]
    1d6e:	069b      	lsls	r3, r3, #26
    1d70:	d4fc      	bmi.n	1d6c <_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1d72:	2380      	movs	r3, #128	; 0x80
    1d74:	005b      	lsls	r3, r3, #1
    1d76:	68e2      	ldr	r2, [r4, #12]
    1d78:	8153      	strh	r3, [r2, #10]
	_rtc_dev = dev;
    1d7a:	4b06      	ldr	r3, [pc, #24]	; (1d94 <_timer_init+0x64>)
    1d7c:	601c      	str	r4, [r3, #0]
}
    1d7e:	2000      	movs	r0, #0
    1d80:	bd70      	pop	{r4, r5, r6, pc}
    1d82:	46c0      	nop			; (mov r8, r8)
    1d84:	00005d1c 	.word	0x00005d1c
    1d88:	0000159d 	.word	0x0000159d
    1d8c:	00008003 	.word	0x00008003
    1d90:	ffff8080 	.word	0xffff8080
    1d94:	200000dc 	.word	0x200000dc

00001d98 <_timer_start>:
{
    1d98:	b510      	push	{r4, lr}
    1d9a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    1d9c:	d020      	beq.n	1de0 <_timer_start+0x48>
    1d9e:	68c3      	ldr	r3, [r0, #12]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d01b      	beq.n	1ddc <_timer_start+0x44>
    1da4:	2001      	movs	r0, #1
    1da6:	225c      	movs	r2, #92	; 0x5c
    1da8:	490e      	ldr	r1, [pc, #56]	; (1de4 <_timer_start+0x4c>)
    1daa:	4b0f      	ldr	r3, [pc, #60]	; (1de8 <_timer_start+0x50>)
    1dac:	4798      	blx	r3
    1dae:	2204      	movs	r2, #4
    1db0:	4b0e      	ldr	r3, [pc, #56]	; (1dec <_timer_start+0x54>)
    1db2:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    1db4:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    1db6:	2300      	movs	r3, #0
    1db8:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1dba:	6913      	ldr	r3, [r2, #16]
    1dbc:	071b      	lsls	r3, r3, #28
    1dbe:	d4fc      	bmi.n	1dba <_timer_start+0x22>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    1dc0:	68e3      	ldr	r3, [r4, #12]
    1dc2:	691a      	ldr	r2, [r3, #16]
    1dc4:	0712      	lsls	r2, r2, #28
    1dc6:	d4fc      	bmi.n	1dc2 <_timer_start+0x2a>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    1dc8:	881a      	ldrh	r2, [r3, #0]
    1dca:	2102      	movs	r1, #2
    1dcc:	430a      	orrs	r2, r1
    1dce:	b292      	uxth	r2, r2
    1dd0:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1dd2:	6919      	ldr	r1, [r3, #16]
    1dd4:	4a06      	ldr	r2, [pc, #24]	; (1df0 <_timer_start+0x58>)
    1dd6:	4211      	tst	r1, r2
    1dd8:	d1fb      	bne.n	1dd2 <_timer_start+0x3a>
}
    1dda:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    1ddc:	2000      	movs	r0, #0
    1dde:	e7e2      	b.n	1da6 <_timer_start+0xe>
    1de0:	2000      	movs	r0, #0
    1de2:	e7e0      	b.n	1da6 <_timer_start+0xe>
    1de4:	00005d1c 	.word	0x00005d1c
    1de8:	0000159d 	.word	0x0000159d
    1dec:	e000e100 	.word	0xe000e100
    1df0:	00008003 	.word	0x00008003

00001df4 <_timer_is_started>:
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    1df4:	68c1      	ldr	r1, [r0, #12]
    1df6:	690a      	ldr	r2, [r1, #16]
    1df8:	4b03      	ldr	r3, [pc, #12]	; (1e08 <_timer_is_started+0x14>)
    1dfa:	421a      	tst	r2, r3
    1dfc:	d1fb      	bne.n	1df6 <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    1dfe:	880b      	ldrh	r3, [r1, #0]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    1e00:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    1e02:	2001      	movs	r0, #1
    1e04:	4018      	ands	r0, r3
}
    1e06:	4770      	bx	lr
    1e08:	00008003 	.word	0x00008003

00001e0c <_timer_set_irq>:
}
    1e0c:	4770      	bx	lr

00001e0e <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1e0e:	2000      	movs	r0, #0
    1e10:	4770      	bx	lr
	...

00001e14 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1e14:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1e16:	4b02      	ldr	r3, [pc, #8]	; (1e20 <RTC_Handler+0xc>)
    1e18:	6818      	ldr	r0, [r3, #0]
    1e1a:	4b02      	ldr	r3, [pc, #8]	; (1e24 <RTC_Handler+0x10>)
    1e1c:	4798      	blx	r3
}
    1e1e:	bd10      	pop	{r4, pc}
    1e20:	200000dc 	.word	0x200000dc
    1e24:	00001d11 	.word	0x00001d11

00001e28 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1e28:	4b02      	ldr	r3, [pc, #8]	; (1e34 <_sercom_get_hardware_index+0xc>)
    1e2a:	469c      	mov	ip, r3
    1e2c:	4460      	add	r0, ip
    1e2e:	0a80      	lsrs	r0, r0, #10
    1e30:	b2c0      	uxtb	r0, r0
}
    1e32:	4770      	bx	lr
    1e34:	bdfffc00 	.word	0xbdfffc00

00001e38 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1e38:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1e3a:	07db      	lsls	r3, r3, #31
    1e3c:	d408      	bmi.n	1e50 <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1e3e:	6803      	ldr	r3, [r0, #0]
    1e40:	2202      	movs	r2, #2
    1e42:	4313      	orrs	r3, r2
    1e44:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e46:	69c3      	ldr	r3, [r0, #28]
    1e48:	079b      	lsls	r3, r3, #30
    1e4a:	d1fc      	bne.n	1e46 <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1e4c:	2000      	movs	r0, #0
}
    1e4e:	4770      	bx	lr
		return ERR_BUSY;
    1e50:	2004      	movs	r0, #4
    1e52:	4240      	negs	r0, r0
    1e54:	e7fb      	b.n	1e4e <_spi_sync_enable+0x16>
	...

00001e58 <_get_sercom_index>:
{
    1e58:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1e5a:	4b0b      	ldr	r3, [pc, #44]	; (1e88 <_get_sercom_index+0x30>)
    1e5c:	4798      	blx	r3
    1e5e:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1e60:	2000      	movs	r0, #0
    1e62:	2800      	cmp	r0, #0
    1e64:	d006      	beq.n	1e74 <_get_sercom_index+0x1c>
	ASSERT(false);
    1e66:	4a09      	ldr	r2, [pc, #36]	; (1e8c <_get_sercom_index+0x34>)
    1e68:	4909      	ldr	r1, [pc, #36]	; (1e90 <_get_sercom_index+0x38>)
    1e6a:	2000      	movs	r0, #0
    1e6c:	4b09      	ldr	r3, [pc, #36]	; (1e94 <_get_sercom_index+0x3c>)
    1e6e:	4798      	blx	r3
	return 0;
    1e70:	2000      	movs	r0, #0
}
    1e72:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1e74:	0083      	lsls	r3, r0, #2
    1e76:	181b      	adds	r3, r3, r0
    1e78:	0099      	lsls	r1, r3, #2
    1e7a:	4b07      	ldr	r3, [pc, #28]	; (1e98 <_get_sercom_index+0x40>)
    1e7c:	5ccb      	ldrb	r3, [r1, r3]
    1e7e:	429a      	cmp	r2, r3
    1e80:	d0f7      	beq.n	1e72 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1e82:	3001      	adds	r0, #1
    1e84:	b2c0      	uxtb	r0, r0
    1e86:	e7ec      	b.n	1e62 <_get_sercom_index+0xa>
    1e88:	00001e29 	.word	0x00001e29
    1e8c:	0000023a 	.word	0x0000023a
    1e90:	00005d84 	.word	0x00005d84
    1e94:	0000159d 	.word	0x0000159d
    1e98:	00005d34 	.word	0x00005d34

00001e9c <_usart_init>:
{
    1e9c:	b570      	push	{r4, r5, r6, lr}
    1e9e:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1ea0:	4b38      	ldr	r3, [pc, #224]	; (1f84 <_usart_init+0xe8>)
    1ea2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1ea4:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1ea6:	07db      	lsls	r3, r3, #31
    1ea8:	d41d      	bmi.n	1ee6 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1eaa:	0083      	lsls	r3, r0, #2
    1eac:	181b      	adds	r3, r3, r0
    1eae:	009a      	lsls	r2, r3, #2
    1eb0:	4b35      	ldr	r3, [pc, #212]	; (1f88 <_usart_init+0xec>)
    1eb2:	189b      	adds	r3, r3, r2
    1eb4:	685a      	ldr	r2, [r3, #4]
    1eb6:	231c      	movs	r3, #28
    1eb8:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1eba:	69e3      	ldr	r3, [r4, #28]
    1ebc:	079b      	lsls	r3, r3, #30
    1ebe:	d1fc      	bne.n	1eba <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1ec0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1ec2:	079b      	lsls	r3, r3, #30
    1ec4:	d509      	bpl.n	1eda <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1ec6:	6823      	ldr	r3, [r4, #0]
    1ec8:	2102      	movs	r1, #2
    1eca:	438b      	bics	r3, r1
    1ecc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1ece:	69e3      	ldr	r3, [r4, #28]
    1ed0:	079b      	lsls	r3, r3, #30
    1ed2:	d1fc      	bne.n	1ece <_usart_init+0x32>
    1ed4:	69e3      	ldr	r3, [r4, #28]
    1ed6:	079b      	lsls	r3, r3, #30
    1ed8:	d4fc      	bmi.n	1ed4 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1eda:	2301      	movs	r3, #1
    1edc:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1ede:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1ee0:	69e3      	ldr	r3, [r4, #28]
    1ee2:	079b      	lsls	r3, r3, #30
    1ee4:	d1fc      	bne.n	1ee0 <_usart_init+0x44>
    1ee6:	69e3      	ldr	r3, [r4, #28]
    1ee8:	07db      	lsls	r3, r3, #31
    1eea:	d4fc      	bmi.n	1ee6 <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1eec:	0083      	lsls	r3, r0, #2
    1eee:	181b      	adds	r3, r3, r0
    1ef0:	009a      	lsls	r2, r3, #2
    1ef2:	4b25      	ldr	r3, [pc, #148]	; (1f88 <_usart_init+0xec>)
    1ef4:	189b      	adds	r3, r3, r2
    1ef6:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1ef8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1efa:	69e3      	ldr	r3, [r4, #28]
    1efc:	079b      	lsls	r3, r3, #30
    1efe:	d1fc      	bne.n	1efa <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1f00:	0083      	lsls	r3, r0, #2
    1f02:	181b      	adds	r3, r3, r0
    1f04:	009a      	lsls	r2, r3, #2
    1f06:	4b20      	ldr	r3, [pc, #128]	; (1f88 <_usart_init+0xec>)
    1f08:	189b      	adds	r3, r3, r2
    1f0a:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1f0c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1f0e:	69e3      	ldr	r3, [r4, #28]
    1f10:	075b      	lsls	r3, r3, #29
    1f12:	d1fc      	bne.n	1f0e <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1f14:	0083      	lsls	r3, r0, #2
    1f16:	181b      	adds	r3, r3, r0
    1f18:	009a      	lsls	r2, r3, #2
    1f1a:	4b1b      	ldr	r3, [pc, #108]	; (1f88 <_usart_init+0xec>)
    1f1c:	189b      	adds	r3, r3, r2
    1f1e:	685b      	ldr	r3, [r3, #4]
    1f20:	049a      	lsls	r2, r3, #18
    1f22:	d40b      	bmi.n	1f3c <_usart_init+0xa0>
    1f24:	22c0      	movs	r2, #192	; 0xc0
    1f26:	01d2      	lsls	r2, r2, #7
    1f28:	4213      	tst	r3, r2
    1f2a:	d107      	bne.n	1f3c <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1f2c:	0083      	lsls	r3, r0, #2
    1f2e:	181b      	adds	r3, r3, r0
    1f30:	009a      	lsls	r2, r3, #2
    1f32:	4b15      	ldr	r3, [pc, #84]	; (1f88 <_usart_init+0xec>)
    1f34:	189b      	adds	r3, r3, r2
    1f36:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1f38:	81a3      	strh	r3, [r4, #12]
    1f3a:	e015      	b.n	1f68 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1f3c:	0083      	lsls	r3, r0, #2
    1f3e:	181b      	adds	r3, r3, r0
    1f40:	009a      	lsls	r2, r3, #2
    1f42:	4911      	ldr	r1, [pc, #68]	; (1f88 <_usart_init+0xec>)
    1f44:	1889      	adds	r1, r1, r2
    1f46:	898a      	ldrh	r2, [r1, #12]
    1f48:	89a3      	ldrh	r3, [r4, #12]
    1f4a:	04d2      	lsls	r2, r2, #19
    1f4c:	0cd2      	lsrs	r2, r2, #19
    1f4e:	0b5b      	lsrs	r3, r3, #13
    1f50:	035b      	lsls	r3, r3, #13
    1f52:	4313      	orrs	r3, r2
    1f54:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1f56:	7b8b      	ldrb	r3, [r1, #14]
    1f58:	2207      	movs	r2, #7
    1f5a:	401a      	ands	r2, r3
    1f5c:	89a3      	ldrh	r3, [r4, #12]
    1f5e:	0352      	lsls	r2, r2, #13
    1f60:	04db      	lsls	r3, r3, #19
    1f62:	0cdb      	lsrs	r3, r3, #19
    1f64:	4313      	orrs	r3, r2
    1f66:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1f68:	4a07      	ldr	r2, [pc, #28]	; (1f88 <_usart_init+0xec>)
    1f6a:	0083      	lsls	r3, r0, #2
    1f6c:	181d      	adds	r5, r3, r0
    1f6e:	00a9      	lsls	r1, r5, #2
    1f70:	000d      	movs	r5, r1
    1f72:	1851      	adds	r1, r2, r1
    1f74:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1f76:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1f78:	1952      	adds	r2, r2, r5
    1f7a:	7c12      	ldrb	r2, [r2, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1f7c:	2330      	movs	r3, #48	; 0x30
    1f7e:	54e2      	strb	r2, [r4, r3]
}
    1f80:	2000      	movs	r0, #0
    1f82:	bd70      	pop	{r4, r5, r6, pc}
    1f84:	00001e59 	.word	0x00001e59
    1f88:	00005d34 	.word	0x00005d34

00001f8c <_usart_sync_init>:
{
    1f8c:	b570      	push	{r4, r5, r6, lr}
    1f8e:	0005      	movs	r5, r0
    1f90:	000c      	movs	r4, r1
	ASSERT(device);
    1f92:	1e43      	subs	r3, r0, #1
    1f94:	4198      	sbcs	r0, r3
    1f96:	b2c0      	uxtb	r0, r0
    1f98:	22b4      	movs	r2, #180	; 0xb4
    1f9a:	4904      	ldr	r1, [pc, #16]	; (1fac <_usart_sync_init+0x20>)
    1f9c:	4b04      	ldr	r3, [pc, #16]	; (1fb0 <_usart_sync_init+0x24>)
    1f9e:	4798      	blx	r3
	device->hw = hw;
    1fa0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1fa2:	0020      	movs	r0, r4
    1fa4:	4b03      	ldr	r3, [pc, #12]	; (1fb4 <_usart_sync_init+0x28>)
    1fa6:	4798      	blx	r3
}
    1fa8:	bd70      	pop	{r4, r5, r6, pc}
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	00005d84 	.word	0x00005d84
    1fb0:	0000159d 	.word	0x0000159d
    1fb4:	00001e9d 	.word	0x00001e9d

00001fb8 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1fb8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1fba:	6813      	ldr	r3, [r2, #0]
    1fbc:	2102      	movs	r1, #2
    1fbe:	430b      	orrs	r3, r1
    1fc0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1fc2:	69d3      	ldr	r3, [r2, #28]
    1fc4:	079b      	lsls	r3, r3, #30
    1fc6:	d1fc      	bne.n	1fc2 <_usart_sync_enable+0xa>
}
    1fc8:	4770      	bx	lr

00001fca <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1fca:	6803      	ldr	r3, [r0, #0]
    1fcc:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1fce:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1fd0:	4770      	bx	lr

00001fd2 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1fd2:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1fd4:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1fd6:	b2c0      	uxtb	r0, r0
}
    1fd8:	4770      	bx	lr

00001fda <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1fda:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1fdc:	7e18      	ldrb	r0, [r3, #24]
    1fde:	2301      	movs	r3, #1
    1fe0:	4018      	ands	r0, r3
}
    1fe2:	4770      	bx	lr

00001fe4 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1fe4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1fe6:	7e1b      	ldrb	r3, [r3, #24]
    1fe8:	085b      	lsrs	r3, r3, #1
    1fea:	2001      	movs	r0, #1
    1fec:	4018      	ands	r0, r3
}
    1fee:	4770      	bx	lr

00001ff0 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1ff0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1ff2:	7e1b      	ldrb	r3, [r3, #24]
    1ff4:	089b      	lsrs	r3, r3, #2
    1ff6:	2001      	movs	r0, #1
    1ff8:	4018      	ands	r0, r3
}
    1ffa:	4770      	bx	lr

00001ffc <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1ffc:	b570      	push	{r4, r5, r6, lr}
    1ffe:	0006      	movs	r6, r0
    2000:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2002:	0008      	movs	r0, r1
    2004:	4b71      	ldr	r3, [pc, #452]	; (21cc <STACK_SIZE+0x1cc>)
    2006:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    2008:	2300      	movs	r3, #0
    200a:	2b00      	cmp	r3, #0
    200c:	d100      	bne.n	2010 <STACK_SIZE+0x10>
    200e:	e084      	b.n	211a <STACK_SIZE+0x11a>
	return NULL;
    2010:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2012:	2e00      	cmp	r6, #0
    2014:	d100      	bne.n	2018 <STACK_SIZE+0x18>
    2016:	e08d      	b.n	2134 <STACK_SIZE+0x134>
    2018:	2c00      	cmp	r4, #0
    201a:	d100      	bne.n	201e <STACK_SIZE+0x1e>
    201c:	e088      	b.n	2130 <STACK_SIZE+0x130>
    201e:	2001      	movs	r0, #1
    2020:	4a6b      	ldr	r2, [pc, #428]	; (21d0 <STACK_SIZE+0x1d0>)
    2022:	496c      	ldr	r1, [pc, #432]	; (21d4 <STACK_SIZE+0x1d4>)
    2024:	4b6c      	ldr	r3, [pc, #432]	; (21d8 <STACK_SIZE+0x1d8>)
    2026:	4798      	blx	r3

	if (regs == NULL) {
    2028:	2d00      	cmp	r5, #0
    202a:	d100      	bne.n	202e <STACK_SIZE+0x2e>
    202c:	e0cb      	b.n	21c6 <STACK_SIZE+0x1c6>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    202e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2030:	07db      	lsls	r3, r3, #31
    2032:	d421      	bmi.n	2078 <STACK_SIZE+0x78>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    2034:	782a      	ldrb	r2, [r5, #0]
    2036:	786b      	ldrb	r3, [r5, #1]
    2038:	021b      	lsls	r3, r3, #8
    203a:	4313      	orrs	r3, r2
    203c:	78aa      	ldrb	r2, [r5, #2]
    203e:	0412      	lsls	r2, r2, #16
    2040:	4313      	orrs	r3, r2
    2042:	78ea      	ldrb	r2, [r5, #3]
    2044:	0612      	lsls	r2, r2, #24
    2046:	431a      	orrs	r2, r3
    2048:	231c      	movs	r3, #28
    204a:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    204c:	69e3      	ldr	r3, [r4, #28]
    204e:	079b      	lsls	r3, r3, #30
    2050:	d1fc      	bne.n	204c <STACK_SIZE+0x4c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2052:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2054:	079b      	lsls	r3, r3, #30
    2056:	d509      	bpl.n	206c <STACK_SIZE+0x6c>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2058:	6823      	ldr	r3, [r4, #0]
    205a:	2102      	movs	r1, #2
    205c:	438b      	bics	r3, r1
    205e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2060:	69e3      	ldr	r3, [r4, #28]
    2062:	079b      	lsls	r3, r3, #30
    2064:	d1fc      	bne.n	2060 <STACK_SIZE+0x60>
    2066:	69e3      	ldr	r3, [r4, #28]
    2068:	079b      	lsls	r3, r3, #30
    206a:	d4fc      	bmi.n	2066 <STACK_SIZE+0x66>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    206c:	2301      	movs	r3, #1
    206e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2070:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2072:	69e3      	ldr	r3, [r4, #28]
    2074:	079b      	lsls	r3, r3, #30
    2076:	d1fc      	bne.n	2072 <STACK_SIZE+0x72>
    2078:	69e3      	ldr	r3, [r4, #28]
    207a:	07db      	lsls	r3, r3, #31
    207c:	d4fc      	bmi.n	2078 <STACK_SIZE+0x78>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    207e:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    2080:	782b      	ldrb	r3, [r5, #0]
    2082:	786a      	ldrb	r2, [r5, #1]
    2084:	0212      	lsls	r2, r2, #8
    2086:	431a      	orrs	r2, r3
    2088:	78ab      	ldrb	r3, [r5, #2]
    208a:	041b      	lsls	r3, r3, #16
    208c:	431a      	orrs	r2, r3
    208e:	78eb      	ldrb	r3, [r5, #3]
    2090:	061b      	lsls	r3, r3, #24
    2092:	4313      	orrs	r3, r2
    2094:	221c      	movs	r2, #28
    2096:	4013      	ands	r3, r2
    2098:	2b08      	cmp	r3, #8
    209a:	d04d      	beq.n	2138 <STACK_SIZE+0x138>
	ASSERT(hw && regs);
    209c:	2c00      	cmp	r4, #0
    209e:	d100      	bne.n	20a2 <STACK_SIZE+0xa2>
    20a0:	e08d      	b.n	21be <STACK_SIZE+0x1be>
    20a2:	2d00      	cmp	r5, #0
    20a4:	d100      	bne.n	20a8 <STACK_SIZE+0xa8>
    20a6:	e088      	b.n	21ba <STACK_SIZE+0x1ba>
    20a8:	2001      	movs	r0, #1
    20aa:	4a4c      	ldr	r2, [pc, #304]	; (21dc <STACK_SIZE+0x1dc>)
    20ac:	4949      	ldr	r1, [pc, #292]	; (21d4 <STACK_SIZE+0x1d4>)
    20ae:	4b4a      	ldr	r3, [pc, #296]	; (21d8 <STACK_SIZE+0x1d8>)
    20b0:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    20b2:	782b      	ldrb	r3, [r5, #0]
    20b4:	786a      	ldrb	r2, [r5, #1]
    20b6:	0212      	lsls	r2, r2, #8
    20b8:	431a      	orrs	r2, r3
    20ba:	78ab      	ldrb	r3, [r5, #2]
    20bc:	041b      	lsls	r3, r3, #16
    20be:	431a      	orrs	r2, r3
    20c0:	78eb      	ldrb	r3, [r5, #3]
    20c2:	061b      	lsls	r3, r3, #24
    20c4:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    20c6:	4a46      	ldr	r2, [pc, #280]	; (21e0 <STACK_SIZE+0x1e0>)
    20c8:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    20ca:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    20cc:	69e3      	ldr	r3, [r4, #28]
    20ce:	079b      	lsls	r3, r3, #30
    20d0:	d1fc      	bne.n	20cc <STACK_SIZE+0xcc>
	    (regs->ctrlb
    20d2:	792b      	ldrb	r3, [r5, #4]
    20d4:	796a      	ldrb	r2, [r5, #5]
    20d6:	0212      	lsls	r2, r2, #8
    20d8:	431a      	orrs	r2, r3
    20da:	79ab      	ldrb	r3, [r5, #6]
    20dc:	041b      	lsls	r3, r3, #16
    20de:	431a      	orrs	r2, r3
    20e0:	79eb      	ldrb	r3, [r5, #7]
    20e2:	061b      	lsls	r3, r3, #24
    20e4:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    20e6:	4a3f      	ldr	r2, [pc, #252]	; (21e4 <STACK_SIZE+0x1e4>)
    20e8:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    20ea:	2280      	movs	r2, #128	; 0x80
    20ec:	0292      	lsls	r2, r2, #10
    20ee:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    20f0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    20f2:	69e3      	ldr	r3, [r4, #28]
    20f4:	075b      	lsls	r3, r3, #29
    20f6:	d1fc      	bne.n	20f2 <STACK_SIZE+0xf2>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    20f8:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    20fa:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    20fc:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    20fe:	2330      	movs	r3, #48	; 0x30
    2100:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2102:	792b      	ldrb	r3, [r5, #4]
    2104:	075b      	lsls	r3, r3, #29
    2106:	d15c      	bne.n	21c2 <STACK_SIZE+0x1c2>
    2108:	2301      	movs	r3, #1
    210a:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    210c:	7baa      	ldrb	r2, [r5, #14]
    210e:	7beb      	ldrb	r3, [r5, #15]
    2110:	021b      	lsls	r3, r3, #8
    2112:	4313      	orrs	r3, r2
    2114:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    2116:	2000      	movs	r0, #0
}
    2118:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    211a:	2801      	cmp	r0, #1
    211c:	d002      	beq.n	2124 <STACK_SIZE+0x124>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    211e:	3301      	adds	r3, #1
    2120:	b2db      	uxtb	r3, r3
    2122:	e772      	b.n	200a <STACK_SIZE+0xa>
			return &sercomspi_regs[i];
    2124:	011d      	lsls	r5, r3, #4
    2126:	18ea      	adds	r2, r5, r3
    2128:	4d2f      	ldr	r5, [pc, #188]	; (21e8 <STACK_SIZE+0x1e8>)
    212a:	353c      	adds	r5, #60	; 0x3c
    212c:	18ad      	adds	r5, r5, r2
    212e:	e770      	b.n	2012 <STACK_SIZE+0x12>
	ASSERT(dev && hw);
    2130:	2000      	movs	r0, #0
    2132:	e775      	b.n	2020 <STACK_SIZE+0x20>
    2134:	2000      	movs	r0, #0
    2136:	e773      	b.n	2020 <STACK_SIZE+0x20>
	ASSERT(hw && regs);
    2138:	2c00      	cmp	r4, #0
    213a:	d03c      	beq.n	21b6 <STACK_SIZE+0x1b6>
    213c:	2d00      	cmp	r5, #0
    213e:	d038      	beq.n	21b2 <STACK_SIZE+0x1b2>
    2140:	2001      	movs	r0, #1
    2142:	4a2a      	ldr	r2, [pc, #168]	; (21ec <STACK_SIZE+0x1ec>)
    2144:	4923      	ldr	r1, [pc, #140]	; (21d4 <STACK_SIZE+0x1d4>)
    2146:	4b24      	ldr	r3, [pc, #144]	; (21d8 <STACK_SIZE+0x1d8>)
    2148:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    214a:	782b      	ldrb	r3, [r5, #0]
    214c:	786a      	ldrb	r2, [r5, #1]
    214e:	0212      	lsls	r2, r2, #8
    2150:	431a      	orrs	r2, r3
    2152:	78ab      	ldrb	r3, [r5, #2]
    2154:	041b      	lsls	r3, r3, #16
    2156:	431a      	orrs	r2, r3
    2158:	78eb      	ldrb	r3, [r5, #3]
    215a:	061b      	lsls	r3, r3, #24
    215c:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    215e:	4a20      	ldr	r2, [pc, #128]	; (21e0 <STACK_SIZE+0x1e0>)
    2160:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2162:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2164:	69e3      	ldr	r3, [r4, #28]
    2166:	079b      	lsls	r3, r3, #30
    2168:	d1fc      	bne.n	2164 <STACK_SIZE+0x164>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    216a:	792b      	ldrb	r3, [r5, #4]
    216c:	796a      	ldrb	r2, [r5, #5]
    216e:	0212      	lsls	r2, r2, #8
    2170:	431a      	orrs	r2, r3
    2172:	79ab      	ldrb	r3, [r5, #6]
    2174:	041b      	lsls	r3, r3, #16
    2176:	431a      	orrs	r2, r3
    2178:	79eb      	ldrb	r3, [r5, #7]
    217a:	061b      	lsls	r3, r3, #24
    217c:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    217e:	4a1c      	ldr	r2, [pc, #112]	; (21f0 <STACK_SIZE+0x1f0>)
    2180:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    2182:	4a1c      	ldr	r2, [pc, #112]	; (21f4 <STACK_SIZE+0x1f4>)
    2184:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2186:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2188:	69e3      	ldr	r3, [r4, #28]
    218a:	075b      	lsls	r3, r3, #29
    218c:	d1fc      	bne.n	2188 <STACK_SIZE+0x188>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    218e:	7a2b      	ldrb	r3, [r5, #8]
    2190:	7a6a      	ldrb	r2, [r5, #9]
    2192:	0212      	lsls	r2, r2, #8
    2194:	431a      	orrs	r2, r3
    2196:	7aab      	ldrb	r3, [r5, #10]
    2198:	041b      	lsls	r3, r3, #16
    219a:	431a      	orrs	r2, r3
    219c:	7aeb      	ldrb	r3, [r5, #11]
    219e:	061b      	lsls	r3, r3, #24
    21a0:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    21a2:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    21a4:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    21a6:	2330      	movs	r3, #48	; 0x30
    21a8:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    21aa:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    21ac:	2b00      	cmp	r3, #0
    21ae:	d1fc      	bne.n	21aa <STACK_SIZE+0x1aa>
    21b0:	e7a7      	b.n	2102 <STACK_SIZE+0x102>
	ASSERT(hw && regs);
    21b2:	2000      	movs	r0, #0
    21b4:	e7c5      	b.n	2142 <STACK_SIZE+0x142>
    21b6:	2000      	movs	r0, #0
    21b8:	e7c3      	b.n	2142 <STACK_SIZE+0x142>
	ASSERT(hw && regs);
    21ba:	2000      	movs	r0, #0
    21bc:	e775      	b.n	20aa <STACK_SIZE+0xaa>
    21be:	2000      	movs	r0, #0
    21c0:	e773      	b.n	20aa <STACK_SIZE+0xaa>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    21c2:	2302      	movs	r3, #2
    21c4:	e7a1      	b.n	210a <STACK_SIZE+0x10a>
		return ERR_INVALID_ARG;
    21c6:	200d      	movs	r0, #13
    21c8:	4240      	negs	r0, r0
    21ca:	e7a5      	b.n	2118 <STACK_SIZE+0x118>
    21cc:	00001e29 	.word	0x00001e29
    21d0:	00000925 	.word	0x00000925
    21d4:	00005d84 	.word	0x00005d84
    21d8:	0000159d 	.word	0x0000159d
    21dc:	000008ef 	.word	0x000008ef
    21e0:	fffffefc 	.word	0xfffffefc
    21e4:	fffd1dbf 	.word	0xfffd1dbf
    21e8:	00005d34 	.word	0x00005d34
    21ec:	00000903 	.word	0x00000903
    21f0:	fffdddbf 	.word	0xfffdddbf
    21f4:	00020240 	.word	0x00020240

000021f8 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    21f8:	b510      	push	{r4, lr}
    21fa:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    21fc:	d00e      	beq.n	221c <_spi_m_sync_enable+0x24>
    21fe:	6803      	ldr	r3, [r0, #0]
    2200:	2b00      	cmp	r3, #0
    2202:	d009      	beq.n	2218 <_spi_m_sync_enable+0x20>
    2204:	2001      	movs	r0, #1
    2206:	2298      	movs	r2, #152	; 0x98
    2208:	0112      	lsls	r2, r2, #4
    220a:	4905      	ldr	r1, [pc, #20]	; (2220 <_spi_m_sync_enable+0x28>)
    220c:	4b05      	ldr	r3, [pc, #20]	; (2224 <_spi_m_sync_enable+0x2c>)
    220e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    2210:	6820      	ldr	r0, [r4, #0]
    2212:	4b05      	ldr	r3, [pc, #20]	; (2228 <_spi_m_sync_enable+0x30>)
    2214:	4798      	blx	r3
}
    2216:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    2218:	2000      	movs	r0, #0
    221a:	e7f4      	b.n	2206 <_spi_m_sync_enable+0xe>
    221c:	2000      	movs	r0, #0
    221e:	e7f2      	b.n	2206 <_spi_m_sync_enable+0xe>
    2220:	00005d84 	.word	0x00005d84
    2224:	0000159d 	.word	0x0000159d
    2228:	00001e39 	.word	0x00001e39

0000222c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    222c:	b5f0      	push	{r4, r5, r6, r7, lr}
    222e:	46ce      	mov	lr, r9
    2230:	4647      	mov	r7, r8
    2232:	b580      	push	{r7, lr}
    2234:	b089      	sub	sp, #36	; 0x24
    2236:	4681      	mov	r9, r0
    2238:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    223a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    223c:	680b      	ldr	r3, [r1, #0]
    223e:	9303      	str	r3, [sp, #12]
    2240:	684b      	ldr	r3, [r1, #4]
    2242:	9304      	str	r3, [sp, #16]
    2244:	2300      	movs	r3, #0
    2246:	9305      	str	r3, [sp, #20]
    2248:	9306      	str	r3, [sp, #24]
    224a:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    224c:	2800      	cmp	r0, #0
    224e:	d014      	beq.n	227a <_spi_m_sync_trans+0x4e>
    2250:	2c00      	cmp	r4, #0
    2252:	d010      	beq.n	2276 <_spi_m_sync_trans+0x4a>
    2254:	2001      	movs	r0, #1
    2256:	4a37      	ldr	r2, [pc, #220]	; (2334 <_spi_m_sync_trans+0x108>)
    2258:	4937      	ldr	r1, [pc, #220]	; (2338 <_spi_m_sync_trans+0x10c>)
    225a:	4b38      	ldr	r3, [pc, #224]	; (233c <_spi_m_sync_trans+0x110>)
    225c:	4798      	blx	r3
    225e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2260:	075b      	lsls	r3, r3, #29
    2262:	d164      	bne.n	232e <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2264:	69e3      	ldr	r3, [r4, #28]
    2266:	079b      	lsls	r3, r3, #30
    2268:	d1fc      	bne.n	2264 <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    226a:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    226c:	079b      	lsls	r3, r3, #30
    226e:	d420      	bmi.n	22b2 <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    2270:	2014      	movs	r0, #20
    2272:	4240      	negs	r0, r0
    2274:	e056      	b.n	2324 <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    2276:	2000      	movs	r0, #0
    2278:	e7ed      	b.n	2256 <_spi_m_sync_trans+0x2a>
    227a:	2000      	movs	r0, #0
    227c:	e7eb      	b.n	2256 <_spi_m_sync_trans+0x2a>
		return false;
    227e:	2200      	movs	r2, #0
    2280:	e02d      	b.n	22de <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    2282:	7848      	ldrb	r0, [r1, #1]
    2284:	0200      	lsls	r0, r0, #8
    2286:	4647      	mov	r7, r8
    2288:	4307      	orrs	r7, r0
    228a:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    228c:	3102      	adds	r1, #2
    228e:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    2290:	3201      	adds	r2, #1
    2292:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    2294:	4642      	mov	r2, r8
    2296:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2298:	b25b      	sxtb	r3, r3
    229a:	2b00      	cmp	r3, #0
    229c:	db35      	blt.n	230a <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    229e:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    22a0:	2800      	cmp	r0, #0
    22a2:	db3a      	blt.n	231a <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    22a4:	9805      	ldr	r0, [sp, #20]
    22a6:	68ab      	ldr	r3, [r5, #8]
    22a8:	4298      	cmp	r0, r3
    22aa:	d302      	bcc.n	22b2 <_spi_m_sync_trans+0x86>
    22ac:	9a06      	ldr	r2, [sp, #24]
    22ae:	4293      	cmp	r3, r2
    22b0:	d933      	bls.n	231a <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    22b2:	7e23      	ldrb	r3, [r4, #24]
    22b4:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    22b6:	075a      	lsls	r2, r3, #29
    22b8:	d5e1      	bpl.n	227e <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    22ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    22bc:	9a04      	ldr	r2, [sp, #16]
    22be:	2a00      	cmp	r2, #0
    22c0:	d008      	beq.n	22d4 <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    22c2:	1c50      	adds	r0, r2, #1
    22c4:	9004      	str	r0, [sp, #16]
    22c6:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    22c8:	2e01      	cmp	r6, #1
    22ca:	d903      	bls.n	22d4 <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    22cc:	1c90      	adds	r0, r2, #2
    22ce:	9004      	str	r0, [sp, #16]
    22d0:	0a09      	lsrs	r1, r1, #8
    22d2:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    22d4:	9a06      	ldr	r2, [sp, #24]
    22d6:	9201      	str	r2, [sp, #4]
    22d8:	3201      	adds	r2, #1
    22da:	9206      	str	r2, [sp, #24]
	return true;
    22dc:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    22de:	2a00      	cmp	r2, #0
    22e0:	d1da      	bne.n	2298 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    22e2:	9906      	ldr	r1, [sp, #24]
    22e4:	9a05      	ldr	r2, [sp, #20]
    22e6:	4291      	cmp	r1, r2
    22e8:	d3d6      	bcc.n	2298 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    22ea:	4649      	mov	r1, r9
    22ec:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    22ee:	07d9      	lsls	r1, r3, #31
    22f0:	d5d2      	bpl.n	2298 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    22f2:	9903      	ldr	r1, [sp, #12]
    22f4:	2900      	cmp	r1, #0
    22f6:	d006      	beq.n	2306 <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    22f8:	1c48      	adds	r0, r1, #1
    22fa:	9003      	str	r0, [sp, #12]
    22fc:	7808      	ldrb	r0, [r1, #0]
    22fe:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    2300:	2e01      	cmp	r6, #1
    2302:	d8be      	bhi.n	2282 <_spi_m_sync_trans+0x56>
    2304:	e7c4      	b.n	2290 <_spi_m_sync_trans+0x64>
		data = dummy;
    2306:	4680      	mov	r8, r0
    2308:	e7c2      	b.n	2290 <_spi_m_sync_trans+0x64>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    230a:	2301      	movs	r3, #1
    230c:	425b      	negs	r3, r3
    230e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2310:	3381      	adds	r3, #129	; 0x81
    2312:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2314:	2013      	movs	r0, #19
    2316:	4240      	negs	r0, r0
    2318:	e7c2      	b.n	22a0 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    231a:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    231c:	079b      	lsls	r3, r3, #30
    231e:	d0fc      	beq.n	231a <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2320:	2303      	movs	r3, #3
    2322:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    2324:	b009      	add	sp, #36	; 0x24
    2326:	bc0c      	pop	{r2, r3}
    2328:	4690      	mov	r8, r2
    232a:	4699      	mov	r9, r3
    232c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    232e:	2004      	movs	r0, #4
    2330:	4240      	negs	r0, r0
    2332:	e7f7      	b.n	2324 <_spi_m_sync_trans+0xf8>
    2334:	00000a85 	.word	0x00000a85
    2338:	00005d84 	.word	0x00005d84
    233c:	0000159d 	.word	0x0000159d

00002340 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2340:	4b02      	ldr	r3, [pc, #8]	; (234c <_system_time_init+0xc>)
    2342:	4a03      	ldr	r2, [pc, #12]	; (2350 <_system_time_init+0x10>)
    2344:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2346:	2205      	movs	r2, #5
    2348:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    234a:	4770      	bx	lr
    234c:	e000e010 	.word	0xe000e010
    2350:	00ffffff 	.word	0x00ffffff

00002354 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2354:	b510      	push	{r4, lr}
	_system_time_init(hw);
    2356:	4b01      	ldr	r3, [pc, #4]	; (235c <_delay_init+0x8>)
    2358:	4798      	blx	r3
}
    235a:	bd10      	pop	{r4, pc}
    235c:	00002341 	.word	0x00002341

00002360 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2360:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2362:	e00b      	b.n	237c <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    2364:	4b0b      	ldr	r3, [pc, #44]	; (2394 <_delay_cycles+0x34>)
    2366:	480c      	ldr	r0, [pc, #48]	; (2398 <_delay_cycles+0x38>)
    2368:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    236a:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    236c:	4b09      	ldr	r3, [pc, #36]	; (2394 <_delay_cycles+0x34>)
    236e:	681b      	ldr	r3, [r3, #0]
    2370:	03db      	lsls	r3, r3, #15
    2372:	d5fb      	bpl.n	236c <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    2374:	4b09      	ldr	r3, [pc, #36]	; (239c <_delay_cycles+0x3c>)
    2376:	469c      	mov	ip, r3
    2378:	4461      	add	r1, ip
	while (n--) {
    237a:	0010      	movs	r0, r2
    237c:	1e42      	subs	r2, r0, #1
    237e:	b2d2      	uxtb	r2, r2
    2380:	2800      	cmp	r0, #0
    2382:	d1ef      	bne.n	2364 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    2384:	4b03      	ldr	r3, [pc, #12]	; (2394 <_delay_cycles+0x34>)
    2386:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2388:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    238a:	4b02      	ldr	r3, [pc, #8]	; (2394 <_delay_cycles+0x34>)
    238c:	681b      	ldr	r3, [r3, #0]
    238e:	03db      	lsls	r3, r3, #15
    2390:	d5fb      	bpl.n	238a <_delay_cycles+0x2a>
		;
}
    2392:	4770      	bx	lr
    2394:	e000e010 	.word	0xe000e010
    2398:	00ffffff 	.word	0x00ffffff
    239c:	ff000001 	.word	0xff000001

000023a0 <can_buffer_push>:
volatile uint8_t CAN_buffer_head = 0;
volatile uint8_t CAN_buffer_tail = 0;
volatile uint8_t CAN_buffer_len = 0;

static struct can_message* can_buffer_push(void){
	struct can_message* ret = &CAN_buffer[CAN_buffer_head];
    23a0:	4b0e      	ldr	r3, [pc, #56]	; (23dc <can_buffer_push+0x3c>)
    23a2:	7818      	ldrb	r0, [r3, #0]
    23a4:	0100      	lsls	r0, r0, #4
    23a6:	4a0e      	ldr	r2, [pc, #56]	; (23e0 <can_buffer_push+0x40>)
    23a8:	1880      	adds	r0, r0, r2
	
	if(CAN_buffer_head + 1 < CAN_RX_BUFFER_LENGTH) CAN_buffer_head++;
    23aa:	781b      	ldrb	r3, [r3, #0]
    23ac:	3301      	adds	r3, #1
    23ae:	2b3f      	cmp	r3, #63	; 0x3f
    23b0:	dc0f      	bgt.n	23d2 <can_buffer_push+0x32>
    23b2:	4a0a      	ldr	r2, [pc, #40]	; (23dc <can_buffer_push+0x3c>)
    23b4:	7813      	ldrb	r3, [r2, #0]
    23b6:	3301      	adds	r3, #1
    23b8:	b2db      	uxtb	r3, r3
    23ba:	7013      	strb	r3, [r2, #0]
	else CAN_buffer_head = 0;
	
	if(CAN_buffer_len < CAN_RX_BUFFER_LENGTH) CAN_buffer_len++;
    23bc:	4b07      	ldr	r3, [pc, #28]	; (23dc <can_buffer_push+0x3c>)
    23be:	785b      	ldrb	r3, [r3, #1]
    23c0:	b2db      	uxtb	r3, r3
    23c2:	2b3f      	cmp	r3, #63	; 0x3f
    23c4:	d804      	bhi.n	23d0 <can_buffer_push+0x30>
    23c6:	4a05      	ldr	r2, [pc, #20]	; (23dc <can_buffer_push+0x3c>)
    23c8:	7853      	ldrb	r3, [r2, #1]
    23ca:	3301      	adds	r3, #1
    23cc:	b2db      	uxtb	r3, r3
    23ce:	7053      	strb	r3, [r2, #1]
	
	return ret;
}
    23d0:	4770      	bx	lr
	else CAN_buffer_head = 0;
    23d2:	2200      	movs	r2, #0
    23d4:	4b01      	ldr	r3, [pc, #4]	; (23dc <can_buffer_push+0x3c>)
    23d6:	701a      	strb	r2, [r3, #0]
    23d8:	e7f0      	b.n	23bc <can_buffer_push+0x1c>
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	200000e0 	.word	0x200000e0
    23e0:	20000244 	.word	0x20000244

000023e4 <can_buffer_pop>:

static struct can_message* can_buffer_pop(void){
	struct can_message* ret = &CAN_buffer[CAN_buffer_tail];
    23e4:	4b0e      	ldr	r3, [pc, #56]	; (2420 <can_buffer_pop+0x3c>)
    23e6:	7898      	ldrb	r0, [r3, #2]
    23e8:	0100      	lsls	r0, r0, #4
    23ea:	4a0e      	ldr	r2, [pc, #56]	; (2424 <can_buffer_pop+0x40>)
    23ec:	1880      	adds	r0, r0, r2
	
	if(CAN_buffer_tail + 1 < CAN_RX_BUFFER_LENGTH) CAN_buffer_tail++;
    23ee:	789b      	ldrb	r3, [r3, #2]
    23f0:	3301      	adds	r3, #1
    23f2:	2b3f      	cmp	r3, #63	; 0x3f
    23f4:	dc0e      	bgt.n	2414 <can_buffer_pop+0x30>
    23f6:	4a0a      	ldr	r2, [pc, #40]	; (2420 <can_buffer_pop+0x3c>)
    23f8:	7893      	ldrb	r3, [r2, #2]
    23fa:	3301      	adds	r3, #1
    23fc:	b2db      	uxtb	r3, r3
    23fe:	7093      	strb	r3, [r2, #2]
	else CAN_buffer_tail = 0;
	
	if(CAN_buffer_len > 0) CAN_buffer_len--;
    2400:	4b07      	ldr	r3, [pc, #28]	; (2420 <can_buffer_pop+0x3c>)
    2402:	785b      	ldrb	r3, [r3, #1]
    2404:	2b00      	cmp	r3, #0
    2406:	d009      	beq.n	241c <can_buffer_pop+0x38>
    2408:	4a05      	ldr	r2, [pc, #20]	; (2420 <can_buffer_pop+0x3c>)
    240a:	7853      	ldrb	r3, [r2, #1]
    240c:	3b01      	subs	r3, #1
    240e:	b2db      	uxtb	r3, r3
    2410:	7053      	strb	r3, [r2, #1]
	else return NULL;
	
	return ret;
}
    2412:	4770      	bx	lr
	else CAN_buffer_tail = 0;
    2414:	2200      	movs	r2, #0
    2416:	4b02      	ldr	r3, [pc, #8]	; (2420 <can_buffer_pop+0x3c>)
    2418:	709a      	strb	r2, [r3, #2]
    241a:	e7f1      	b.n	2400 <can_buffer_pop+0x1c>
	else return NULL;
    241c:	2000      	movs	r0, #0
    241e:	e7f8      	b.n	2412 <can_buffer_pop+0x2e>
    2420:	200000e0 	.word	0x200000e0
    2424:	20000244 	.word	0x20000244

00002428 <DISPLAY_TIMER_cb>:
static struct timer_task TS_BUTTON_TIMER_task;

// for tt1
static void DISPLAY_TIMER_cb(const struct timer_task *const timer_task)
{
	display_ms_counter++; // toggle the counter for the display, this is instead of delays	
    2428:	4a02      	ldr	r2, [pc, #8]	; (2434 <DISPLAY_TIMER_cb+0xc>)
    242a:	6853      	ldr	r3, [r2, #4]
    242c:	3301      	adds	r3, #1
    242e:	6053      	str	r3, [r2, #4]
}
    2430:	4770      	bx	lr
    2432:	46c0      	nop			; (mov r8, r8)
    2434:	200000e0 	.word	0x200000e0

00002438 <MSG_TIMEOUT_timer_cb>:

static void MSG_TIMEOUT_timer_cb(const struct timer_task *const timer_task)
{
	msg_timeout_counter++; // count the delay between messages	
    2438:	4a02      	ldr	r2, [pc, #8]	; (2444 <MSG_TIMEOUT_timer_cb+0xc>)
    243a:	6893      	ldr	r3, [r2, #8]
    243c:	3301      	adds	r3, #1
    243e:	6093      	str	r3, [r2, #8]
}
    2440:	4770      	bx	lr
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	200000e0 	.word	0x200000e0

00002448 <TIMER_AMS_task_prelight_three_cb>:
	// Here, we need to keep the light on for the three seconds before it becomes active
	// For the first three seconds the light will remain on anyway as it is set to start on. 
	// So just enable the messages and timeout AFTER these three seconds pass 
	// Note this is a one shot timer, so the code here will get executed at the end of the three seconds
	
	AMS_active = 1; // Now the AMS is active and ready to act the way it should based on the messages received and timing constraints. 
    2448:	4b06      	ldr	r3, [pc, #24]	; (2464 <TIMER_AMS_task_prelight_three_cb+0x1c>)
    244a:	2201      	movs	r2, #1
    244c:	731a      	strb	r2, [r3, #12]
	AMS_state = 0;
    244e:	2200      	movs	r2, #0
    2450:	4905      	ldr	r1, [pc, #20]	; (2468 <TIMER_AMS_task_prelight_three_cb+0x20>)
    2452:	700a      	strb	r2, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2454:	2080      	movs	r0, #128	; 0x80
    2456:	0380      	lsls	r0, r0, #14
    2458:	21c0      	movs	r1, #192	; 0xc0
    245a:	05c9      	lsls	r1, r1, #23
    245c:	6148      	str	r0, [r1, #20]
	gpio_set_pin_level(AMS_LIGHT,AMS_state); // This happens at the end of the call, turn it off.
	msg_timeout_counter = 0; // now reset the counter;
    245e:	609a      	str	r2, [r3, #8]
}
    2460:	4770      	bx	lr
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	200000e0 	.word	0x200000e0
    2468:	20000014 	.word	0x20000014

0000246c <TS_BUTTON_TIMER_cb>:

static void TS_BUTTON_TIMER_cb(const struct timer_task *const timer_task){
	ts_button_counter++;
    246c:	4a02      	ldr	r2, [pc, #8]	; (2478 <TS_BUTTON_TIMER_cb+0xc>)
    246e:	6913      	ldr	r3, [r2, #16]
    2470:	3301      	adds	r3, #1
    2472:	6113      	str	r3, [r2, #16]
}
    2474:	4770      	bx	lr
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	200000e0 	.word	0x200000e0

0000247c <send_can_timer_cb>:
}
///////////////////////////////////// SEND CAN MESSAGE /////////////////////////////////////////////////////////

static void send_can_timer_cb(const struct timer_task *const timer_task)
{
	can_tx_ms_counter++;
    247c:	4a02      	ldr	r2, [pc, #8]	; (2488 <send_can_timer_cb+0xc>)
    247e:	6953      	ldr	r3, [r2, #20]
    2480:	3301      	adds	r3, #1
    2482:	6153      	str	r3, [r2, #20]
}
    2484:	4770      	bx	lr
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	200000e0 	.word	0x200000e0

0000248c <CAN_0_tx_callback>:
// CANS CALLBACK

static void CAN_0_tx_callback(struct can_async_descriptor *const descr) // just to not make it angry
{
	(void)descr;
}
    248c:	4770      	bx	lr
	...

00002490 <CAN_0_rx_callback>:

// can handler
static void CAN_0_rx_callback(struct can_async_descriptor *const descr) // This is an interrupt, we will parse the messages
{
    2490:	b510      	push	{r4, lr}
    2492:	0004      	movs	r4, r0
	struct can_message* msg = can_buffer_push();
    2494:	4b03      	ldr	r3, [pc, #12]	; (24a4 <CAN_0_rx_callback+0x14>)
    2496:	4798      	blx	r3
    2498:	0001      	movs	r1, r0
	
	can_async_read(descr, msg);
    249a:	0020      	movs	r0, r4
    249c:	4b02      	ldr	r3, [pc, #8]	; (24a8 <CAN_0_rx_callback+0x18>)
    249e:	4798      	blx	r3
	return;
}
    24a0:	bd10      	pop	{r4, pc}
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	000023a1 	.word	0x000023a1
    24a8:	00000f51 	.word	0x00000f51

000024ac <send_can_message>:
{
    24ac:	b570      	push	{r4, r5, r6, lr}
    24ae:	b08c      	sub	sp, #48	; 0x30
	uint8_t tx_data_1[8] = {RTD_switch_state,AMS_state,0,0,0,0,0,0};
    24b0:	ab06      	add	r3, sp, #24
    24b2:	4a24      	ldr	r2, [pc, #144]	; (2544 <send_can_message+0x98>)
    24b4:	7e12      	ldrb	r2, [r2, #24]
    24b6:	701a      	strb	r2, [r3, #0]
    24b8:	4a23      	ldr	r2, [pc, #140]	; (2548 <send_can_message+0x9c>)
    24ba:	7812      	ldrb	r2, [r2, #0]
    24bc:	705a      	strb	r2, [r3, #1]
    24be:	2200      	movs	r2, #0
    24c0:	709a      	strb	r2, [r3, #2]
    24c2:	70da      	strb	r2, [r3, #3]
    24c4:	711a      	strb	r2, [r3, #4]
    24c6:	715a      	strb	r2, [r3, #5]
    24c8:	719a      	strb	r2, [r3, #6]
    24ca:	71da      	strb	r2, [r3, #7]
	msg_send1.id = 0x469;
    24cc:	4b1f      	ldr	r3, [pc, #124]	; (254c <send_can_message+0xa0>)
    24ce:	9308      	str	r3, [sp, #32]
	msg_send1.type = CAN_TYPE_DATA;
    24d0:	ab08      	add	r3, sp, #32
    24d2:	711a      	strb	r2, [r3, #4]
	for(int i = 0; i < 8; i++)
    24d4:	2300      	movs	r3, #0
    24d6:	e005      	b.n	24e4 <send_can_message+0x38>
		msg_send1.data[i] = tx_data_1[i];
    24d8:	aa06      	add	r2, sp, #24
    24da:	5cd1      	ldrb	r1, [r2, r3]
    24dc:	aa08      	add	r2, sp, #32
    24de:	18d2      	adds	r2, r2, r3
    24e0:	7151      	strb	r1, [r2, #5]
	for(int i = 0; i < 8; i++)
    24e2:	3301      	adds	r3, #1
    24e4:	2b07      	cmp	r3, #7
    24e6:	ddf7      	ble.n	24d8 <send_can_message+0x2c>
	msg_send1.len = 8;
    24e8:	ab08      	add	r3, sp, #32
    24ea:	2208      	movs	r2, #8
    24ec:	735a      	strb	r2, [r3, #13]
	msg_send1.fmt = CAN_FMT_STDID;
    24ee:	2400      	movs	r4, #0
    24f0:	739c      	strb	r4, [r3, #14]
	uint8_t tx_data_2[8] = {TS_button_state,0,0,0,0,0,0,0};
    24f2:	2100      	movs	r1, #0
    24f4:	4668      	mov	r0, sp
    24f6:	4b16      	ldr	r3, [pc, #88]	; (2550 <send_can_message+0xa4>)
    24f8:	4798      	blx	r3
    24fa:	4b12      	ldr	r3, [pc, #72]	; (2544 <send_can_message+0x98>)
    24fc:	7e5b      	ldrb	r3, [r3, #25]
    24fe:	466a      	mov	r2, sp
    2500:	7013      	strb	r3, [r2, #0]
	msg_send2.id = 0x500;
    2502:	23a0      	movs	r3, #160	; 0xa0
    2504:	00db      	lsls	r3, r3, #3
    2506:	9302      	str	r3, [sp, #8]
	msg_send2.type = CAN_TYPE_DATA;
    2508:	ab02      	add	r3, sp, #8
    250a:	711c      	strb	r4, [r3, #4]
	for(int i = 0; i < 8; i++)
    250c:	2300      	movs	r3, #0
    250e:	e005      	b.n	251c <send_can_message+0x70>
		msg_send2.data[i] = tx_data_2[i];
    2510:	466a      	mov	r2, sp
    2512:	5cd1      	ldrb	r1, [r2, r3]
    2514:	aa02      	add	r2, sp, #8
    2516:	18d2      	adds	r2, r2, r3
    2518:	7151      	strb	r1, [r2, #5]
	for(int i = 0; i < 8; i++)
    251a:	3301      	adds	r3, #1
    251c:	2b07      	cmp	r3, #7
    251e:	ddf7      	ble.n	2510 <send_can_message+0x64>
	msg_send2.len = 8;
    2520:	ad02      	add	r5, sp, #8
    2522:	2308      	movs	r3, #8
    2524:	736b      	strb	r3, [r5, #13]
	msg_send2.fmt = CAN_FMT_STDID;
    2526:	2300      	movs	r3, #0
    2528:	73ab      	strb	r3, [r5, #14]
	can_async_enable(&CAN_0);
    252a:	4c0a      	ldr	r4, [pc, #40]	; (2554 <send_can_message+0xa8>)
    252c:	0020      	movs	r0, r4
    252e:	4b0a      	ldr	r3, [pc, #40]	; (2558 <send_can_message+0xac>)
    2530:	4798      	blx	r3
	can_async_write(&CAN_0, &msg_send1);
    2532:	a908      	add	r1, sp, #32
    2534:	0020      	movs	r0, r4
    2536:	4e09      	ldr	r6, [pc, #36]	; (255c <send_can_message+0xb0>)
    2538:	47b0      	blx	r6
	can_async_write(&CAN_0, &msg_send2);
    253a:	0029      	movs	r1, r5
    253c:	0020      	movs	r0, r4
    253e:	47b0      	blx	r6
}
    2540:	b00c      	add	sp, #48	; 0x30
    2542:	bd70      	pop	{r4, r5, r6, pc}
    2544:	200000e0 	.word	0x200000e0
    2548:	20000014 	.word	0x20000014
    254c:	00000469 	.word	0x00000469
    2550:	00004deb 	.word	0x00004deb
    2554:	200001b4 	.word	0x200001b4
    2558:	00000f29 	.word	0x00000f29
    255c:	00000f89 	.word	0x00000f89

00002560 <startFrame>:
#include "USER_DEF.h"



// write this function at the beginning of every frame - clears previous frame and handles default values
void startFrame(){
    2560:	b510      	push	{r4, lr}
  FT8_cmd_dl(CMD_DLSTART); /* start the display list */
    2562:	4804      	ldr	r0, [pc, #16]	; (2574 <startFrame+0x14>)
    2564:	4c04      	ldr	r4, [pc, #16]	; (2578 <startFrame+0x18>)
    2566:	47a0      	blx	r4
  FT8_cmd_dl(DL_CLEAR_RGB | COLOR_RGB(backgroundColorR,backgroundColorG,backgroundColorB)); /* set the default clear the background color */
    2568:	4804      	ldr	r0, [pc, #16]	; (257c <startFrame+0x1c>)
    256a:	47a0      	blx	r4
  FT8_cmd_dl(DL_CLEAR | CLR_COL | CLR_STN | CLR_TAG); /* clear the screen - this and the previous prevent artifacts between lists, Attributes are the color, stencil and tag buffers */
    256c:	4804      	ldr	r0, [pc, #16]	; (2580 <startFrame+0x20>)
    256e:	47a0      	blx	r4
}
    2570:	bd10      	pop	{r4, pc}
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	ffffff00 	.word	0xffffff00
    2578:	00000411 	.word	0x00000411
    257c:	067f7f7f 	.word	0x067f7f7f
    2580:	26000007 	.word	0x26000007

00002584 <endFrame>:

// write this function at the end of every frame - handles end of frame data prottocols to force screen update and flush buffer
void endFrame(){
    2584:	b510      	push	{r4, lr}
  FT8_cmd_dl(DL_DISPLAY); /* instruct the graphics processor to show the list */
    2586:	2000      	movs	r0, #0
    2588:	4c03      	ldr	r4, [pc, #12]	; (2598 <endFrame+0x14>)
    258a:	47a0      	blx	r4
  FT8_cmd_dl(CMD_SWAP); /* make this list active */
    258c:	20ff      	movs	r0, #255	; 0xff
    258e:	4240      	negs	r0, r0
    2590:	47a0      	blx	r4
  FT8_cmd_execute();
    2592:	4b02      	ldr	r3, [pc, #8]	; (259c <endFrame+0x18>)
    2594:	4798      	blx	r3
}
    2596:	bd10      	pop	{r4, pc}
    2598:	00000411 	.word	0x00000411
    259c:	0000033d 	.word	0x0000033d

000025a0 <display_number>:


void display_number(int x, int y, int font, int number){
    25a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a2:	b083      	sub	sp, #12
    25a4:	0004      	movs	r4, r0
    25a6:	000d      	movs	r5, r1
    25a8:	0016      	movs	r6, r2
    25aa:	001f      	movs	r7, r3
  //displays number at given coordinates and font(size)
  //(x,y) set the TOP LEFT point of the number
  //color is the default draw color
  FT8_cmd_dl(DL_COLOR_RGB | COLOR_RGB(defDrawColorR,defDrawColorG,defDrawColorB));
    25ac:	4805      	ldr	r0, [pc, #20]	; (25c4 <display_number+0x24>)
    25ae:	4b06      	ldr	r3, [pc, #24]	; (25c8 <display_number+0x28>)
    25b0:	4798      	blx	r3
  FT8_cmd_number(x, y, font, 0, number);
    25b2:	b232      	sxth	r2, r6
    25b4:	b229      	sxth	r1, r5
    25b6:	b220      	sxth	r0, r4
    25b8:	9700      	str	r7, [sp, #0]
    25ba:	2300      	movs	r3, #0
    25bc:	4c03      	ldr	r4, [pc, #12]	; (25cc <display_number+0x2c>)
    25be:	47a0      	blx	r4
}
    25c0:	b003      	add	sp, #12
    25c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25c4:	04ffffff 	.word	0x04ffffff
    25c8:	00000411 	.word	0x00000411
    25cc:	00000691 	.word	0x00000691

000025d0 <display_numberRight>:
  //color is set by the input arguments
  FT8_cmd_dl(DL_COLOR_RGB | COLOR_RGB(R,G,B));
  FT8_cmd_number(x, y, font, 0, number);
}

void display_numberRight(int x, int y, int font, int number){
    25d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25d2:	b083      	sub	sp, #12
    25d4:	0004      	movs	r4, r0
    25d6:	000d      	movs	r5, r1
    25d8:	0016      	movs	r6, r2
    25da:	001f      	movs	r7, r3
  //displays number at given coordinates and font(size)
  //(x,y) set the TOP RIGHT point of the number
  //color is the default draw color
  FT8_cmd_dl(DL_COLOR_RGB | COLOR_RGB(defDrawColorR,defDrawColorG,defDrawColorB));
    25dc:	4806      	ldr	r0, [pc, #24]	; (25f8 <display_numberRight+0x28>)
    25de:	4b07      	ldr	r3, [pc, #28]	; (25fc <display_numberRight+0x2c>)
    25e0:	4798      	blx	r3
  FT8_cmd_number(x, y, font, FT8_OPT_RIGHTX, number);
    25e2:	b232      	sxth	r2, r6
    25e4:	b229      	sxth	r1, r5
    25e6:	b220      	sxth	r0, r4
    25e8:	9700      	str	r7, [sp, #0]
    25ea:	2380      	movs	r3, #128	; 0x80
    25ec:	011b      	lsls	r3, r3, #4
    25ee:	4c04      	ldr	r4, [pc, #16]	; (2600 <display_numberRight+0x30>)
    25f0:	47a0      	blx	r4
}
    25f2:	b003      	add	sp, #12
    25f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	04ffffff 	.word	0x04ffffff
    25fc:	00000411 	.word	0x00000411
    2600:	00000691 	.word	0x00000691

00002604 <display_numberColorRight>:

void display_numberColorRight(int x, int y, int font, int number, byte R, byte G, byte B){
    2604:	b5f0      	push	{r4, r5, r6, r7, lr}
    2606:	b083      	sub	sp, #12
    2608:	0004      	movs	r4, r0
    260a:	000d      	movs	r5, r1
    260c:	0016      	movs	r6, r2
    260e:	001f      	movs	r7, r3
    2610:	ab08      	add	r3, sp, #32
    2612:	7818      	ldrb	r0, [r3, #0]
    2614:	ab09      	add	r3, sp, #36	; 0x24
    2616:	781b      	ldrb	r3, [r3, #0]
    2618:	aa0a      	add	r2, sp, #40	; 0x28
    261a:	7812      	ldrb	r2, [r2, #0]
  //displays number at given coordinates and font(size)
  //(x,y) set the TOP RIGHT point of the number
  //color is set by the input arguments
  FT8_cmd_dl(DL_COLOR_RGB | COLOR_RGB(R,G,B));
    261c:	0400      	lsls	r0, r0, #16
    261e:	021b      	lsls	r3, r3, #8
    2620:	4318      	orrs	r0, r3
    2622:	4310      	orrs	r0, r2
    2624:	2380      	movs	r3, #128	; 0x80
    2626:	04db      	lsls	r3, r3, #19
    2628:	4318      	orrs	r0, r3
    262a:	4b06      	ldr	r3, [pc, #24]	; (2644 <display_numberColorRight+0x40>)
    262c:	4798      	blx	r3
  FT8_cmd_number(x, y, font, FT8_OPT_RIGHTX, number);
    262e:	b232      	sxth	r2, r6
    2630:	b229      	sxth	r1, r5
    2632:	b220      	sxth	r0, r4
    2634:	9700      	str	r7, [sp, #0]
    2636:	2380      	movs	r3, #128	; 0x80
    2638:	011b      	lsls	r3, r3, #4
    263a:	4c03      	ldr	r4, [pc, #12]	; (2648 <display_numberColorRight+0x44>)
    263c:	47a0      	blx	r4
}
    263e:	b003      	add	sp, #12
    2640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	00000411 	.word	0x00000411
    2648:	00000691 	.word	0x00000691

0000264c <display_text>:



void display_text(int x, int y, int font, const char* text){
    264c:	b5f0      	push	{r4, r5, r6, r7, lr}
    264e:	b083      	sub	sp, #12
    2650:	0004      	movs	r4, r0
    2652:	000d      	movs	r5, r1
    2654:	0016      	movs	r6, r2
    2656:	001f      	movs	r7, r3
  //displays text at given coordinates and font(size)
  //(x,y) set the TOP LEFT point of the text
  //color is the default draw color
  FT8_cmd_dl(DL_COLOR_RGB | COLOR_RGB(defDrawColorR,defDrawColorG,defDrawColorB));
    2658:	4805      	ldr	r0, [pc, #20]	; (2670 <display_text+0x24>)
    265a:	4b06      	ldr	r3, [pc, #24]	; (2674 <display_text+0x28>)
    265c:	4798      	blx	r3
  FT8_cmd_text(x, y, font, 0, text);
    265e:	b232      	sxth	r2, r6
    2660:	b229      	sxth	r1, r5
    2662:	b220      	sxth	r0, r4
    2664:	9700      	str	r7, [sp, #0]
    2666:	2300      	movs	r3, #0
    2668:	4c03      	ldr	r4, [pc, #12]	; (2678 <display_text+0x2c>)
    266a:	47a0      	blx	r4
}
    266c:	b003      	add	sp, #12
    266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2670:	04ffffff 	.word	0x04ffffff
    2674:	00000411 	.word	0x00000411
    2678:	00000469 	.word	0x00000469

0000267c <display_textColor>:

void display_textColor(int x, int y, int font, const char* text, byte R, byte G, byte B){
    267c:	b5f0      	push	{r4, r5, r6, r7, lr}
    267e:	b083      	sub	sp, #12
    2680:	0004      	movs	r4, r0
    2682:	000d      	movs	r5, r1
    2684:	0016      	movs	r6, r2
    2686:	001f      	movs	r7, r3
    2688:	ab08      	add	r3, sp, #32
    268a:	7818      	ldrb	r0, [r3, #0]
    268c:	ab09      	add	r3, sp, #36	; 0x24
    268e:	781b      	ldrb	r3, [r3, #0]
    2690:	aa0a      	add	r2, sp, #40	; 0x28
    2692:	7812      	ldrb	r2, [r2, #0]
  //displays text at given coordinates and font(size)
  //(x,y) set the TOP LEFT point of the text
  //color is set by the input arguments
  FT8_cmd_dl(DL_COLOR_RGB | COLOR_RGB(R,G,B));
    2694:	0400      	lsls	r0, r0, #16
    2696:	021b      	lsls	r3, r3, #8
    2698:	4318      	orrs	r0, r3
    269a:	4310      	orrs	r0, r2
    269c:	2380      	movs	r3, #128	; 0x80
    269e:	04db      	lsls	r3, r3, #19
    26a0:	4318      	orrs	r0, r3
    26a2:	4b05      	ldr	r3, [pc, #20]	; (26b8 <display_textColor+0x3c>)
    26a4:	4798      	blx	r3
  FT8_cmd_text(x, y, font, 0, text);
    26a6:	b232      	sxth	r2, r6
    26a8:	b229      	sxth	r1, r5
    26aa:	b220      	sxth	r0, r4
    26ac:	9700      	str	r7, [sp, #0]
    26ae:	2300      	movs	r3, #0
    26b0:	4c02      	ldr	r4, [pc, #8]	; (26bc <display_textColor+0x40>)
    26b2:	47a0      	blx	r4
}
    26b4:	b003      	add	sp, #12
    26b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26b8:	00000411 	.word	0x00000411
    26bc:	00000469 	.word	0x00000469

000026c0 <display_numbers_around_gauge>:
  FT8_cmd_dl(DL_COLOR_RGB | COLOR_RGB(R,G,B));
  FT8_cmd_text(x, y, font, FT8_OPT_RIGHTX, text);
}

void display_numbers_around_gauge(int x0, int y0, int radius, int font)
{
    26c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26c2:	46ce      	mov	lr, r9
    26c4:	b500      	push	{lr}
    26c6:	b092      	sub	sp, #72	; 0x48
    26c8:	0005      	movs	r5, r0
    26ca:	9108      	str	r1, [sp, #32]
    26cc:	0014      	movs	r4, r2
    26ce:	930c      	str	r3, [sp, #48]	; 0x30
	// consider the gauge being put inside a square and use the width and height accordingly to determine the proportions
	
	// gauge code is set to go from 0-60, therefore there will be 45 degree angle between each major sector. Feel free to change this if you wish
	
	// 0
	FT8_cmd_dl(DL_COLOR_RGB | WHITE);
    26d0:	4856      	ldr	r0, [pc, #344]	; (282c <display_numbers_around_gauge+0x16c>)
    26d2:	4b57      	ldr	r3, [pc, #348]	; (2830 <display_numbers_around_gauge+0x170>)
    26d4:	4798      	blx	r3
	FT8_cmd_number((int)(x0-(radius*0.8)), (int)(y0+(radius*0.8)), font, FT8_OPT_RIGHTX, 0);
    26d6:	4f57      	ldr	r7, [pc, #348]	; (2834 <display_numbers_around_gauge+0x174>)
    26d8:	0028      	movs	r0, r5
    26da:	47b8      	blx	r7
    26dc:	9002      	str	r0, [sp, #8]
    26de:	9103      	str	r1, [sp, #12]
    26e0:	0020      	movs	r0, r4
    26e2:	47b8      	blx	r7
    26e4:	0004      	movs	r4, r0
    26e6:	000d      	movs	r5, r1
    26e8:	4a53      	ldr	r2, [pc, #332]	; (2838 <display_numbers_around_gauge+0x178>)
    26ea:	4691      	mov	r9, r2
    26ec:	4a53      	ldr	r2, [pc, #332]	; (283c <display_numbers_around_gauge+0x17c>)
    26ee:	4b54      	ldr	r3, [pc, #336]	; (2840 <display_numbers_around_gauge+0x180>)
    26f0:	9404      	str	r4, [sp, #16]
    26f2:	9505      	str	r5, [sp, #20]
    26f4:	47c8      	blx	r9
    26f6:	0002      	movs	r2, r0
    26f8:	000b      	movs	r3, r1
    26fa:	4e52      	ldr	r6, [pc, #328]	; (2844 <display_numbers_around_gauge+0x184>)
    26fc:	920a      	str	r2, [sp, #40]	; 0x28
    26fe:	930b      	str	r3, [sp, #44]	; 0x2c
    2700:	9802      	ldr	r0, [sp, #8]
    2702:	9903      	ldr	r1, [sp, #12]
    2704:	47b0      	blx	r6
    2706:	4c50      	ldr	r4, [pc, #320]	; (2848 <display_numbers_around_gauge+0x188>)
    2708:	47a0      	blx	r4
    270a:	0005      	movs	r5, r0
    270c:	9808      	ldr	r0, [sp, #32]
    270e:	47b8      	blx	r7
    2710:	4f4e      	ldr	r7, [pc, #312]	; (284c <display_numbers_around_gauge+0x18c>)
    2712:	9006      	str	r0, [sp, #24]
    2714:	9107      	str	r1, [sp, #28]
    2716:	0002      	movs	r2, r0
    2718:	000b      	movs	r3, r1
    271a:	980a      	ldr	r0, [sp, #40]	; 0x28
    271c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    271e:	47b8      	blx	r7
    2720:	47a0      	blx	r4
    2722:	b201      	sxth	r1, r0
    2724:	9109      	str	r1, [sp, #36]	; 0x24
    2726:	466b      	mov	r3, sp
    2728:	2130      	movs	r1, #48	; 0x30
    272a:	5e5b      	ldrsh	r3, [r3, r1]
    272c:	0019      	movs	r1, r3
    272e:	b228      	sxth	r0, r5
    2730:	2300      	movs	r3, #0
    2732:	9300      	str	r3, [sp, #0]
    2734:	2380      	movs	r3, #128	; 0x80
    2736:	011b      	lsls	r3, r3, #4
    2738:	9108      	str	r1, [sp, #32]
    273a:	000a      	movs	r2, r1
    273c:	9909      	ldr	r1, [sp, #36]	; 0x24
    273e:	4d44      	ldr	r5, [pc, #272]	; (2850 <display_numbers_around_gauge+0x190>)
    2740:	47a8      	blx	r5
	//FT8_cmd_number((int)(x0+(radius*1.1)), (int)(y0-(0.1*radius)), font, 0, 50);
	
	//FT8_cmd_number((int)(x0+(radius*0.8)), (int)(y0+(radius*0.8)), font, 0, 60);

	//commands for 0-100 gauge
	FT8_cmd_number((int)(x0-(radius*1.05)), (int)(y0-(0.33*radius)), font, FT8_OPT_RIGHTX, 20);
    2742:	4a44      	ldr	r2, [pc, #272]	; (2854 <display_numbers_around_gauge+0x194>)
    2744:	4b44      	ldr	r3, [pc, #272]	; (2858 <display_numbers_around_gauge+0x198>)
    2746:	9804      	ldr	r0, [sp, #16]
    2748:	9905      	ldr	r1, [sp, #20]
    274a:	47c8      	blx	r9
    274c:	900e      	str	r0, [sp, #56]	; 0x38
    274e:	910f      	str	r1, [sp, #60]	; 0x3c
    2750:	0002      	movs	r2, r0
    2752:	000b      	movs	r3, r1
    2754:	9802      	ldr	r0, [sp, #8]
    2756:	9903      	ldr	r1, [sp, #12]
    2758:	47b0      	blx	r6
    275a:	47a0      	blx	r4
    275c:	900c      	str	r0, [sp, #48]	; 0x30
    275e:	4a3f      	ldr	r2, [pc, #252]	; (285c <display_numbers_around_gauge+0x19c>)
    2760:	4b3f      	ldr	r3, [pc, #252]	; (2860 <display_numbers_around_gauge+0x1a0>)
    2762:	9804      	ldr	r0, [sp, #16]
    2764:	9905      	ldr	r1, [sp, #20]
    2766:	47c8      	blx	r9
    2768:	0002      	movs	r2, r0
    276a:	000b      	movs	r3, r1
    276c:	9806      	ldr	r0, [sp, #24]
    276e:	9907      	ldr	r1, [sp, #28]
    2770:	47b0      	blx	r6
    2772:	47a0      	blx	r4
    2774:	b203      	sxth	r3, r0
    2776:	0019      	movs	r1, r3
    2778:	466b      	mov	r3, sp
    277a:	2030      	movs	r0, #48	; 0x30
    277c:	5e18      	ldrsh	r0, [r3, r0]
    277e:	2314      	movs	r3, #20
    2780:	9300      	str	r3, [sp, #0]
    2782:	2380      	movs	r3, #128	; 0x80
    2784:	011b      	lsls	r3, r3, #4
    2786:	9a08      	ldr	r2, [sp, #32]
    2788:	910c      	str	r1, [sp, #48]	; 0x30
    278a:	47a8      	blx	r5
	
	FT8_cmd_number((int)(x0-(radius*0.4)), (int)(y0-(radius*1.12)), font, FT8_OPT_RIGHTX, 40);
    278c:	4a2b      	ldr	r2, [pc, #172]	; (283c <display_numbers_around_gauge+0x17c>)
    278e:	4b35      	ldr	r3, [pc, #212]	; (2864 <display_numbers_around_gauge+0x1a4>)
    2790:	9804      	ldr	r0, [sp, #16]
    2792:	9905      	ldr	r1, [sp, #20]
    2794:	47c8      	blx	r9
    2796:	9010      	str	r0, [sp, #64]	; 0x40
    2798:	9111      	str	r1, [sp, #68]	; 0x44
    279a:	0002      	movs	r2, r0
    279c:	000b      	movs	r3, r1
    279e:	9802      	ldr	r0, [sp, #8]
    27a0:	9903      	ldr	r1, [sp, #12]
    27a2:	47b0      	blx	r6
    27a4:	47a0      	blx	r4
    27a6:	900d      	str	r0, [sp, #52]	; 0x34
    27a8:	4a2f      	ldr	r2, [pc, #188]	; (2868 <display_numbers_around_gauge+0x1a8>)
    27aa:	4b30      	ldr	r3, [pc, #192]	; (286c <display_numbers_around_gauge+0x1ac>)
    27ac:	9804      	ldr	r0, [sp, #16]
    27ae:	9905      	ldr	r1, [sp, #20]
    27b0:	47c8      	blx	r9
    27b2:	0002      	movs	r2, r0
    27b4:	000b      	movs	r3, r1
    27b6:	9806      	ldr	r0, [sp, #24]
    27b8:	9907      	ldr	r1, [sp, #28]
    27ba:	47b0      	blx	r6
    27bc:	47a0      	blx	r4
    27be:	b206      	sxth	r6, r0
    27c0:	466b      	mov	r3, sp
    27c2:	2034      	movs	r0, #52	; 0x34
    27c4:	5e18      	ldrsh	r0, [r3, r0]
    27c6:	2328      	movs	r3, #40	; 0x28
    27c8:	9300      	str	r3, [sp, #0]
    27ca:	2380      	movs	r3, #128	; 0x80
    27cc:	011b      	lsls	r3, r3, #4
    27ce:	9a08      	ldr	r2, [sp, #32]
    27d0:	0031      	movs	r1, r6
    27d2:	47a8      	blx	r5
	
	FT8_cmd_number((int)(x0+(radius*0.4)), (int)(y0-(1.12*radius)), font, 0, 60);
    27d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    27d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    27d8:	9802      	ldr	r0, [sp, #8]
    27da:	9903      	ldr	r1, [sp, #12]
    27dc:	47b8      	blx	r7
    27de:	47a0      	blx	r4
    27e0:	b200      	sxth	r0, r0
    27e2:	233c      	movs	r3, #60	; 0x3c
    27e4:	9300      	str	r3, [sp, #0]
    27e6:	2300      	movs	r3, #0
    27e8:	9a08      	ldr	r2, [sp, #32]
    27ea:	0031      	movs	r1, r6
    27ec:	47a8      	blx	r5
	
	FT8_cmd_number((int)(x0+(radius*1.05)), (int)(y0-(radius*0.33)), font, 0, 80);
    27ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    27f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    27f2:	9802      	ldr	r0, [sp, #8]
    27f4:	9903      	ldr	r1, [sp, #12]
    27f6:	47b8      	blx	r7
    27f8:	47a0      	blx	r4
    27fa:	b200      	sxth	r0, r0
    27fc:	2350      	movs	r3, #80	; 0x50
    27fe:	9300      	str	r3, [sp, #0]
    2800:	2300      	movs	r3, #0
    2802:	9e08      	ldr	r6, [sp, #32]
    2804:	0032      	movs	r2, r6
    2806:	990c      	ldr	r1, [sp, #48]	; 0x30
    2808:	47a8      	blx	r5
	
	FT8_cmd_number((int)(x0+(radius*0.8)), (int)(y0+(radius*0.8)), font, 0, 100);
    280a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    280c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    280e:	9802      	ldr	r0, [sp, #8]
    2810:	9903      	ldr	r1, [sp, #12]
    2812:	47b8      	blx	r7
    2814:	47a0      	blx	r4
    2816:	b200      	sxth	r0, r0
    2818:	2364      	movs	r3, #100	; 0x64
    281a:	9300      	str	r3, [sp, #0]
    281c:	2300      	movs	r3, #0
    281e:	0032      	movs	r2, r6
    2820:	9909      	ldr	r1, [sp, #36]	; 0x24
    2822:	47a8      	blx	r5
}
    2824:	b012      	add	sp, #72	; 0x48
    2826:	bc04      	pop	{r2}
    2828:	4691      	mov	r9, r2
    282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    282c:	04ffffff 	.word	0x04ffffff
    2830:	00000411 	.word	0x00000411
    2834:	00004cd1 	.word	0x00004cd1
    2838:	0000413d 	.word	0x0000413d
    283c:	9999999a 	.word	0x9999999a
    2840:	3fe99999 	.word	0x3fe99999
    2844:	0000463d 	.word	0x0000463d
    2848:	00004c69 	.word	0x00004c69
    284c:	00003b1d 	.word	0x00003b1d
    2850:	00000691 	.word	0x00000691
    2854:	cccccccd 	.word	0xcccccccd
    2858:	3ff0cccc 	.word	0x3ff0cccc
    285c:	51eb851f 	.word	0x51eb851f
    2860:	3fd51eb8 	.word	0x3fd51eb8
    2864:	3fd99999 	.word	0x3fd99999
    2868:	1eb851ec 	.word	0x1eb851ec
    286c:	3ff1eb85 	.word	0x3ff1eb85

00002870 <display_gauge_number_large>:

void display_gauge_number_large(int x0, int y0, int radius, int font, int val)
{
    2870:	b5f0      	push	{r4, r5, r6, r7, lr}
    2872:	46de      	mov	lr, fp
    2874:	b500      	push	{lr}
    2876:	b08c      	sub	sp, #48	; 0x30
    2878:	0006      	movs	r6, r0
    287a:	9106      	str	r1, [sp, #24]
    287c:	0015      	movs	r5, r2
    287e:	930b      	str	r3, [sp, #44]	; 0x2c
	// Set up the rectangle in which the large number will be displayed
	FT8_cmd_dl(DL_COLOR_RGB | WHITE);
    2880:	4834      	ldr	r0, [pc, #208]	; (2954 <display_gauge_number_large+0xe4>)
    2882:	4a35      	ldr	r2, [pc, #212]	; (2958 <display_gauge_number_large+0xe8>)
    2884:	4693      	mov	fp, r2
    2886:	4790      	blx	r2
	FT8_cmd_rect((int)(x0-(0.375*radius)), (int)(y0+(1.05*radius)), (int)(x0+(0.375*radius)),(int)(y0+(0.625*radius)), 1);
    2888:	4f34      	ldr	r7, [pc, #208]	; (295c <display_gauge_number_large+0xec>)
    288a:	0030      	movs	r0, r6
    288c:	47b8      	blx	r7
    288e:	9002      	str	r0, [sp, #8]
    2890:	9103      	str	r1, [sp, #12]
    2892:	0028      	movs	r0, r5
    2894:	47b8      	blx	r7
    2896:	0005      	movs	r5, r0
    2898:	000e      	movs	r6, r1
    289a:	4c31      	ldr	r4, [pc, #196]	; (2960 <display_gauge_number_large+0xf0>)
    289c:	2200      	movs	r2, #0
    289e:	4b31      	ldr	r3, [pc, #196]	; (2964 <display_gauge_number_large+0xf4>)
    28a0:	9504      	str	r5, [sp, #16]
    28a2:	9605      	str	r6, [sp, #20]
    28a4:	47a0      	blx	r4
    28a6:	0002      	movs	r2, r0
    28a8:	000b      	movs	r3, r1
    28aa:	9208      	str	r2, [sp, #32]
    28ac:	9309      	str	r3, [sp, #36]	; 0x24
    28ae:	9802      	ldr	r0, [sp, #8]
    28b0:	9903      	ldr	r1, [sp, #12]
    28b2:	4d2d      	ldr	r5, [pc, #180]	; (2968 <display_gauge_number_large+0xf8>)
    28b4:	47a8      	blx	r5
    28b6:	4e2d      	ldr	r6, [pc, #180]	; (296c <display_gauge_number_large+0xfc>)
    28b8:	47b0      	blx	r6
    28ba:	0005      	movs	r5, r0
    28bc:	9806      	ldr	r0, [sp, #24]
    28be:	47b8      	blx	r7
    28c0:	9006      	str	r0, [sp, #24]
    28c2:	9107      	str	r1, [sp, #28]
    28c4:	4a2a      	ldr	r2, [pc, #168]	; (2970 <display_gauge_number_large+0x100>)
    28c6:	4b2b      	ldr	r3, [pc, #172]	; (2974 <display_gauge_number_large+0x104>)
    28c8:	9804      	ldr	r0, [sp, #16]
    28ca:	9905      	ldr	r1, [sp, #20]
    28cc:	47a0      	blx	r4
    28ce:	0002      	movs	r2, r0
    28d0:	000b      	movs	r3, r1
    28d2:	4f29      	ldr	r7, [pc, #164]	; (2978 <display_gauge_number_large+0x108>)
    28d4:	9806      	ldr	r0, [sp, #24]
    28d6:	9907      	ldr	r1, [sp, #28]
    28d8:	47b8      	blx	r7
    28da:	47b0      	blx	r6
    28dc:	900a      	str	r0, [sp, #40]	; 0x28
    28de:	9a08      	ldr	r2, [sp, #32]
    28e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28e2:	9802      	ldr	r0, [sp, #8]
    28e4:	9903      	ldr	r1, [sp, #12]
    28e6:	47b8      	blx	r7
    28e8:	47b0      	blx	r6
    28ea:	9008      	str	r0, [sp, #32]
    28ec:	2200      	movs	r2, #0
    28ee:	4b23      	ldr	r3, [pc, #140]	; (297c <display_gauge_number_large+0x10c>)
    28f0:	9804      	ldr	r0, [sp, #16]
    28f2:	9905      	ldr	r1, [sp, #20]
    28f4:	47a0      	blx	r4
    28f6:	0002      	movs	r2, r0
    28f8:	000b      	movs	r3, r1
    28fa:	9806      	ldr	r0, [sp, #24]
    28fc:	9907      	ldr	r1, [sp, #28]
    28fe:	47b8      	blx	r7
    2900:	47b0      	blx	r6
    2902:	b202      	sxth	r2, r0
    2904:	9206      	str	r2, [sp, #24]
    2906:	466b      	mov	r3, sp
    2908:	2120      	movs	r1, #32
    290a:	5e5a      	ldrsh	r2, [r3, r1]
    290c:	2128      	movs	r1, #40	; 0x28
    290e:	5e59      	ldrsh	r1, [r3, r1]
    2910:	b228      	sxth	r0, r5
    2912:	2301      	movs	r3, #1
    2914:	9300      	str	r3, [sp, #0]
    2916:	9b06      	ldr	r3, [sp, #24]
    2918:	4d19      	ldr	r5, [pc, #100]	; (2980 <display_gauge_number_large+0x110>)
    291a:	47a8      	blx	r5
	
	// Set up the actual number display
	FT8_cmd_dl(DL_COLOR_RGB | BLUE);
    291c:	4819      	ldr	r0, [pc, #100]	; (2984 <display_gauge_number_large+0x114>)
    291e:	47d8      	blx	fp
	FT8_cmd_number((int)(x0+(0.2*radius)), (int)(y0+(0.625*radius)), font, FT8_OPT_RIGHTX, val);
    2920:	4a19      	ldr	r2, [pc, #100]	; (2988 <display_gauge_number_large+0x118>)
    2922:	4b1a      	ldr	r3, [pc, #104]	; (298c <display_gauge_number_large+0x11c>)
    2924:	9804      	ldr	r0, [sp, #16]
    2926:	9905      	ldr	r1, [sp, #20]
    2928:	47a0      	blx	r4
    292a:	0002      	movs	r2, r0
    292c:	000b      	movs	r3, r1
    292e:	9802      	ldr	r0, [sp, #8]
    2930:	9903      	ldr	r1, [sp, #12]
    2932:	47b8      	blx	r7
    2934:	47b0      	blx	r6
    2936:	466b      	mov	r3, sp
    2938:	222c      	movs	r2, #44	; 0x2c
    293a:	5e9a      	ldrsh	r2, [r3, r2]
    293c:	b200      	sxth	r0, r0
    293e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2940:	9300      	str	r3, [sp, #0]
    2942:	2380      	movs	r3, #128	; 0x80
    2944:	011b      	lsls	r3, r3, #4
    2946:	9906      	ldr	r1, [sp, #24]
    2948:	4c11      	ldr	r4, [pc, #68]	; (2990 <display_gauge_number_large+0x120>)
    294a:	47a0      	blx	r4
	
}
    294c:	b00c      	add	sp, #48	; 0x30
    294e:	bc04      	pop	{r2}
    2950:	4693      	mov	fp, r2
    2952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2954:	04ffffff 	.word	0x04ffffff
    2958:	00000411 	.word	0x00000411
    295c:	00004cd1 	.word	0x00004cd1
    2960:	0000413d 	.word	0x0000413d
    2964:	3fd80000 	.word	0x3fd80000
    2968:	0000463d 	.word	0x0000463d
    296c:	00004c69 	.word	0x00004c69
    2970:	cccccccd 	.word	0xcccccccd
    2974:	3ff0cccc 	.word	0x3ff0cccc
    2978:	00003b1d 	.word	0x00003b1d
    297c:	3fe40000 	.word	0x3fe40000
    2980:	00000829 	.word	0x00000829
    2984:	040000ff 	.word	0x040000ff
    2988:	9999999a 	.word	0x9999999a
    298c:	3fc99999 	.word	0x3fc99999
    2990:	00000691 	.word	0x00000691

00002994 <display_gauge>:

void display_gauge(int val)
{
    2994:	b530      	push	{r4, r5, lr}
    2996:	b085      	sub	sp, #20
    2998:	0004      	movs	r4, r0
	FT8_cmd_dl(DL_COLOR_RGB | WHITE);
    299a:	4817      	ldr	r0, [pc, #92]	; (29f8 <display_gauge+0x64>)
    299c:	4b17      	ldr	r3, [pc, #92]	; (29fc <display_gauge+0x68>)
    299e:	4798      	blx	r3
	
	// Check the speed and match COLOUR
	if (val <= (int)(gauge_range*0.5))
    29a0:	2c32      	cmp	r4, #50	; 0x32
    29a2:	dd21      	ble.n	29e8 <display_gauge+0x54>
	{
		FT8_cmd_bgcolor(DL_COLOR_RGB | GREENG);
	} 
	else if (val <= (int)(gauge_range*0.75))
    29a4:	2c4b      	cmp	r4, #75	; 0x4b
    29a6:	dd23      	ble.n	29f0 <display_gauge+0x5c>
	{
		FT8_cmd_bgcolor(DL_COLOR_RGB | YELLOWG);
	}
	else
	{
		FT8_cmd_bgcolor(DL_COLOR_RGB | REDG);
    29a8:	4815      	ldr	r0, [pc, #84]	; (2a00 <display_gauge+0x6c>)
    29aa:	4b16      	ldr	r3, [pc, #88]	; (2a04 <display_gauge+0x70>)
    29ac:	4798      	blx	r3
	}

	FT8_cmd_gauge(gauge_x0, gauge_y0, gauge_radius, 0, gauge_major_increm, gauge_minor_increm, val, gauge_range); // major = 6 (6 increments of 60 is sections of 10) and minor is increments of 5 (so sections of 2)
    29ae:	2364      	movs	r3, #100	; 0x64
    29b0:	9303      	str	r3, [sp, #12]
    29b2:	b2a3      	uxth	r3, r4
    29b4:	9302      	str	r3, [sp, #8]
    29b6:	2305      	movs	r3, #5
    29b8:	9301      	str	r3, [sp, #4]
    29ba:	3305      	adds	r3, #5
    29bc:	9300      	str	r3, [sp, #0]
    29be:	2300      	movs	r3, #0
    29c0:	225f      	movs	r2, #95	; 0x5f
    29c2:	219b      	movs	r1, #155	; 0x9b
    29c4:	2090      	movs	r0, #144	; 0x90
    29c6:	4d10      	ldr	r5, [pc, #64]	; (2a08 <display_gauge+0x74>)
    29c8:	47a8      	blx	r5
	
	display_numbers_around_gauge(gauge_x0, gauge_y0, gauge_radius, gauge_big_number-2);
    29ca:	2317      	movs	r3, #23
    29cc:	225f      	movs	r2, #95	; 0x5f
    29ce:	219b      	movs	r1, #155	; 0x9b
    29d0:	2090      	movs	r0, #144	; 0x90
    29d2:	4d0e      	ldr	r5, [pc, #56]	; (2a0c <display_gauge+0x78>)
    29d4:	47a8      	blx	r5
	display_gauge_number_large(gauge_x0, gauge_y0, gauge_radius, gauge_big_number, val);
    29d6:	9400      	str	r4, [sp, #0]
    29d8:	2319      	movs	r3, #25
    29da:	225f      	movs	r2, #95	; 0x5f
    29dc:	219b      	movs	r1, #155	; 0x9b
    29de:	2090      	movs	r0, #144	; 0x90
    29e0:	4c0b      	ldr	r4, [pc, #44]	; (2a10 <display_gauge+0x7c>)
    29e2:	47a0      	blx	r4
}
    29e4:	b005      	add	sp, #20
    29e6:	bd30      	pop	{r4, r5, pc}
		FT8_cmd_bgcolor(DL_COLOR_RGB | GREENG);
    29e8:	480a      	ldr	r0, [pc, #40]	; (2a14 <display_gauge+0x80>)
    29ea:	4b06      	ldr	r3, [pc, #24]	; (2a04 <display_gauge+0x70>)
    29ec:	4798      	blx	r3
    29ee:	e7de      	b.n	29ae <display_gauge+0x1a>
		FT8_cmd_bgcolor(DL_COLOR_RGB | YELLOWG);
    29f0:	4809      	ldr	r0, [pc, #36]	; (2a18 <display_gauge+0x84>)
    29f2:	4b04      	ldr	r3, [pc, #16]	; (2a04 <display_gauge+0x70>)
    29f4:	4798      	blx	r3
    29f6:	e7da      	b.n	29ae <display_gauge+0x1a>
    29f8:	04ffffff 	.word	0x04ffffff
    29fc:	00000411 	.word	0x00000411
    2a00:	04b51616 	.word	0x04b51616
    2a04:	000004d1 	.word	0x000004d1
    2a08:	00000511 	.word	0x00000511
    2a0c:	000026c1 	.word	0x000026c1
    2a10:	00002871 	.word	0x00002871
    2a14:	04047004 	.word	0x04047004
    2a18:	04e3a70e 	.word	0x04e3a70e

00002a1c <display_line>:

void display_line(int x0, int y0, int x1, int y1, int w0)
{
    2a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a1e:	b083      	sub	sp, #12
    2a20:	0004      	movs	r4, r0
    2a22:	000d      	movs	r5, r1
    2a24:	0016      	movs	r6, r2
    2a26:	001f      	movs	r7, r3
	FT8_cmd_dl(DL_COLOR_RGB | WHITE);
    2a28:	4806      	ldr	r0, [pc, #24]	; (2a44 <display_line+0x28>)
    2a2a:	4b07      	ldr	r3, [pc, #28]	; (2a48 <display_line+0x2c>)
    2a2c:	4798      	blx	r3
	FT8_cmd_line(x0,y0,x1,y1,w0);
    2a2e:	b23b      	sxth	r3, r7
    2a30:	b232      	sxth	r2, r6
    2a32:	b229      	sxth	r1, r5
    2a34:	b220      	sxth	r0, r4
    2a36:	466c      	mov	r4, sp
    2a38:	8c24      	ldrh	r4, [r4, #32]
    2a3a:	9400      	str	r4, [sp, #0]
    2a3c:	4c03      	ldr	r4, [pc, #12]	; (2a4c <display_line+0x30>)
    2a3e:	47a0      	blx	r4
}
    2a40:	b003      	add	sp, #12
    2a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a44:	04ffffff 	.word	0x04ffffff
    2a48:	00000411 	.word	0x00000411
    2a4c:	00000759 	.word	0x00000759

00002a50 <display_progress>:


void display_progress(int val)
{
    2a50:	b570      	push	{r4, r5, r6, lr}
    2a52:	b084      	sub	sp, #16
    2a54:	0005      	movs	r5, r0
	
	// Check the battery value and match the colour
	if (val <= (int)(battery_range*0.3333))
    2a56:	2821      	cmp	r0, #33	; 0x21
    2a58:	dd2b      	ble.n	2ab2 <display_progress+0x62>
	{
		FT8_cmd_dl(DL_COLOR_RGB | REDG);
	}
	else if (val <= (int)(battery_range*0.6667))
    2a5a:	2842      	cmp	r0, #66	; 0x42
    2a5c:	dd2d      	ble.n	2aba <display_progress+0x6a>
	{
		FT8_cmd_dl(DL_COLOR_RGB | YELLOWG);
	}
	else
	{
		FT8_cmd_dl(DL_COLOR_RGB | GREENG);
    2a5e:	4819      	ldr	r0, [pc, #100]	; (2ac4 <display_progress+0x74>)
    2a60:	4b19      	ldr	r3, [pc, #100]	; (2ac8 <display_progress+0x78>)
    2a62:	4798      	blx	r3
	}
	
	
	FT8_cmd_bgcolor(DL_COLOR_RGB | GRAY);
    2a64:	4819      	ldr	r0, [pc, #100]	; (2acc <display_progress+0x7c>)
    2a66:	4b1a      	ldr	r3, [pc, #104]	; (2ad0 <display_progress+0x80>)
    2a68:	4798      	blx	r3

	FT8_cmd_progress(VERT_X+(int)(0.1*WIDTH), (int)(HEIGHT*0.13), (int)(((1-VERT_X_PROPORTION-0.1)*0.7)*WIDTH), (int)(HEIGHT*0.1667), 0, val, battery_range); //range 100
    2a6a:	2364      	movs	r3, #100	; 0x64
    2a6c:	9302      	str	r3, [sp, #8]
    2a6e:	b2ab      	uxth	r3, r5
    2a70:	9301      	str	r3, [sp, #4]
    2a72:	2300      	movs	r3, #0
    2a74:	9300      	str	r3, [sp, #0]
    2a76:	332d      	adds	r3, #45	; 0x2d
    2a78:	2264      	movs	r2, #100	; 0x64
    2a7a:	2123      	movs	r1, #35	; 0x23
    2a7c:	20a8      	movs	r0, #168	; 0xa8
    2a7e:	0040      	lsls	r0, r0, #1
    2a80:	4c14      	ldr	r4, [pc, #80]	; (2ad4 <display_progress+0x84>)
    2a82:	47a0      	blx	r4
	
	display_numberColorRight(10+VERT_X+(int)(0.1*WIDTH)+(int)(((1-VERT_X_PROPORTION-0.1)*0.7)*WIDTH)/2,(int)(HEIGHT*0.13)+8,29,val,255,255,255);
    2a84:	26c6      	movs	r6, #198	; 0xc6
    2a86:	0076      	lsls	r6, r6, #1
    2a88:	24ff      	movs	r4, #255	; 0xff
    2a8a:	9402      	str	r4, [sp, #8]
    2a8c:	9401      	str	r4, [sp, #4]
    2a8e:	9400      	str	r4, [sp, #0]
    2a90:	002b      	movs	r3, r5
    2a92:	221d      	movs	r2, #29
    2a94:	212b      	movs	r1, #43	; 0x2b
    2a96:	0030      	movs	r0, r6
    2a98:	4d0f      	ldr	r5, [pc, #60]	; (2ad8 <display_progress+0x88>)
    2a9a:	47a8      	blx	r5
	display_textColor(10+VERT_X+(int)(0.1*WIDTH)+(int)(((1-VERT_X_PROPORTION-0.1)*0.7)*WIDTH)/2,(int)(HEIGHT*0.13)+8,29,"%",255,255,255);
    2a9c:	9402      	str	r4, [sp, #8]
    2a9e:	9401      	str	r4, [sp, #4]
    2aa0:	9400      	str	r4, [sp, #0]
    2aa2:	4b0e      	ldr	r3, [pc, #56]	; (2adc <display_progress+0x8c>)
    2aa4:	221d      	movs	r2, #29
    2aa6:	212b      	movs	r1, #43	; 0x2b
    2aa8:	0030      	movs	r0, r6
    2aaa:	4c0d      	ldr	r4, [pc, #52]	; (2ae0 <display_progress+0x90>)
    2aac:	47a0      	blx	r4
}
    2aae:	b004      	add	sp, #16
    2ab0:	bd70      	pop	{r4, r5, r6, pc}
		FT8_cmd_dl(DL_COLOR_RGB | REDG);
    2ab2:	480c      	ldr	r0, [pc, #48]	; (2ae4 <display_progress+0x94>)
    2ab4:	4b04      	ldr	r3, [pc, #16]	; (2ac8 <display_progress+0x78>)
    2ab6:	4798      	blx	r3
    2ab8:	e7d4      	b.n	2a64 <display_progress+0x14>
		FT8_cmd_dl(DL_COLOR_RGB | YELLOWG);
    2aba:	480b      	ldr	r0, [pc, #44]	; (2ae8 <display_progress+0x98>)
    2abc:	4b02      	ldr	r3, [pc, #8]	; (2ac8 <display_progress+0x78>)
    2abe:	4798      	blx	r3
    2ac0:	e7d0      	b.n	2a64 <display_progress+0x14>
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	04047004 	.word	0x04047004
    2ac8:	00000411 	.word	0x00000411
    2acc:	04c0c0c0 	.word	0x04c0c0c0
    2ad0:	000004d1 	.word	0x000004d1
    2ad4:	000005d9 	.word	0x000005d9
    2ad8:	00002605 	.word	0x00002605
    2adc:	00005dd0 	.word	0x00005dd0
    2ae0:	0000267d 	.word	0x0000267d
    2ae4:	04b51616 	.word	0x04b51616
    2ae8:	04e3a70e 	.word	0x04e3a70e

00002aec <handle_can>:

void handle_can(void){
    2aec:	b570      	push	{r4, r5, r6, lr}
	struct can_message* msg = can_buffer_pop();
    2aee:	4b5b      	ldr	r3, [pc, #364]	; (2c5c <handle_can+0x170>)
    2af0:	4798      	blx	r3
    2af2:	1e04      	subs	r4, r0, #0
	
	if(msg == NULL) return;
    2af4:	d07b      	beq.n	2bee <handle_can+0x102>
	
	switch (msg->id)
    2af6:	6803      	ldr	r3, [r0, #0]
    2af8:	22d6      	movs	r2, #214	; 0xd6
    2afa:	00d2      	lsls	r2, r2, #3
    2afc:	4293      	cmp	r3, r2
    2afe:	d100      	bne.n	2b02 <handle_can+0x16>
    2b00:	e076      	b.n	2bf0 <handle_can+0x104>
    2b02:	d91a      	bls.n	2b3a <handle_can+0x4e>
    2b04:	4a56      	ldr	r2, [pc, #344]	; (2c60 <handle_can+0x174>)
    2b06:	4293      	cmp	r3, r2
    2b08:	d100      	bne.n	2b0c <handle_can+0x20>
    2b0a:	e08d      	b.n	2c28 <handle_can+0x13c>
    2b0c:	d82b      	bhi.n	2b66 <handle_can+0x7a>
    2b0e:	4a55      	ldr	r2, [pc, #340]	; (2c64 <handle_can+0x178>)
    2b10:	4293      	cmp	r3, r2
    2b12:	d100      	bne.n	2b16 <handle_can+0x2a>
    2b14:	e081      	b.n	2c1a <handle_can+0x12e>
    2b16:	4a54      	ldr	r2, [pc, #336]	; (2c68 <handle_can+0x17c>)
    2b18:	4293      	cmp	r3, r2
    2b1a:	d168      	bne.n	2bee <handle_can+0x102>
		
		break;
		
		case 0x7A1: //message with motor data 1
		
		motor_temp1 = msg->data[0]/2;
    2b1c:	7943      	ldrb	r3, [r0, #5]
    2b1e:	085b      	lsrs	r3, r3, #1
    2b20:	4d52      	ldr	r5, [pc, #328]	; (2c6c <handle_can+0x180>)
    2b22:	626b      	str	r3, [r5, #36]	; 0x24
		motor_voltage1 = (msg->data[4]*256+msg->data[5])/10.0f;
    2b24:	7a40      	ldrb	r0, [r0, #9]
    2b26:	0200      	lsls	r0, r0, #8
    2b28:	7aa3      	ldrb	r3, [r4, #10]
    2b2a:	18c0      	adds	r0, r0, r3
    2b2c:	4b50      	ldr	r3, [pc, #320]	; (2c70 <handle_can+0x184>)
    2b2e:	4798      	blx	r3
    2b30:	4950      	ldr	r1, [pc, #320]	; (2c74 <handle_can+0x188>)
    2b32:	4b51      	ldr	r3, [pc, #324]	; (2c78 <handle_can+0x18c>)
    2b34:	4798      	blx	r3
    2b36:	62a8      	str	r0, [r5, #40]	; 0x28
		
		break;
    2b38:	e059      	b.n	2bee <handle_can+0x102>
	switch (msg->id)
    2b3a:	2b09      	cmp	r3, #9
    2b3c:	d031      	beq.n	2ba2 <handle_can+0xb6>
    2b3e:	d909      	bls.n	2b54 <handle_can+0x68>
    2b40:	2b0a      	cmp	r3, #10
    2b42:	d04e      	beq.n	2be2 <handle_can+0xf6>
    2b44:	2202      	movs	r2, #2
    2b46:	32ff      	adds	r2, #255	; 0xff
    2b48:	4293      	cmp	r3, r2
    2b4a:	d150      	bne.n	2bee <handle_can+0x102>
		logging_started = true;
    2b4c:	2201      	movs	r2, #1
    2b4e:	4b4b      	ldr	r3, [pc, #300]	; (2c7c <handle_can+0x190>)
    2b50:	701a      	strb	r2, [r3, #0]
		break;
    2b52:	e04c      	b.n	2bee <handle_can+0x102>
	switch (msg->id)
    2b54:	2b08      	cmp	r3, #8
    2b56:	d14a      	bne.n	2bee <handle_can+0x102>
		if(msg->data[0] == 1){
    2b58:	7943      	ldrb	r3, [r0, #5]
    2b5a:	2b01      	cmp	r3, #1
    2b5c:	d01d      	beq.n	2b9a <handle_can+0xae>
			precharge_enabled = false;
    2b5e:	2200      	movs	r2, #0
    2b60:	4b47      	ldr	r3, [pc, #284]	; (2c80 <handle_can+0x194>)
    2b62:	701a      	strb	r2, [r3, #0]
    2b64:	e043      	b.n	2bee <handle_can+0x102>
	switch (msg->id)
    2b66:	4a47      	ldr	r2, [pc, #284]	; (2c84 <handle_can+0x198>)
    2b68:	4293      	cmp	r3, r2
    2b6a:	d100      	bne.n	2b6e <handle_can+0x82>
    2b6c:	e074      	b.n	2c58 <handle_can+0x16c>
    2b6e:	4a46      	ldr	r2, [pc, #280]	; (2c88 <handle_can+0x19c>)
    2b70:	4293      	cmp	r3, r2
    2b72:	d13c      	bne.n	2bee <handle_can+0x102>
		
		break;
		
		case 0x7A5: //startup parameters message
		
		positive_slew_rate = msg->data[0]*256 + msg->data[1];
    2b74:	7943      	ldrb	r3, [r0, #5]
    2b76:	021b      	lsls	r3, r3, #8
    2b78:	7982      	ldrb	r2, [r0, #6]
    2b7a:	189b      	adds	r3, r3, r2
    2b7c:	4a3b      	ldr	r2, [pc, #236]	; (2c6c <handle_can+0x180>)
    2b7e:	6353      	str	r3, [r2, #52]	; 0x34
		negative_slew_rate = msg->data[2]*256 + msg->data[3];
    2b80:	79c3      	ldrb	r3, [r0, #7]
    2b82:	021b      	lsls	r3, r3, #8
    2b84:	7a01      	ldrb	r1, [r0, #8]
    2b86:	185b      	adds	r3, r3, r1
    2b88:	6393      	str	r3, [r2, #56]	; 0x38
		pack_dcl = msg->data[4]*256 + msg->data[5];
    2b8a:	7a43      	ldrb	r3, [r0, #9]
    2b8c:	021b      	lsls	r3, r3, #8
    2b8e:	7a81      	ldrb	r1, [r0, #10]
    2b90:	185b      	adds	r3, r3, r1
    2b92:	63d3      	str	r3, [r2, #60]	; 0x3c
		torque_vectoring_active = msg->data[6];
    2b94:	7ac3      	ldrb	r3, [r0, #11]
    2b96:	6413      	str	r3, [r2, #64]	; 0x40
		
		break;
    2b98:	e029      	b.n	2bee <handle_can+0x102>
			precharge_enabled = true;
    2b9a:	2201      	movs	r2, #1
    2b9c:	4b38      	ldr	r3, [pc, #224]	; (2c80 <handle_can+0x194>)
    2b9e:	701a      	strb	r2, [r3, #0]
    2ba0:	e025      	b.n	2bee <handle_can+0x102>
		msg_timeout_counter = 0;  // @@ separate later into two different timeouts
    2ba2:	4932      	ldr	r1, [pc, #200]	; (2c6c <handle_can+0x180>)
    2ba4:	2300      	movs	r3, #0
    2ba6:	608b      	str	r3, [r1, #8]
		charge_safety = ((msg->data[1]>>(CHARGE_SAFETY_BIT))&1); // shifts by 2 such that xxxx x?xx --> xxxx x?  this & 1 = ?
    2ba8:	7980      	ldrb	r0, [r0, #6]
    2baa:	0882      	lsrs	r2, r0, #2
    2bac:	3301      	adds	r3, #1
    2bae:	401a      	ands	r2, r3
    2bb0:	4c36      	ldr	r4, [pc, #216]	; (2c8c <handle_can+0x1a0>)
    2bb2:	7022      	strb	r2, [r4, #0]
		discharge_state = ((msg->data[1]>>(DISCHARGE_STATE_BIT))&1); // shifts by 0 such that xxxx xxx? --> xxxx xxxx this & 1 = ?
    2bb4:	4003      	ands	r3, r0
    2bb6:	4836      	ldr	r0, [pc, #216]	; (2c90 <handle_can+0x1a4>)
    2bb8:	7003      	strb	r3, [r0, #0]
		if (AMS_active == 1 && AMS_state == 0) // If the light is now active (responding to the messages) AND it is currently off (meaning that the car is safe)
    2bba:	7b09      	ldrb	r1, [r1, #12]
    2bbc:	2901      	cmp	r1, #1
    2bbe:	d116      	bne.n	2bee <handle_can+0x102>
    2bc0:	4934      	ldr	r1, [pc, #208]	; (2c94 <handle_can+0x1a8>)
    2bc2:	7809      	ldrb	r1, [r1, #0]
    2bc4:	2900      	cmp	r1, #0
    2bc6:	d112      	bne.n	2bee <handle_can+0x102>
			if (charge_safety == 0 && discharge_state == 0) // If both are 0, meaning that neither one is high then the EMSDC loop will be OPEN so LED illuminated
    2bc8:	2a00      	cmp	r2, #0
    2bca:	d110      	bne.n	2bee <handle_can+0x102>
    2bcc:	2b00      	cmp	r3, #0
    2bce:	d10e      	bne.n	2bee <handle_can+0x102>
				AMS_state = 1;
    2bd0:	3201      	adds	r2, #1
    2bd2:	4b30      	ldr	r3, [pc, #192]	; (2c94 <handle_can+0x1a8>)
    2bd4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2bd6:	2280      	movs	r2, #128	; 0x80
    2bd8:	0392      	lsls	r2, r2, #14
    2bda:	23c0      	movs	r3, #192	; 0xc0
    2bdc:	05db      	lsls	r3, r3, #23
    2bde:	619a      	str	r2, [r3, #24]
    2be0:	e005      	b.n	2bee <handle_can+0x102>
		battery_temp = msg->data[1];
    2be2:	7982      	ldrb	r2, [r0, #6]
    2be4:	4b21      	ldr	r3, [pc, #132]	; (2c6c <handle_can+0x180>)
    2be6:	61da      	str	r2, [r3, #28]
		battery_charge = msg->data[3];
    2be8:	7a02      	ldrb	r2, [r0, #8]
    2bea:	4b2a      	ldr	r3, [pc, #168]	; (2c94 <handle_can+0x1a8>)
    2bec:	605a      	str	r2, [r3, #4]
		
		break;
	}
	
	return;
}
    2bee:	bd70      	pop	{r4, r5, r6, pc}
		pack_voltage = (msg->data[2]*256+msg->data[3])/10.0f;
    2bf0:	79c0      	ldrb	r0, [r0, #7]
    2bf2:	0200      	lsls	r0, r0, #8
    2bf4:	7a23      	ldrb	r3, [r4, #8]
    2bf6:	18c0      	adds	r0, r0, r3
    2bf8:	4e1d      	ldr	r6, [pc, #116]	; (2c70 <handle_can+0x184>)
    2bfa:	47b0      	blx	r6
    2bfc:	4d1e      	ldr	r5, [pc, #120]	; (2c78 <handle_can+0x18c>)
    2bfe:	491d      	ldr	r1, [pc, #116]	; (2c74 <handle_can+0x188>)
    2c00:	47a8      	blx	r5
    2c02:	4b24      	ldr	r3, [pc, #144]	; (2c94 <handle_can+0x1a8>)
    2c04:	6098      	str	r0, [r3, #8]
		current = (msg->data[0]*256+msg->data[1])/10.0f;
    2c06:	7960      	ldrb	r0, [r4, #5]
    2c08:	0200      	lsls	r0, r0, #8
    2c0a:	79a3      	ldrb	r3, [r4, #6]
    2c0c:	18c0      	adds	r0, r0, r3
    2c0e:	47b0      	blx	r6
    2c10:	4918      	ldr	r1, [pc, #96]	; (2c74 <handle_can+0x188>)
    2c12:	47a8      	blx	r5
    2c14:	4b15      	ldr	r3, [pc, #84]	; (2c6c <handle_can+0x180>)
    2c16:	6218      	str	r0, [r3, #32]
		break;
    2c18:	e7e9      	b.n	2bee <handle_can+0x102>
		dcl = msg->data[0]*256 + msg->data[1];
    2c1a:	7943      	ldrb	r3, [r0, #5]
    2c1c:	021b      	lsls	r3, r3, #8
    2c1e:	7982      	ldrb	r2, [r0, #6]
    2c20:	189b      	adds	r3, r3, r2
    2c22:	4a1c      	ldr	r2, [pc, #112]	; (2c94 <handle_can+0x1a8>)
    2c24:	60d3      	str	r3, [r2, #12]
		break;
    2c26:	e7e2      	b.n	2bee <handle_can+0x102>
		motor_temp2 = msg->data[0]/2;
    2c28:	7943      	ldrb	r3, [r0, #5]
    2c2a:	085b      	lsrs	r3, r3, #1
    2c2c:	4d0f      	ldr	r5, [pc, #60]	; (2c6c <handle_can+0x180>)
    2c2e:	62eb      	str	r3, [r5, #44]	; 0x2c
		motor_voltage2 = (msg->data[4]*256+msg->data[5])/10.0f;
    2c30:	7a40      	ldrb	r0, [r0, #9]
    2c32:	0200      	lsls	r0, r0, #8
    2c34:	7aa3      	ldrb	r3, [r4, #10]
    2c36:	18c0      	adds	r0, r0, r3
    2c38:	4b0d      	ldr	r3, [pc, #52]	; (2c70 <handle_can+0x184>)
    2c3a:	4798      	blx	r3
    2c3c:	490d      	ldr	r1, [pc, #52]	; (2c74 <handle_can+0x188>)
    2c3e:	4b0e      	ldr	r3, [pc, #56]	; (2c78 <handle_can+0x18c>)
    2c40:	4798      	blx	r3
    2c42:	6328      	str	r0, [r5, #48]	; 0x30
		break;
    2c44:	e7d3      	b.n	2bee <handle_can+0x102>
		for(int i = 0; i < 8; i++)	vcu_status[i] = msg->data[i];
    2c46:	18e2      	adds	r2, r4, r3
    2c48:	7950      	ldrb	r0, [r2, #5]
    2c4a:	0099      	lsls	r1, r3, #2
    2c4c:	4a12      	ldr	r2, [pc, #72]	; (2c98 <handle_can+0x1ac>)
    2c4e:	5088      	str	r0, [r1, r2]
    2c50:	3301      	adds	r3, #1
    2c52:	2b07      	cmp	r3, #7
    2c54:	ddf7      	ble.n	2c46 <handle_can+0x15a>
    2c56:	e7ca      	b.n	2bee <handle_can+0x102>
	switch (msg->id)
    2c58:	2300      	movs	r3, #0
    2c5a:	e7fa      	b.n	2c52 <handle_can+0x166>
    2c5c:	000023e5 	.word	0x000023e5
    2c60:	000007a2 	.word	0x000007a2
    2c64:	000006b1 	.word	0x000006b1
    2c68:	000007a1 	.word	0x000007a1
    2c6c:	200000e0 	.word	0x200000e0
    2c70:	00003a7d 	.word	0x00003a7d
    2c74:	41200000 	.word	0x41200000
    2c78:	0000341d 	.word	0x0000341d
    2c7c:	20000646 	.word	0x20000646
    2c80:	20000644 	.word	0x20000644
    2c84:	000007a4 	.word	0x000007a4
    2c88:	000007a5 	.word	0x000007a5
    2c8c:	20000647 	.word	0x20000647
    2c90:	20000645 	.word	0x20000645
    2c94:	20000014 	.word	0x20000014
    2c98:	20000648 	.word	0x20000648

00002c9c <display_handler>:

	//display_numberRight((int)(WIDTH-(0.03*WIDTH)),(int)((HEIGHT*0.3333)+(0.03*HEIGHT)),1,bob);
}

void display_handler()
{
    2c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c9e:	46d6      	mov	lr, sl
    2ca0:	4647      	mov	r7, r8
    2ca2:	b580      	push	{r7, lr}
    2ca4:	b085      	sub	sp, #20
	// Everything must happen within the Start and End frame placeholders
	startFrame();
    2ca6:	4b67      	ldr	r3, [pc, #412]	; (2e44 <display_handler+0x1a8>)
    2ca8:	4798      	blx	r3
	
	// Screen Display
	
	// AMMETER/VOLTMETER
	if(precharge_enabled){
    2caa:	4b67      	ldr	r3, [pc, #412]	; (2e48 <display_handler+0x1ac>)
    2cac:	781b      	ldrb	r3, [r3, #0]
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d100      	bne.n	2cb4 <display_handler+0x18>
    2cb2:	e09e      	b.n	2df2 <display_handler+0x156>
		display_gauge((int)((motor_voltage1 < motor_voltage2 ? motor_voltage1 : motor_voltage2)/pack_voltage*100)); // voltmeter GAUGE
    2cb4:	4b65      	ldr	r3, [pc, #404]	; (2e4c <display_handler+0x1b0>)
    2cb6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    2cb8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    2cba:	1c21      	adds	r1, r4, #0
    2cbc:	1c28      	adds	r0, r5, #0
    2cbe:	4b64      	ldr	r3, [pc, #400]	; (2e50 <display_handler+0x1b4>)
    2cc0:	4798      	blx	r3
    2cc2:	2800      	cmp	r0, #0
    2cc4:	d000      	beq.n	2cc8 <display_handler+0x2c>
    2cc6:	1c2c      	adds	r4, r5, #0
    2cc8:	4b62      	ldr	r3, [pc, #392]	; (2e54 <display_handler+0x1b8>)
    2cca:	6899      	ldr	r1, [r3, #8]
    2ccc:	1c20      	adds	r0, r4, #0
    2cce:	4b62      	ldr	r3, [pc, #392]	; (2e58 <display_handler+0x1bc>)
    2cd0:	4798      	blx	r3
    2cd2:	4962      	ldr	r1, [pc, #392]	; (2e5c <display_handler+0x1c0>)
    2cd4:	4b62      	ldr	r3, [pc, #392]	; (2e60 <display_handler+0x1c4>)
    2cd6:	4798      	blx	r3
    2cd8:	4b62      	ldr	r3, [pc, #392]	; (2e64 <display_handler+0x1c8>)
    2cda:	4798      	blx	r3
    2cdc:	4b62      	ldr	r3, [pc, #392]	; (2e68 <display_handler+0x1cc>)
    2cde:	4798      	blx	r3
		display_text((int)(gauge_x0-(gauge_radius*0.4)),10,22,"VOLTMETER"); // TITLE
    2ce0:	4b62      	ldr	r3, [pc, #392]	; (2e6c <display_handler+0x1d0>)
    2ce2:	2216      	movs	r2, #22
    2ce4:	210a      	movs	r1, #10
    2ce6:	206a      	movs	r0, #106	; 0x6a
    2ce8:	4c61      	ldr	r4, [pc, #388]	; (2e70 <display_handler+0x1d4>)
    2cea:	47a0      	blx	r4
		display_text((int)(gauge_x0-(gauge_radius*0.4)),(int)(HEIGHT-(0.05*HEIGHT)),20,"% max voltage"); // UNIT
    2cec:	4b61      	ldr	r3, [pc, #388]	; (2e74 <display_handler+0x1d8>)
    2cee:	2214      	movs	r2, #20
    2cf0:	2181      	movs	r1, #129	; 0x81
    2cf2:	0049      	lsls	r1, r1, #1
    2cf4:	206a      	movs	r0, #106	; 0x6a
    2cf6:	47a0      	blx	r4
		display_text((int)(gauge_x0-(gauge_radius*0.4)),10,22,"AMMETER"); // TITLE
		display_text((int)(gauge_x0-(gauge_radius*0.4)),(int)(HEIGHT-(0.05*HEIGHT)),20,"% max current"); // UNIT	
	}
	
	// SEPARATOR LINE (SECTION, SPEEDOMETER)
	display_line(VERT_X,0, VERT_X, HEIGHT, 3);
    2cf8:	2490      	movs	r4, #144	; 0x90
    2cfa:	0064      	lsls	r4, r4, #1
    2cfc:	2603      	movs	r6, #3
    2cfe:	9600      	str	r6, [sp, #0]
    2d00:	2388      	movs	r3, #136	; 0x88
    2d02:	005b      	lsls	r3, r3, #1
    2d04:	0022      	movs	r2, r4
    2d06:	2100      	movs	r1, #0
    2d08:	0020      	movs	r0, r4
    2d0a:	4d5b      	ldr	r5, [pc, #364]	; (2e78 <display_handler+0x1dc>)
    2d0c:	47a8      	blx	r5
	
	// SERPARATOR LINES, RIGHT HAND SIDE SECTIONS
	display_line(VERT_X,(int)(HEIGHT*(0.3333)),WIDTH,(int)(HEIGHT*(0.3333)),3);
    2d0e:	27f0      	movs	r7, #240	; 0xf0
    2d10:	007f      	lsls	r7, r7, #1
    2d12:	9600      	str	r6, [sp, #0]
    2d14:	235a      	movs	r3, #90	; 0x5a
    2d16:	003a      	movs	r2, r7
    2d18:	215a      	movs	r1, #90	; 0x5a
    2d1a:	0020      	movs	r0, r4
    2d1c:	47a8      	blx	r5
	display_line(VERT_X,(int)(HEIGHT*(0.6667)),WIDTH,(int)(HEIGHT*(0.6667)),3);
    2d1e:	9600      	str	r6, [sp, #0]
    2d20:	23b5      	movs	r3, #181	; 0xb5
    2d22:	003a      	movs	r2, r7
    2d24:	21b5      	movs	r1, #181	; 0xb5
    2d26:	0020      	movs	r0, r4
    2d28:	47a8      	blx	r5
	
	// BATTERY CHARGE - read it from the buffer - third byte
	display_progress((battery_charge)/2);
    2d2a:	4b4a      	ldr	r3, [pc, #296]	; (2e54 <display_handler+0x1b8>)
    2d2c:	685b      	ldr	r3, [r3, #4]
    2d2e:	0fd8      	lsrs	r0, r3, #31
    2d30:	18c0      	adds	r0, r0, r3
    2d32:	1040      	asrs	r0, r0, #1
    2d34:	4b51      	ldr	r3, [pc, #324]	; (2e7c <display_handler+0x1e0>)
    2d36:	4798      	blx	r3
	display_text((int)(VERT_X+(0.05*WIDTH)),10,22,"BATTERY CHARGE"); // TITLE
    2d38:	259c      	movs	r5, #156	; 0x9c
    2d3a:	006d      	lsls	r5, r5, #1
    2d3c:	4b50      	ldr	r3, [pc, #320]	; (2e80 <display_handler+0x1e4>)
    2d3e:	2216      	movs	r2, #22
    2d40:	210a      	movs	r1, #10
    2d42:	0028      	movs	r0, r5
    2d44:	4c4a      	ldr	r4, [pc, #296]	; (2e70 <display_handler+0x1d4>)
    2d46:	47a0      	blx	r4
	
	// reset the buffer (later as i need to do the second part of the message) // buffer is already reset in the can
	
	// BATTERY TEMP
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.3333)+(0.03*HEIGHT)),22,"BATTERY"); // TITLE
    2d48:	4b4e      	ldr	r3, [pc, #312]	; (2e84 <display_handler+0x1e8>)
    2d4a:	2216      	movs	r2, #22
    2d4c:	2162      	movs	r1, #98	; 0x62
    2d4e:	0028      	movs	r0, r5
    2d50:	47a0      	blx	r4
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.3333)+(0.13*HEIGHT)),22,"TEMP"); // TITLE
    2d52:	4b4d      	ldr	r3, [pc, #308]	; (2e88 <display_handler+0x1ec>)
    2d54:	2216      	movs	r2, #22
    2d56:	217e      	movs	r1, #126	; 0x7e
    2d58:	0028      	movs	r0, r5
    2d5a:	47a0      	blx	r4
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.3333)+(0.23*HEIGHT)),22,"(degC)"); // TITLE
    2d5c:	4b4b      	ldr	r3, [pc, #300]	; (2e8c <display_handler+0x1f0>)
    2d5e:	2216      	movs	r2, #22
    2d60:	2199      	movs	r1, #153	; 0x99
    2d62:	0028      	movs	r0, r5
    2d64:	47a0      	blx	r4
	// TO SET A FONT HIGHER THAN 31:
	FT8_cmd_romfont(1,33);
    2d66:	2121      	movs	r1, #33	; 0x21
    2d68:	2001      	movs	r0, #1
    2d6a:	4b49      	ldr	r3, [pc, #292]	; (2e90 <display_handler+0x1f4>)
    2d6c:	4698      	mov	r8, r3
    2d6e:	4798      	blx	r3
	//display_numberRight((int)(WIDTH-(0.03*WIDTH)),(int)((HEIGHT*0.3333)+(0.03*HEIGHT)),1,30); // The last argument is the value
	
	display_numberRight((int)(WIDTH-(0.03*WIDTH)),(int)((HEIGHT*0.3333)+(0.03*HEIGHT)),1,battery_temp); // The last argument is the value
    2d70:	4e36      	ldr	r6, [pc, #216]	; (2e4c <display_handler+0x1b0>)
    2d72:	69f3      	ldr	r3, [r6, #28]
    2d74:	2201      	movs	r2, #1
    2d76:	2162      	movs	r1, #98	; 0x62
    2d78:	20d2      	movs	r0, #210	; 0xd2
    2d7a:	30ff      	adds	r0, #255	; 0xff
    2d7c:	4f45      	ldr	r7, [pc, #276]	; (2e94 <display_handler+0x1f8>)
    2d7e:	47b8      	blx	r7
	//display_numberRight((int)(WIDTH-(0.03*WIDTH)),(int)((HEIGHT*0.3333)+(0.03*HEIGHT)),1,discharge_state); // The last argument is the value
	
	//MOTOR TEMP
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.6667)+(0.03*HEIGHT)),22,"MOTOR"); // TITLE
    2d80:	4b45      	ldr	r3, [pc, #276]	; (2e98 <display_handler+0x1fc>)
    2d82:	2216      	movs	r2, #22
    2d84:	21bd      	movs	r1, #189	; 0xbd
    2d86:	0028      	movs	r0, r5
    2d88:	47a0      	blx	r4
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.6667)+(0.13*HEIGHT)),22,"TEMP"); // TITLE
    2d8a:	4b3f      	ldr	r3, [pc, #252]	; (2e88 <display_handler+0x1ec>)
    2d8c:	2216      	movs	r2, #22
    2d8e:	21d8      	movs	r1, #216	; 0xd8
    2d90:	0028      	movs	r0, r5
    2d92:	47a0      	blx	r4
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.6667)+(0.23*HEIGHT)),22,"(degC)"); // TITLE
    2d94:	4b3d      	ldr	r3, [pc, #244]	; (2e8c <display_handler+0x1f0>)
    2d96:	2216      	movs	r2, #22
    2d98:	21f3      	movs	r1, #243	; 0xf3
    2d9a:	0028      	movs	r0, r5
    2d9c:	47a0      	blx	r4
	// TO SET A FONT HIGHER THAN 31:
	FT8_cmd_romfont(1,33);
    2d9e:	2121      	movs	r1, #33	; 0x21
    2da0:	2001      	movs	r0, #1
    2da2:	47c0      	blx	r8
	display_numberRight((int)(WIDTH-(0.03*WIDTH)),(int)((HEIGHT*0.6667)+(0.03*HEIGHT)),1,motor_temp1 > motor_temp2 ? motor_temp1 : motor_temp2);
    2da4:	6a72      	ldr	r2, [r6, #36]	; 0x24
    2da6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2da8:	4293      	cmp	r3, r2
    2daa:	da00      	bge.n	2dae <display_handler+0x112>
    2dac:	0013      	movs	r3, r2
    2dae:	2201      	movs	r2, #1
    2db0:	21bd      	movs	r1, #189	; 0xbd
    2db2:	20d2      	movs	r0, #210	; 0xd2
    2db4:	30ff      	adds	r0, #255	; 0xff
    2db6:	4c37      	ldr	r4, [pc, #220]	; (2e94 <display_handler+0x1f8>)
    2db8:	47a0      	blx	r4
	
	//LOGGING STATUS
	display_text(0,0,20,"Logging:");
    2dba:	4b38      	ldr	r3, [pc, #224]	; (2e9c <display_handler+0x200>)
    2dbc:	2214      	movs	r2, #20
    2dbe:	2100      	movs	r1, #0
    2dc0:	2000      	movs	r0, #0
    2dc2:	4c2b      	ldr	r4, [pc, #172]	; (2e70 <display_handler+0x1d4>)
    2dc4:	47a0      	blx	r4
	if(logging_started)	display_textColor(WIDTH/11,0,20,"Active",0,128,0);
    2dc6:	4b36      	ldr	r3, [pc, #216]	; (2ea0 <display_handler+0x204>)
    2dc8:	781b      	ldrb	r3, [r3, #0]
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d12e      	bne.n	2e2c <display_handler+0x190>
	else				display_textColor(WIDTH/11,0,20,"Inactive",200,0,0);
    2dce:	2300      	movs	r3, #0
    2dd0:	9302      	str	r3, [sp, #8]
    2dd2:	9301      	str	r3, [sp, #4]
    2dd4:	33c8      	adds	r3, #200	; 0xc8
    2dd6:	9300      	str	r3, [sp, #0]
    2dd8:	4b32      	ldr	r3, [pc, #200]	; (2ea4 <display_handler+0x208>)
    2dda:	2214      	movs	r2, #20
    2ddc:	2100      	movs	r1, #0
    2dde:	202b      	movs	r0, #43	; 0x2b
    2de0:	4c31      	ldr	r4, [pc, #196]	; (2ea8 <display_handler+0x20c>)
    2de2:	47a0      	blx	r4
	
	endFrame();
    2de4:	4b31      	ldr	r3, [pc, #196]	; (2eac <display_handler+0x210>)
    2de6:	4798      	blx	r3
}
    2de8:	b005      	add	sp, #20
    2dea:	bc0c      	pop	{r2, r3}
    2dec:	4690      	mov	r8, r2
    2dee:	469a      	mov	sl, r3
    2df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		display_gauge((int)(current/dcl*100)); // ammeter GAUGE
    2df2:	4b18      	ldr	r3, [pc, #96]	; (2e54 <display_handler+0x1b8>)
    2df4:	68d8      	ldr	r0, [r3, #12]
    2df6:	4b2e      	ldr	r3, [pc, #184]	; (2eb0 <display_handler+0x214>)
    2df8:	4798      	blx	r3
    2dfa:	1c01      	adds	r1, r0, #0
    2dfc:	4b13      	ldr	r3, [pc, #76]	; (2e4c <display_handler+0x1b0>)
    2dfe:	6a18      	ldr	r0, [r3, #32]
    2e00:	4b15      	ldr	r3, [pc, #84]	; (2e58 <display_handler+0x1bc>)
    2e02:	4798      	blx	r3
    2e04:	4915      	ldr	r1, [pc, #84]	; (2e5c <display_handler+0x1c0>)
    2e06:	4b16      	ldr	r3, [pc, #88]	; (2e60 <display_handler+0x1c4>)
    2e08:	4798      	blx	r3
    2e0a:	4b16      	ldr	r3, [pc, #88]	; (2e64 <display_handler+0x1c8>)
    2e0c:	4798      	blx	r3
    2e0e:	4b16      	ldr	r3, [pc, #88]	; (2e68 <display_handler+0x1cc>)
    2e10:	4798      	blx	r3
		display_text((int)(gauge_x0-(gauge_radius*0.4)),10,22,"AMMETER"); // TITLE
    2e12:	4b28      	ldr	r3, [pc, #160]	; (2eb4 <display_handler+0x218>)
    2e14:	2216      	movs	r2, #22
    2e16:	210a      	movs	r1, #10
    2e18:	206a      	movs	r0, #106	; 0x6a
    2e1a:	4c15      	ldr	r4, [pc, #84]	; (2e70 <display_handler+0x1d4>)
    2e1c:	47a0      	blx	r4
		display_text((int)(gauge_x0-(gauge_radius*0.4)),(int)(HEIGHT-(0.05*HEIGHT)),20,"% max current"); // UNIT	
    2e1e:	4b26      	ldr	r3, [pc, #152]	; (2eb8 <display_handler+0x21c>)
    2e20:	2214      	movs	r2, #20
    2e22:	2181      	movs	r1, #129	; 0x81
    2e24:	0049      	lsls	r1, r1, #1
    2e26:	206a      	movs	r0, #106	; 0x6a
    2e28:	47a0      	blx	r4
    2e2a:	e765      	b.n	2cf8 <display_handler+0x5c>
	if(logging_started)	display_textColor(WIDTH/11,0,20,"Active",0,128,0);
    2e2c:	2300      	movs	r3, #0
    2e2e:	9302      	str	r3, [sp, #8]
    2e30:	2280      	movs	r2, #128	; 0x80
    2e32:	9201      	str	r2, [sp, #4]
    2e34:	9300      	str	r3, [sp, #0]
    2e36:	4b21      	ldr	r3, [pc, #132]	; (2ebc <display_handler+0x220>)
    2e38:	3a6c      	subs	r2, #108	; 0x6c
    2e3a:	2100      	movs	r1, #0
    2e3c:	202b      	movs	r0, #43	; 0x2b
    2e3e:	4c1a      	ldr	r4, [pc, #104]	; (2ea8 <display_handler+0x20c>)
    2e40:	47a0      	blx	r4
    2e42:	e7cf      	b.n	2de4 <display_handler+0x148>
    2e44:	00002561 	.word	0x00002561
    2e48:	20000644 	.word	0x20000644
    2e4c:	200000e0 	.word	0x200000e0
    2e50:	000033cd 	.word	0x000033cd
    2e54:	20000014 	.word	0x20000014
    2e58:	0000341d 	.word	0x0000341d
    2e5c:	42c80000 	.word	0x42c80000
    2e60:	000037fd 	.word	0x000037fd
    2e64:	00003a3d 	.word	0x00003a3d
    2e68:	00002995 	.word	0x00002995
    2e6c:	00005dd4 	.word	0x00005dd4
    2e70:	0000264d 	.word	0x0000264d
    2e74:	00005de0 	.word	0x00005de0
    2e78:	00002a1d 	.word	0x00002a1d
    2e7c:	00002a51 	.word	0x00002a51
    2e80:	00005e08 	.word	0x00005e08
    2e84:	00005e18 	.word	0x00005e18
    2e88:	00005e20 	.word	0x00005e20
    2e8c:	00005e28 	.word	0x00005e28
    2e90:	00000709 	.word	0x00000709
    2e94:	000025d1 	.word	0x000025d1
    2e98:	00005e30 	.word	0x00005e30
    2e9c:	00005e38 	.word	0x00005e38
    2ea0:	20000646 	.word	0x20000646
    2ea4:	00005e4c 	.word	0x00005e4c
    2ea8:	0000267d 	.word	0x0000267d
    2eac:	00002585 	.word	0x00002585
    2eb0:	00003a7d 	.word	0x00003a7d
    2eb4:	00005df0 	.word	0x00005df0
    2eb8:	00005df8 	.word	0x00005df8
    2ebc:	00005e44 	.word	0x00005e44

00002ec0 <vcu_status_log_display>:

void vcu_status_log_display(){
    2ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ec2:	b089      	sub	sp, #36	; 0x24
	startFrame();
    2ec4:	4b17      	ldr	r3, [pc, #92]	; (2f24 <vcu_status_log_display+0x64>)
    2ec6:	4798      	blx	r3
	
	display_text(0,0,22,"EMSDC latched, power cycle to reset");
    2ec8:	4b17      	ldr	r3, [pc, #92]	; (2f28 <vcu_status_log_display+0x68>)
    2eca:	2216      	movs	r2, #22
    2ecc:	2100      	movs	r1, #0
    2ece:	2000      	movs	r0, #0
    2ed0:	4c16      	ldr	r4, [pc, #88]	; (2f2c <vcu_status_log_display+0x6c>)
    2ed2:	47a0      	blx	r4
	
	const char* names[] = {"inv_err","prc_err","timeout","emsdc","ins_err","unused","unused","comms"};
    2ed4:	466a      	mov	r2, sp
    2ed6:	4b16      	ldr	r3, [pc, #88]	; (2f30 <vcu_status_log_display+0x70>)
    2ed8:	3310      	adds	r3, #16
    2eda:	cb13      	ldmia	r3!, {r0, r1, r4}
    2edc:	c213      	stmia	r2!, {r0, r1, r4}
    2ede:	cb13      	ldmia	r3!, {r0, r1, r4}
    2ee0:	c213      	stmia	r2!, {r0, r1, r4}
    2ee2:	cb03      	ldmia	r3!, {r0, r1}
    2ee4:	c203      	stmia	r2!, {r0, r1}
	
	for(int i = 0; i < 8; i++){
    2ee6:	2400      	movs	r4, #0
    2ee8:	e015      	b.n	2f16 <vcu_status_log_display+0x56>
		display_text(WIDTH*i/12,HEIGHT/3,20,names[i]);
    2eea:	0123      	lsls	r3, r4, #4
    2eec:	1b1b      	subs	r3, r3, r4
    2eee:	0158      	lsls	r0, r3, #5
    2ef0:	210c      	movs	r1, #12
    2ef2:	4b10      	ldr	r3, [pc, #64]	; (2f34 <vcu_status_log_display+0x74>)
    2ef4:	4798      	blx	r3
    2ef6:	0005      	movs	r5, r0
    2ef8:	00a6      	lsls	r6, r4, #2
    2efa:	466b      	mov	r3, sp
    2efc:	58f3      	ldr	r3, [r6, r3]
    2efe:	2214      	movs	r2, #20
    2f00:	215a      	movs	r1, #90	; 0x5a
    2f02:	4f0a      	ldr	r7, [pc, #40]	; (2f2c <vcu_status_log_display+0x6c>)
    2f04:	47b8      	blx	r7
		display_number(WIDTH*i/12,HEIGHT/2,22,vcu_status[i]);
    2f06:	4b0c      	ldr	r3, [pc, #48]	; (2f38 <vcu_status_log_display+0x78>)
    2f08:	58f3      	ldr	r3, [r6, r3]
    2f0a:	2216      	movs	r2, #22
    2f0c:	2188      	movs	r1, #136	; 0x88
    2f0e:	0028      	movs	r0, r5
    2f10:	4d0a      	ldr	r5, [pc, #40]	; (2f3c <vcu_status_log_display+0x7c>)
    2f12:	47a8      	blx	r5
	for(int i = 0; i < 8; i++){
    2f14:	3401      	adds	r4, #1
    2f16:	2c07      	cmp	r4, #7
    2f18:	dde7      	ble.n	2eea <vcu_status_log_display+0x2a>
	}
	
	endFrame();
    2f1a:	4b09      	ldr	r3, [pc, #36]	; (2f40 <vcu_status_log_display+0x80>)
    2f1c:	4798      	blx	r3
}
    2f1e:	b009      	add	sp, #36	; 0x24
    2f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	00002561 	.word	0x00002561
    2f28:	00005e58 	.word	0x00005e58
    2f2c:	0000264d 	.word	0x0000264d
    2f30:	00005da0 	.word	0x00005da0
    2f34:	00001b1f 	.word	0x00001b1f
    2f38:	20000648 	.word	0x20000648
    2f3c:	000025a1 	.word	0x000025a1
    2f40:	00002585 	.word	0x00002585

00002f44 <ignition_display>:

void ignition_display(){
    2f44:	b530      	push	{r4, r5, lr}
    2f46:	b09d      	sub	sp, #116	; 0x74
	startFrame();
    2f48:	4b1f      	ldr	r3, [pc, #124]	; (2fc8 <ignition_display+0x84>)
    2f4a:	4798      	blx	r3
	
	char positive_slew_rate_msgvar[30];
	sprintf(positive_slew_rate_msgvar,"Positive slew rate: %d",positive_slew_rate);
    2f4c:	4c1f      	ldr	r4, [pc, #124]	; (2fcc <ignition_display+0x88>)
    2f4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    2f50:	491f      	ldr	r1, [pc, #124]	; (2fd0 <ignition_display+0x8c>)
    2f52:	a814      	add	r0, sp, #80	; 0x50
    2f54:	4d1f      	ldr	r5, [pc, #124]	; (2fd4 <ignition_display+0x90>)
    2f56:	47a8      	blx	r5
	const char *positive_slew_rate_msg = positive_slew_rate_msgvar;
	
	char negative_slew_rate_msgvar[30];
	sprintf(negative_slew_rate_msgvar,"Negative slew rate: %d",negative_slew_rate);
    2f58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2f5a:	491f      	ldr	r1, [pc, #124]	; (2fd8 <ignition_display+0x94>)
    2f5c:	a80c      	add	r0, sp, #48	; 0x30
    2f5e:	47a8      	blx	r5
	const char *negative_slew_rate_msg = negative_slew_rate_msgvar;
	
	char max_power_msgvar[30];
	sprintf(max_power_msgvar,"Max current: %d A",pack_dcl);
    2f60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2f62:	491e      	ldr	r1, [pc, #120]	; (2fdc <ignition_display+0x98>)
    2f64:	a804      	add	r0, sp, #16
    2f66:	47a8      	blx	r5
	const char *max_power_msg = max_power_msgvar;
	
	display_text(WIDTH/4,1*HEIGHT/6,29,positive_slew_rate_msg);
    2f68:	ab14      	add	r3, sp, #80	; 0x50
    2f6a:	221d      	movs	r2, #29
    2f6c:	212d      	movs	r1, #45	; 0x2d
    2f6e:	2078      	movs	r0, #120	; 0x78
    2f70:	4d1b      	ldr	r5, [pc, #108]	; (2fe0 <ignition_display+0x9c>)
    2f72:	47a8      	blx	r5
	display_text(WIDTH/4,2*HEIGHT/6,29,negative_slew_rate_msg);
    2f74:	ab0c      	add	r3, sp, #48	; 0x30
    2f76:	221d      	movs	r2, #29
    2f78:	215a      	movs	r1, #90	; 0x5a
    2f7a:	2078      	movs	r0, #120	; 0x78
    2f7c:	47a8      	blx	r5
	display_text(WIDTH/4,3*HEIGHT/6,29,max_power_msg);
    2f7e:	ab04      	add	r3, sp, #16
    2f80:	221d      	movs	r2, #29
    2f82:	2188      	movs	r1, #136	; 0x88
    2f84:	2078      	movs	r0, #120	; 0x78
    2f86:	47a8      	blx	r5
	if(torque_vectoring_active){
    2f88:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d10f      	bne.n	2fae <ignition_display+0x6a>
		display_textColor(WIDTH/4,4*HEIGHT/6,29,"Torque Vectoring Active",0,200,0);	
	}
	else{
		display_text(WIDTH/4,4*HEIGHT/6,29,"Torque Vectoring Inactive");
    2f8e:	4b15      	ldr	r3, [pc, #84]	; (2fe4 <ignition_display+0xa0>)
    2f90:	221d      	movs	r2, #29
    2f92:	21b5      	movs	r1, #181	; 0xb5
    2f94:	2078      	movs	r0, #120	; 0x78
    2f96:	4c12      	ldr	r4, [pc, #72]	; (2fe0 <ignition_display+0x9c>)
    2f98:	47a0      	blx	r4
	}
	display_text(WIDTH/4,5*HEIGHT/6,30,"GOOD LUCK");
    2f9a:	4b13      	ldr	r3, [pc, #76]	; (2fe8 <ignition_display+0xa4>)
    2f9c:	221e      	movs	r2, #30
    2f9e:	21e2      	movs	r1, #226	; 0xe2
    2fa0:	2078      	movs	r0, #120	; 0x78
    2fa2:	4c0f      	ldr	r4, [pc, #60]	; (2fe0 <ignition_display+0x9c>)
    2fa4:	47a0      	blx	r4
	
	endFrame();
    2fa6:	4b11      	ldr	r3, [pc, #68]	; (2fec <ignition_display+0xa8>)
    2fa8:	4798      	blx	r3
	//display_logo(); doesn't work :(
}
    2faa:	b01d      	add	sp, #116	; 0x74
    2fac:	bd30      	pop	{r4, r5, pc}
		display_textColor(WIDTH/4,4*HEIGHT/6,29,"Torque Vectoring Active",0,200,0);	
    2fae:	2300      	movs	r3, #0
    2fb0:	9302      	str	r3, [sp, #8]
    2fb2:	22c8      	movs	r2, #200	; 0xc8
    2fb4:	9201      	str	r2, [sp, #4]
    2fb6:	9300      	str	r3, [sp, #0]
    2fb8:	4b0d      	ldr	r3, [pc, #52]	; (2ff0 <ignition_display+0xac>)
    2fba:	3aab      	subs	r2, #171	; 0xab
    2fbc:	21b5      	movs	r1, #181	; 0xb5
    2fbe:	2078      	movs	r0, #120	; 0x78
    2fc0:	4c0c      	ldr	r4, [pc, #48]	; (2ff4 <ignition_display+0xb0>)
    2fc2:	47a0      	blx	r4
    2fc4:	e7e9      	b.n	2f9a <ignition_display+0x56>
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	00002561 	.word	0x00002561
    2fcc:	200000e0 	.word	0x200000e0
    2fd0:	00005e7c 	.word	0x00005e7c
    2fd4:	00004f65 	.word	0x00004f65
    2fd8:	00005e94 	.word	0x00005e94
    2fdc:	00005eac 	.word	0x00005eac
    2fe0:	0000264d 	.word	0x0000264d
    2fe4:	00005ed8 	.word	0x00005ed8
    2fe8:	00005ef4 	.word	0x00005ef4
    2fec:	00002585 	.word	0x00002585
    2ff0:	00005ec0 	.word	0x00005ec0
    2ff4:	0000267d 	.word	0x0000267d

00002ff8 <main>:


int main(void)
{
    2ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ffa:	b087      	sub	sp, #28
	/* Initializers */
	atmel_start_init();
    2ffc:	4b89      	ldr	r3, [pc, #548]	; (3224 <main+0x22c>)
    2ffe:	4798      	blx	r3
	gpio_set_pin_level(AMS_LIGHT,AMS_state); // Set the AMS light ON
    3000:	4b89      	ldr	r3, [pc, #548]	; (3228 <main+0x230>)
    3002:	781b      	ldrb	r3, [r3, #0]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    3004:	2b00      	cmp	r3, #0
    3006:	d04c      	beq.n	30a2 <main+0xaa>
    3008:	2280      	movs	r2, #128	; 0x80
    300a:	0392      	lsls	r2, r2, #14
    300c:	23c0      	movs	r3, #192	; 0xc0
    300e:	05db      	lsls	r3, r3, #23
    3010:	619a      	str	r2, [r3, #24]
	create_spi_descriptor();
    3012:	4b86      	ldr	r3, [pc, #536]	; (322c <main+0x234>)
    3014:	4798      	blx	r3
	FT8_init();
    3016:	4b86      	ldr	r3, [pc, #536]	; (3230 <main+0x238>)
    3018:	4798      	blx	r3
	}*/
	
	struct can_filter  filter;
	
	// can receive
	can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback); // do not anger the god
    301a:	4c86      	ldr	r4, [pc, #536]	; (3234 <main+0x23c>)
    301c:	4a86      	ldr	r2, [pc, #536]	; (3238 <main+0x240>)
    301e:	2101      	movs	r1, #1
    3020:	0020      	movs	r0, r4
    3022:	4d86      	ldr	r5, [pc, #536]	; (323c <main+0x244>)
    3024:	47a8      	blx	r5
	can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
    3026:	4a86      	ldr	r2, [pc, #536]	; (3240 <main+0x248>)
    3028:	2100      	movs	r1, #0
    302a:	0020      	movs	r0, r4
    302c:	47a8      	blx	r5
	
	filter.id = 0;
    302e:	2500      	movs	r5, #0
    3030:	9504      	str	r5, [sp, #16]
	filter.mask = 0;
    3032:	9505      	str	r5, [sp, #20]
	can_async_set_filter(&CAN_0,0,CAN_FMT_STDID, &filter);
    3034:	ab04      	add	r3, sp, #16
    3036:	2200      	movs	r2, #0
    3038:	2100      	movs	r1, #0
    303a:	0020      	movs	r0, r4
    303c:	4c81      	ldr	r4, [pc, #516]	; (3244 <main+0x24c>)
    303e:	47a0      	blx	r4
	
	// timer set up
	
	DISPLAY_TIMER_task.interval = 1; // 1 ms interrupt
    3040:	4c81      	ldr	r4, [pc, #516]	; (3248 <main+0x250>)
    3042:	2601      	movs	r6, #1
    3044:	64e6      	str	r6, [r4, #76]	; 0x4c
	DISPLAY_TIMER_task.cb       = DISPLAY_TIMER_cb;
    3046:	4b81      	ldr	r3, [pc, #516]	; (324c <main+0x254>)
    3048:	6523      	str	r3, [r4, #80]	; 0x50
	DISPLAY_TIMER_task.mode     = TIMER_TASK_REPEAT;
    304a:	0021      	movs	r1, r4
    304c:	3144      	adds	r1, #68	; 0x44
    304e:	740e      	strb	r6, [r1, #16]
	timer_add_task(&TIMER_0, &DISPLAY_TIMER_task);
    3050:	487f      	ldr	r0, [pc, #508]	; (3250 <main+0x258>)
    3052:	4f80      	ldr	r7, [pc, #512]	; (3254 <main+0x25c>)
    3054:	47b8      	blx	r7
	
	MSG_TIMEOUT_TIMER_task.interval = 1; // 1 ms interrupt
    3056:	6626      	str	r6, [r4, #96]	; 0x60
	MSG_TIMEOUT_TIMER_task.cb       = MSG_TIMEOUT_timer_cb;
    3058:	4b7f      	ldr	r3, [pc, #508]	; (3258 <main+0x260>)
    305a:	6663      	str	r3, [r4, #100]	; 0x64
	MSG_TIMEOUT_TIMER_task.mode     = TIMER_TASK_REPEAT;
    305c:	0021      	movs	r1, r4
    305e:	3158      	adds	r1, #88	; 0x58
    3060:	740e      	strb	r6, [r1, #16]
	timer_add_task(&TIMER_0, &MSG_TIMEOUT_TIMER_task);
    3062:	487b      	ldr	r0, [pc, #492]	; (3250 <main+0x258>)
    3064:	47b8      	blx	r7
	
	send_can_timer_task.interval = 1; // 1 ms interrupt
    3066:	6766      	str	r6, [r4, #116]	; 0x74
	send_can_timer_task.cb       = send_can_timer_cb;
    3068:	4b7c      	ldr	r3, [pc, #496]	; (325c <main+0x264>)
    306a:	67a3      	str	r3, [r4, #120]	; 0x78
	send_can_timer_task.mode     = TIMER_TASK_REPEAT;
    306c:	0021      	movs	r1, r4
    306e:	316c      	adds	r1, #108	; 0x6c
    3070:	740e      	strb	r6, [r1, #16]
	timer_add_task(&TIMER_0, &send_can_timer_task);
    3072:	4877      	ldr	r0, [pc, #476]	; (3250 <main+0x258>)
    3074:	47b8      	blx	r7
	
	TIMER_AMS_task_prelight_three.interval = 3000; // Interrupt after three seconds
    3076:	4c7a      	ldr	r4, [pc, #488]	; (3260 <main+0x268>)
    3078:	4b7a      	ldr	r3, [pc, #488]	; (3264 <main+0x26c>)
    307a:	60a3      	str	r3, [r4, #8]
	TIMER_AMS_task_prelight_three.cb       = TIMER_AMS_task_prelight_three_cb;
    307c:	4b7a      	ldr	r3, [pc, #488]	; (3268 <main+0x270>)
    307e:	60e3      	str	r3, [r4, #12]
	TIMER_AMS_task_prelight_three.mode     = TIMER_TASK_ONE_SHOT;
    3080:	7425      	strb	r5, [r4, #16]
	timer_add_task(&TIMER_0, &TIMER_AMS_task_prelight_three);
    3082:	0021      	movs	r1, r4
    3084:	4872      	ldr	r0, [pc, #456]	; (3250 <main+0x258>)
    3086:	47b8      	blx	r7
	
	TS_BUTTON_TIMER_task.interval = 1;
    3088:	61e6      	str	r6, [r4, #28]
	TS_BUTTON_TIMER_task.cb = TS_BUTTON_TIMER_cb;
    308a:	4b78      	ldr	r3, [pc, #480]	; (326c <main+0x274>)
    308c:	6223      	str	r3, [r4, #32]
	TS_BUTTON_TIMER_task.mode = TIMER_TASK_REPEAT;
    308e:	2324      	movs	r3, #36	; 0x24
    3090:	54e6      	strb	r6, [r4, r3]
	timer_add_task(&TIMER_0, &TS_BUTTON_TIMER_task);
    3092:	0021      	movs	r1, r4
    3094:	3114      	adds	r1, #20
    3096:	486e      	ldr	r0, [pc, #440]	; (3250 <main+0x258>)
    3098:	47b8      	blx	r7
	
	timer_start(&TIMER_0);
    309a:	486d      	ldr	r0, [pc, #436]	; (3250 <main+0x258>)
    309c:	4b74      	ldr	r3, [pc, #464]	; (3270 <main+0x278>)
    309e:	4798      	blx	r3
    30a0:	e06b      	b.n	317a <main+0x182>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30a2:	2280      	movs	r2, #128	; 0x80
    30a4:	0392      	lsls	r2, r2, #14
    30a6:	23c0      	movs	r3, #192	; 0xc0
    30a8:	05db      	lsls	r3, r3, #23
    30aa:	615a      	str	r2, [r3, #20]
    30ac:	e7b1      	b.n	3012 <main+0x1a>
	while (1) {
		
		// Check if the message length has gone over 
		if ((msg_timeout_counter > max_timeout_ms) && AMS_state == 0 && AMS_active == 1) // there have not been new messages received in a while and the light is off
		{
			AMS_state = 1; // light should be on
    30ae:	2201      	movs	r2, #1
    30b0:	4b5d      	ldr	r3, [pc, #372]	; (3228 <main+0x230>)
    30b2:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30b4:	2280      	movs	r2, #128	; 0x80
    30b6:	0392      	lsls	r2, r2, #14
    30b8:	23c0      	movs	r3, #192	; 0xc0
    30ba:	05db      	lsls	r3, r3, #23
    30bc:	619a      	str	r2, [r3, #24]
    30be:	e069      	b.n	3194 <main+0x19c>
    30c0:	2300      	movs	r3, #0
		}
		
		if (display_ms_counter > 100) // Display every 100 ms
		{
			int i;
			for(i = 0; i < 5; i++){
    30c2:	2b04      	cmp	r3, #4
    30c4:	dc06      	bgt.n	30d4 <main+0xdc>
				if(vcu_status[i] != 0) break;
    30c6:	009a      	lsls	r2, r3, #2
    30c8:	496a      	ldr	r1, [pc, #424]	; (3274 <main+0x27c>)
    30ca:	5852      	ldr	r2, [r2, r1]
    30cc:	2a00      	cmp	r2, #0
    30ce:	d101      	bne.n	30d4 <main+0xdc>
			for(i = 0; i < 5; i++){
    30d0:	3301      	adds	r3, #1
    30d2:	e7f6      	b.n	30c2 <main+0xca>
			}
			
			if(i < 5) vcu_status_log_display();
    30d4:	2b04      	cmp	r3, #4
    30d6:	dd0e      	ble.n	30f6 <main+0xfe>
			else if(TS_button_timer_started && precharge_enabled) ignition_display();
    30d8:	2328      	movs	r3, #40	; 0x28
    30da:	4a61      	ldr	r2, [pc, #388]	; (3260 <main+0x268>)
    30dc:	5cd3      	ldrb	r3, [r2, r3]
    30de:	2b00      	cmp	r3, #0
    30e0:	d003      	beq.n	30ea <main+0xf2>
    30e2:	4b65      	ldr	r3, [pc, #404]	; (3278 <main+0x280>)
    30e4:	781b      	ldrb	r3, [r3, #0]
    30e6:	2b00      	cmp	r3, #0
    30e8:	d108      	bne.n	30fc <main+0x104>
			else display_handler();
    30ea:	4b64      	ldr	r3, [pc, #400]	; (327c <main+0x284>)
    30ec:	4798      	blx	r3
			
			
			display_ms_counter = 0;
    30ee:	2200      	movs	r2, #0
    30f0:	4b55      	ldr	r3, [pc, #340]	; (3248 <main+0x250>)
    30f2:	605a      	str	r2, [r3, #4]
    30f4:	e052      	b.n	319c <main+0x1a4>
			if(i < 5) vcu_status_log_display();
    30f6:	4b62      	ldr	r3, [pc, #392]	; (3280 <main+0x288>)
    30f8:	4798      	blx	r3
    30fa:	e7f8      	b.n	30ee <main+0xf6>
			else if(TS_button_timer_started && precharge_enabled) ignition_display();
    30fc:	4b61      	ldr	r3, [pc, #388]	; (3284 <main+0x28c>)
    30fe:	4798      	blx	r3
    3100:	e7f5      	b.n	30ee <main+0xf6>
			
			// The switch state is sent by the main loop using a timer activated by a counter every 100ms. 
		}
		else
		{
			RTD_switch_state = 0;
    3102:	2200      	movs	r2, #0
    3104:	4b50      	ldr	r3, [pc, #320]	; (3248 <main+0x250>)
    3106:	761a      	strb	r2, [r3, #24]
    3108:	e060      	b.n	31cc <main+0x1d4>
		{
			if(!TS_button_timer_started){
				TS_button_timer_started = true;
				ts_button_counter = 0;
			}
			else if(ts_button_counter > 2500){
    310a:	4b4f      	ldr	r3, [pc, #316]	; (3248 <main+0x250>)
    310c:	691a      	ldr	r2, [r3, #16]
    310e:	4b5e      	ldr	r3, [pc, #376]	; (3288 <main+0x290>)
    3110:	429a      	cmp	r2, r3
    3112:	d92c      	bls.n	316e <main+0x176>
				TS_button_state = (TS_button_state+1)%2; //the ! flag for integers
    3114:	4a4c      	ldr	r2, [pc, #304]	; (3248 <main+0x250>)
    3116:	7e53      	ldrb	r3, [r2, #25]
    3118:	3301      	adds	r3, #1
    311a:	0fd9      	lsrs	r1, r3, #31
    311c:	185b      	adds	r3, r3, r1
    311e:	2401      	movs	r4, #1
    3120:	4023      	ands	r3, r4
    3122:	1a5b      	subs	r3, r3, r1
    3124:	7653      	strb	r3, [r2, #25]
				send_can_message(); //additional can message so that the car starts immediately
    3126:	4b59      	ldr	r3, [pc, #356]	; (328c <main+0x294>)
    3128:	4798      	blx	r3
				TS_button_timer_started = false;
    312a:	4b4d      	ldr	r3, [pc, #308]	; (3260 <main+0x268>)
    312c:	2100      	movs	r1, #0
    312e:	2228      	movs	r2, #40	; 0x28
    3130:	5499      	strb	r1, [r3, r2]
				TS_button_wait_for_release = true;
    3132:	3201      	adds	r2, #1
    3134:	549c      	strb	r4, [r3, r2]
    3136:	e01a      	b.n	316e <main+0x176>
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    3138:	a803      	add	r0, sp, #12
    313a:	4b55      	ldr	r3, [pc, #340]	; (3290 <main+0x298>)
    313c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    313e:	23c0      	movs	r3, #192	; 0xc0
    3140:	05db      	lsls	r3, r3, #23
    3142:	2280      	movs	r2, #128	; 0x80
    3144:	589c      	ldr	r4, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3146:	3220      	adds	r2, #32
    3148:	2182      	movs	r1, #130	; 0x82
    314a:	05c9      	lsls	r1, r1, #23
    314c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    314e:	2190      	movs	r1, #144	; 0x90
    3150:	585b      	ldr	r3, [r3, r1]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3152:	4053      	eors	r3, r2
    3154:	401c      	ands	r4, r3
    3156:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    3158:	a803      	add	r0, sp, #12
    315a:	4b4e      	ldr	r3, [pc, #312]	; (3294 <main+0x29c>)
    315c:	4798      	blx	r3
			}
			
		}
		else if(gpio_get_pin_level(TS_BUTTON) == false){
    315e:	06a3      	lsls	r3, r4, #26
    3160:	d405      	bmi.n	316e <main+0x176>
			TS_button_timer_started = false;
    3162:	4b3f      	ldr	r3, [pc, #252]	; (3260 <main+0x268>)
    3164:	2200      	movs	r2, #0
    3166:	2128      	movs	r1, #40	; 0x28
    3168:	545a      	strb	r2, [r3, r1]
			TS_button_wait_for_release = false;
    316a:	3101      	adds	r1, #1
    316c:	545a      	strb	r2, [r3, r1]
		}
		
		
		if (can_tx_ms_counter > 100) // send every 100ms
    316e:	4b36      	ldr	r3, [pc, #216]	; (3248 <main+0x250>)
    3170:	695b      	ldr	r3, [r3, #20]
    3172:	2b64      	cmp	r3, #100	; 0x64
    3174:	d84f      	bhi.n	3216 <main+0x21e>
		{
			send_can_message();
			can_tx_ms_counter = 0;
		}
		
		handle_can();
    3176:	4b48      	ldr	r3, [pc, #288]	; (3298 <main+0x2a0>)
    3178:	4798      	blx	r3
		if ((msg_timeout_counter > max_timeout_ms) && AMS_state == 0 && AMS_active == 1) // there have not been new messages received in a while and the light is off
    317a:	4b33      	ldr	r3, [pc, #204]	; (3248 <main+0x250>)
    317c:	689a      	ldr	r2, [r3, #8]
    317e:	4b47      	ldr	r3, [pc, #284]	; (329c <main+0x2a4>)
    3180:	429a      	cmp	r2, r3
    3182:	d907      	bls.n	3194 <main+0x19c>
    3184:	4b28      	ldr	r3, [pc, #160]	; (3228 <main+0x230>)
    3186:	781b      	ldrb	r3, [r3, #0]
    3188:	2b00      	cmp	r3, #0
    318a:	d103      	bne.n	3194 <main+0x19c>
    318c:	4b2e      	ldr	r3, [pc, #184]	; (3248 <main+0x250>)
    318e:	7b1b      	ldrb	r3, [r3, #12]
    3190:	2b01      	cmp	r3, #1
    3192:	d08c      	beq.n	30ae <main+0xb6>
		if (display_ms_counter > 100) // Display every 100 ms
    3194:	4b2c      	ldr	r3, [pc, #176]	; (3248 <main+0x250>)
    3196:	685b      	ldr	r3, [r3, #4]
    3198:	2b64      	cmp	r3, #100	; 0x64
    319a:	d891      	bhi.n	30c0 <main+0xc8>
	CRITICAL_SECTION_ENTER();
    319c:	a801      	add	r0, sp, #4
    319e:	4b3c      	ldr	r3, [pc, #240]	; (3290 <main+0x298>)
    31a0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    31a2:	23c0      	movs	r3, #192	; 0xc0
    31a4:	05db      	lsls	r3, r3, #23
    31a6:	2280      	movs	r2, #128	; 0x80
    31a8:	589c      	ldr	r4, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    31aa:	3220      	adds	r2, #32
    31ac:	2182      	movs	r1, #130	; 0x82
    31ae:	05c9      	lsls	r1, r1, #23
    31b0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    31b2:	2190      	movs	r1, #144	; 0x90
    31b4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    31b6:	4053      	eors	r3, r2
    31b8:	401c      	ands	r4, r3
    31ba:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    31bc:	a801      	add	r0, sp, #4
    31be:	4b35      	ldr	r3, [pc, #212]	; (3294 <main+0x29c>)
    31c0:	4798      	blx	r3
		if (gpio_get_pin_level(RTD_SWITCH)== true) // The car is in ready to drive mode!!
    31c2:	04e3      	lsls	r3, r4, #19
    31c4:	d59d      	bpl.n	3102 <main+0x10a>
			RTD_switch_state = 1;
    31c6:	2201      	movs	r2, #1
    31c8:	4b1f      	ldr	r3, [pc, #124]	; (3248 <main+0x250>)
    31ca:	761a      	strb	r2, [r3, #24]
	CRITICAL_SECTION_ENTER();
    31cc:	a802      	add	r0, sp, #8
    31ce:	4b30      	ldr	r3, [pc, #192]	; (3290 <main+0x298>)
    31d0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    31d2:	23c0      	movs	r3, #192	; 0xc0
    31d4:	05db      	lsls	r3, r3, #23
    31d6:	2280      	movs	r2, #128	; 0x80
    31d8:	589c      	ldr	r4, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    31da:	3220      	adds	r2, #32
    31dc:	2182      	movs	r1, #130	; 0x82
    31de:	05c9      	lsls	r1, r1, #23
    31e0:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    31e2:	2190      	movs	r1, #144	; 0x90
    31e4:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    31e6:	4053      	eors	r3, r2
    31e8:	401c      	ands	r4, r3
    31ea:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    31ec:	a802      	add	r0, sp, #8
    31ee:	4b29      	ldr	r3, [pc, #164]	; (3294 <main+0x29c>)
    31f0:	4798      	blx	r3
		if (gpio_get_pin_level(TS_BUTTON)== true && !TS_button_wait_for_release)
    31f2:	06a3      	lsls	r3, r4, #26
    31f4:	d5a0      	bpl.n	3138 <main+0x140>
    31f6:	2329      	movs	r3, #41	; 0x29
    31f8:	4a19      	ldr	r2, [pc, #100]	; (3260 <main+0x268>)
    31fa:	5cd3      	ldrb	r3, [r2, r3]
    31fc:	2b00      	cmp	r3, #0
    31fe:	d19b      	bne.n	3138 <main+0x140>
			if(!TS_button_timer_started){
    3200:	3328      	adds	r3, #40	; 0x28
    3202:	5cd3      	ldrb	r3, [r2, r3]
    3204:	2b00      	cmp	r3, #0
    3206:	d180      	bne.n	310a <main+0x112>
				TS_button_timer_started = true;
    3208:	2101      	movs	r1, #1
    320a:	3328      	adds	r3, #40	; 0x28
    320c:	54d1      	strb	r1, [r2, r3]
				ts_button_counter = 0;
    320e:	2200      	movs	r2, #0
    3210:	4b0d      	ldr	r3, [pc, #52]	; (3248 <main+0x250>)
    3212:	611a      	str	r2, [r3, #16]
    3214:	e7ab      	b.n	316e <main+0x176>
			send_can_message();
    3216:	4b1d      	ldr	r3, [pc, #116]	; (328c <main+0x294>)
    3218:	4798      	blx	r3
			can_tx_ms_counter = 0;
    321a:	2200      	movs	r2, #0
    321c:	4b0a      	ldr	r3, [pc, #40]	; (3248 <main+0x250>)
    321e:	615a      	str	r2, [r3, #20]
    3220:	e7a9      	b.n	3176 <main+0x17e>
    3222:	46c0      	nop			; (mov r8, r8)
    3224:	0000011d 	.word	0x0000011d
    3228:	20000014 	.word	0x20000014
    322c:	00003385 	.word	0x00003385
    3230:	000008f9 	.word	0x000008f9
    3234:	200001b4 	.word	0x200001b4
    3238:	0000248d 	.word	0x0000248d
    323c:	00000fc1 	.word	0x00000fc1
    3240:	00002491 	.word	0x00002491
    3244:	00001011 	.word	0x00001011
    3248:	200000e0 	.word	0x200000e0
    324c:	00002429 	.word	0x00002429
    3250:	200001e8 	.word	0x200001e8
    3254:	00001395 	.word	0x00001395
    3258:	00002439 	.word	0x00002439
    325c:	0000247d 	.word	0x0000247d
    3260:	20000160 	.word	0x20000160
    3264:	00000bb8 	.word	0x00000bb8
    3268:	00002449 	.word	0x00002449
    326c:	0000246d 	.word	0x0000246d
    3270:	00001359 	.word	0x00001359
    3274:	20000648 	.word	0x20000648
    3278:	20000644 	.word	0x20000644
    327c:	00002c9d 	.word	0x00002c9d
    3280:	00002ec1 	.word	0x00002ec1
    3284:	00002f45 	.word	0x00002f45
    3288:	000009c4 	.word	0x000009c4
    328c:	000024ad 	.word	0x000024ad
    3290:	00000e95 	.word	0x00000e95
    3294:	00000ea3 	.word	0x00000ea3
    3298:	00002aed 	.word	0x00002aed
    329c:	00002710 	.word	0x00002710

000032a0 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    32a0:	b510      	push	{r4, lr}
    32a2:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    32a4:	2800      	cmp	r0, #0
    32a6:	d109      	bne.n	32bc <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    32a8:	0011      	movs	r1, r2
    32aa:	0018      	movs	r0, r3
    32ac:	4b05      	ldr	r3, [pc, #20]	; (32c4 <_read+0x24>)
    32ae:	4798      	blx	r3
	if (n < 0) {
    32b0:	2800      	cmp	r0, #0
    32b2:	db00      	blt.n	32b6 <_read+0x16>
		return -1;
	}

	return n;
}
    32b4:	bd10      	pop	{r4, pc}
		return -1;
    32b6:	2001      	movs	r0, #1
    32b8:	4240      	negs	r0, r0
    32ba:	e7fb      	b.n	32b4 <_read+0x14>
		return -1;
    32bc:	2001      	movs	r0, #1
    32be:	4240      	negs	r0, r0
    32c0:	e7f8      	b.n	32b4 <_read+0x14>
    32c2:	46c0      	nop			; (mov r8, r8)
    32c4:	0000331d 	.word	0x0000331d

000032c8 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    32c8:	b510      	push	{r4, lr}
    32ca:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    32cc:	3801      	subs	r0, #1
    32ce:	2802      	cmp	r0, #2
    32d0:	d809      	bhi.n	32e6 <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    32d2:	0011      	movs	r1, r2
    32d4:	0018      	movs	r0, r3
    32d6:	4b05      	ldr	r3, [pc, #20]	; (32ec <_write+0x24>)
    32d8:	4798      	blx	r3
	if (n < 0) {
    32da:	2800      	cmp	r0, #0
    32dc:	db00      	blt.n	32e0 <_write+0x18>
		return -1;
	}

	return n;
}
    32de:	bd10      	pop	{r4, pc}
		return -1;
    32e0:	2001      	movs	r0, #1
    32e2:	4240      	negs	r0, r0
    32e4:	e7fb      	b.n	32de <_write+0x16>
		return -1;
    32e6:	2001      	movs	r0, #1
    32e8:	4240      	negs	r0, r0
    32ea:	e7f8      	b.n	32de <_write+0x16>
    32ec:	00003341 	.word	0x00003341

000032f0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    32f0:	b570      	push	{r4, r5, r6, lr}
    32f2:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    32f4:	4d06      	ldr	r5, [pc, #24]	; (3310 <stdio_io_init+0x20>)
    32f6:	682b      	ldr	r3, [r5, #0]
    32f8:	6898      	ldr	r0, [r3, #8]
    32fa:	2100      	movs	r1, #0
    32fc:	4c05      	ldr	r4, [pc, #20]	; (3314 <stdio_io_init+0x24>)
    32fe:	47a0      	blx	r4
	setbuf(stdin, NULL);
    3300:	682b      	ldr	r3, [r5, #0]
    3302:	6858      	ldr	r0, [r3, #4]
    3304:	2100      	movs	r1, #0
    3306:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    3308:	4b03      	ldr	r3, [pc, #12]	; (3318 <stdio_io_init+0x28>)
    330a:	601e      	str	r6, [r3, #0]
}
    330c:	bd70      	pop	{r4, r5, r6, pc}
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	20000024 	.word	0x20000024
    3314:	00004dfb 	.word	0x00004dfb
    3318:	2000018c 	.word	0x2000018c

0000331c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    331c:	b510      	push	{r4, lr}
    331e:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    3320:	4b05      	ldr	r3, [pc, #20]	; (3338 <stdio_io_read+0x1c>)
    3322:	6818      	ldr	r0, [r3, #0]
    3324:	2800      	cmp	r0, #0
    3326:	d004      	beq.n	3332 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    3328:	b28a      	uxth	r2, r1
    332a:	0021      	movs	r1, r4
    332c:	4b03      	ldr	r3, [pc, #12]	; (333c <stdio_io_read+0x20>)
    332e:	4798      	blx	r3
}
    3330:	bd10      	pop	{r4, pc}
		return 0;
    3332:	2000      	movs	r0, #0
    3334:	e7fc      	b.n	3330 <stdio_io_read+0x14>
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	2000018c 	.word	0x2000018c
    333c:	000010b1 	.word	0x000010b1

00003340 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    3340:	b510      	push	{r4, lr}
    3342:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    3344:	4b05      	ldr	r3, [pc, #20]	; (335c <stdio_io_write+0x1c>)
    3346:	6818      	ldr	r0, [r3, #0]
    3348:	2800      	cmp	r0, #0
    334a:	d004      	beq.n	3356 <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    334c:	b28a      	uxth	r2, r1
    334e:	0021      	movs	r1, r4
    3350:	4b03      	ldr	r3, [pc, #12]	; (3360 <stdio_io_write+0x20>)
    3352:	4798      	blx	r3
}
    3354:	bd10      	pop	{r4, pc}
		return 0;
    3356:	2000      	movs	r0, #0
    3358:	e7fc      	b.n	3354 <stdio_io_write+0x14>
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	2000018c 	.word	0x2000018c
    3360:	00001079 	.word	0x00001079

00003364 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    3364:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    3366:	4c04      	ldr	r4, [pc, #16]	; (3378 <stdio_redirect_init+0x14>)
    3368:	0020      	movs	r0, r4
    336a:	4b04      	ldr	r3, [pc, #16]	; (337c <stdio_redirect_init+0x18>)
    336c:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    336e:	0020      	movs	r0, r4
    3370:	4b03      	ldr	r3, [pc, #12]	; (3380 <stdio_redirect_init+0x1c>)
    3372:	4798      	blx	r3
}
    3374:	bd10      	pop	{r4, pc}
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	200001dc 	.word	0x200001dc
    337c:	00001571 	.word	0x00001571
    3380:	000032f1 	.word	0x000032f1

00003384 <create_spi_descriptor>:
 */ 


#include "SPI_io_descriptor.h"

void create_spi_descriptor(){
    3384:	b510      	push	{r4, lr}
	// creating SPI instance
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
    3386:	4c04      	ldr	r4, [pc, #16]	; (3398 <create_spi_descriptor+0x14>)
    3388:	4904      	ldr	r1, [pc, #16]	; (339c <create_spi_descriptor+0x18>)
    338a:	0020      	movs	r0, r4
    338c:	4b04      	ldr	r3, [pc, #16]	; (33a0 <create_spi_descriptor+0x1c>)
    338e:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
    3390:	0020      	movs	r0, r4
    3392:	4b04      	ldr	r3, [pc, #16]	; (33a4 <create_spi_descriptor+0x20>)
    3394:	4798      	blx	r3

    3396:	bd10      	pop	{r4, pc}
    3398:	2000019c 	.word	0x2000019c
    339c:	20000198 	.word	0x20000198
    33a0:	00001229 	.word	0x00001229
    33a4:	00001141 	.word	0x00001141

000033a8 <__aeabi_cfrcmple>:
    33a8:	4684      	mov	ip, r0
    33aa:	1c08      	adds	r0, r1, #0
    33ac:	4661      	mov	r1, ip
    33ae:	e7ff      	b.n	33b0 <__aeabi_cfcmpeq>

000033b0 <__aeabi_cfcmpeq>:
    33b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    33b2:	f000 f9e1 	bl	3778 <__lesf2>
    33b6:	2800      	cmp	r0, #0
    33b8:	d401      	bmi.n	33be <__aeabi_cfcmpeq+0xe>
    33ba:	2100      	movs	r1, #0
    33bc:	42c8      	cmn	r0, r1
    33be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000033c0 <__aeabi_fcmpeq>:
    33c0:	b510      	push	{r4, lr}
    33c2:	f000 f973 	bl	36ac <__eqsf2>
    33c6:	4240      	negs	r0, r0
    33c8:	3001      	adds	r0, #1
    33ca:	bd10      	pop	{r4, pc}

000033cc <__aeabi_fcmplt>:
    33cc:	b510      	push	{r4, lr}
    33ce:	f000 f9d3 	bl	3778 <__lesf2>
    33d2:	2800      	cmp	r0, #0
    33d4:	db01      	blt.n	33da <__aeabi_fcmplt+0xe>
    33d6:	2000      	movs	r0, #0
    33d8:	bd10      	pop	{r4, pc}
    33da:	2001      	movs	r0, #1
    33dc:	bd10      	pop	{r4, pc}
    33de:	46c0      	nop			; (mov r8, r8)

000033e0 <__aeabi_fcmple>:
    33e0:	b510      	push	{r4, lr}
    33e2:	f000 f9c9 	bl	3778 <__lesf2>
    33e6:	2800      	cmp	r0, #0
    33e8:	dd01      	ble.n	33ee <__aeabi_fcmple+0xe>
    33ea:	2000      	movs	r0, #0
    33ec:	bd10      	pop	{r4, pc}
    33ee:	2001      	movs	r0, #1
    33f0:	bd10      	pop	{r4, pc}
    33f2:	46c0      	nop			; (mov r8, r8)

000033f4 <__aeabi_fcmpgt>:
    33f4:	b510      	push	{r4, lr}
    33f6:	f000 f97f 	bl	36f8 <__gesf2>
    33fa:	2800      	cmp	r0, #0
    33fc:	dc01      	bgt.n	3402 <__aeabi_fcmpgt+0xe>
    33fe:	2000      	movs	r0, #0
    3400:	bd10      	pop	{r4, pc}
    3402:	2001      	movs	r0, #1
    3404:	bd10      	pop	{r4, pc}
    3406:	46c0      	nop			; (mov r8, r8)

00003408 <__aeabi_fcmpge>:
    3408:	b510      	push	{r4, lr}
    340a:	f000 f975 	bl	36f8 <__gesf2>
    340e:	2800      	cmp	r0, #0
    3410:	da01      	bge.n	3416 <__aeabi_fcmpge+0xe>
    3412:	2000      	movs	r0, #0
    3414:	bd10      	pop	{r4, pc}
    3416:	2001      	movs	r0, #1
    3418:	bd10      	pop	{r4, pc}
    341a:	46c0      	nop			; (mov r8, r8)

0000341c <__aeabi_fdiv>:
    341c:	b5f0      	push	{r4, r5, r6, r7, lr}
    341e:	4657      	mov	r7, sl
    3420:	464e      	mov	r6, r9
    3422:	46de      	mov	lr, fp
    3424:	4645      	mov	r5, r8
    3426:	b5e0      	push	{r5, r6, r7, lr}
    3428:	0244      	lsls	r4, r0, #9
    342a:	0043      	lsls	r3, r0, #1
    342c:	0fc6      	lsrs	r6, r0, #31
    342e:	b083      	sub	sp, #12
    3430:	1c0f      	adds	r7, r1, #0
    3432:	0a64      	lsrs	r4, r4, #9
    3434:	0e1b      	lsrs	r3, r3, #24
    3436:	46b2      	mov	sl, r6
    3438:	d053      	beq.n	34e2 <__aeabi_fdiv+0xc6>
    343a:	2bff      	cmp	r3, #255	; 0xff
    343c:	d027      	beq.n	348e <__aeabi_fdiv+0x72>
    343e:	2280      	movs	r2, #128	; 0x80
    3440:	00e4      	lsls	r4, r4, #3
    3442:	04d2      	lsls	r2, r2, #19
    3444:	4314      	orrs	r4, r2
    3446:	227f      	movs	r2, #127	; 0x7f
    3448:	4252      	negs	r2, r2
    344a:	4690      	mov	r8, r2
    344c:	4498      	add	r8, r3
    344e:	2300      	movs	r3, #0
    3450:	4699      	mov	r9, r3
    3452:	469b      	mov	fp, r3
    3454:	027d      	lsls	r5, r7, #9
    3456:	0078      	lsls	r0, r7, #1
    3458:	0ffb      	lsrs	r3, r7, #31
    345a:	0a6d      	lsrs	r5, r5, #9
    345c:	0e00      	lsrs	r0, r0, #24
    345e:	9300      	str	r3, [sp, #0]
    3460:	d024      	beq.n	34ac <__aeabi_fdiv+0x90>
    3462:	28ff      	cmp	r0, #255	; 0xff
    3464:	d046      	beq.n	34f4 <__aeabi_fdiv+0xd8>
    3466:	2380      	movs	r3, #128	; 0x80
    3468:	2100      	movs	r1, #0
    346a:	00ed      	lsls	r5, r5, #3
    346c:	04db      	lsls	r3, r3, #19
    346e:	431d      	orrs	r5, r3
    3470:	387f      	subs	r0, #127	; 0x7f
    3472:	4647      	mov	r7, r8
    3474:	1a38      	subs	r0, r7, r0
    3476:	464f      	mov	r7, r9
    3478:	430f      	orrs	r7, r1
    347a:	00bf      	lsls	r7, r7, #2
    347c:	46b9      	mov	r9, r7
    347e:	0033      	movs	r3, r6
    3480:	9a00      	ldr	r2, [sp, #0]
    3482:	4f87      	ldr	r7, [pc, #540]	; (36a0 <__aeabi_fdiv+0x284>)
    3484:	4053      	eors	r3, r2
    3486:	464a      	mov	r2, r9
    3488:	58ba      	ldr	r2, [r7, r2]
    348a:	9301      	str	r3, [sp, #4]
    348c:	4697      	mov	pc, r2
    348e:	2c00      	cmp	r4, #0
    3490:	d14e      	bne.n	3530 <__aeabi_fdiv+0x114>
    3492:	2308      	movs	r3, #8
    3494:	4699      	mov	r9, r3
    3496:	33f7      	adds	r3, #247	; 0xf7
    3498:	4698      	mov	r8, r3
    349a:	3bfd      	subs	r3, #253	; 0xfd
    349c:	469b      	mov	fp, r3
    349e:	027d      	lsls	r5, r7, #9
    34a0:	0078      	lsls	r0, r7, #1
    34a2:	0ffb      	lsrs	r3, r7, #31
    34a4:	0a6d      	lsrs	r5, r5, #9
    34a6:	0e00      	lsrs	r0, r0, #24
    34a8:	9300      	str	r3, [sp, #0]
    34aa:	d1da      	bne.n	3462 <__aeabi_fdiv+0x46>
    34ac:	2d00      	cmp	r5, #0
    34ae:	d126      	bne.n	34fe <__aeabi_fdiv+0xe2>
    34b0:	2000      	movs	r0, #0
    34b2:	2101      	movs	r1, #1
    34b4:	0033      	movs	r3, r6
    34b6:	9a00      	ldr	r2, [sp, #0]
    34b8:	4f7a      	ldr	r7, [pc, #488]	; (36a4 <__aeabi_fdiv+0x288>)
    34ba:	4053      	eors	r3, r2
    34bc:	4642      	mov	r2, r8
    34be:	1a10      	subs	r0, r2, r0
    34c0:	464a      	mov	r2, r9
    34c2:	430a      	orrs	r2, r1
    34c4:	0092      	lsls	r2, r2, #2
    34c6:	58ba      	ldr	r2, [r7, r2]
    34c8:	001d      	movs	r5, r3
    34ca:	4697      	mov	pc, r2
    34cc:	9b00      	ldr	r3, [sp, #0]
    34ce:	002c      	movs	r4, r5
    34d0:	469a      	mov	sl, r3
    34d2:	468b      	mov	fp, r1
    34d4:	465b      	mov	r3, fp
    34d6:	2b02      	cmp	r3, #2
    34d8:	d131      	bne.n	353e <__aeabi_fdiv+0x122>
    34da:	4653      	mov	r3, sl
    34dc:	21ff      	movs	r1, #255	; 0xff
    34de:	2400      	movs	r4, #0
    34e0:	e038      	b.n	3554 <__aeabi_fdiv+0x138>
    34e2:	2c00      	cmp	r4, #0
    34e4:	d117      	bne.n	3516 <__aeabi_fdiv+0xfa>
    34e6:	2304      	movs	r3, #4
    34e8:	4699      	mov	r9, r3
    34ea:	2300      	movs	r3, #0
    34ec:	4698      	mov	r8, r3
    34ee:	3301      	adds	r3, #1
    34f0:	469b      	mov	fp, r3
    34f2:	e7af      	b.n	3454 <__aeabi_fdiv+0x38>
    34f4:	20ff      	movs	r0, #255	; 0xff
    34f6:	2d00      	cmp	r5, #0
    34f8:	d10b      	bne.n	3512 <__aeabi_fdiv+0xf6>
    34fa:	2102      	movs	r1, #2
    34fc:	e7da      	b.n	34b4 <__aeabi_fdiv+0x98>
    34fe:	0028      	movs	r0, r5
    3500:	f001 fc28 	bl	4d54 <__clzsi2>
    3504:	1f43      	subs	r3, r0, #5
    3506:	409d      	lsls	r5, r3
    3508:	2376      	movs	r3, #118	; 0x76
    350a:	425b      	negs	r3, r3
    350c:	1a18      	subs	r0, r3, r0
    350e:	2100      	movs	r1, #0
    3510:	e7af      	b.n	3472 <__aeabi_fdiv+0x56>
    3512:	2103      	movs	r1, #3
    3514:	e7ad      	b.n	3472 <__aeabi_fdiv+0x56>
    3516:	0020      	movs	r0, r4
    3518:	f001 fc1c 	bl	4d54 <__clzsi2>
    351c:	1f43      	subs	r3, r0, #5
    351e:	409c      	lsls	r4, r3
    3520:	2376      	movs	r3, #118	; 0x76
    3522:	425b      	negs	r3, r3
    3524:	1a1b      	subs	r3, r3, r0
    3526:	4698      	mov	r8, r3
    3528:	2300      	movs	r3, #0
    352a:	4699      	mov	r9, r3
    352c:	469b      	mov	fp, r3
    352e:	e791      	b.n	3454 <__aeabi_fdiv+0x38>
    3530:	230c      	movs	r3, #12
    3532:	4699      	mov	r9, r3
    3534:	33f3      	adds	r3, #243	; 0xf3
    3536:	4698      	mov	r8, r3
    3538:	3bfc      	subs	r3, #252	; 0xfc
    353a:	469b      	mov	fp, r3
    353c:	e78a      	b.n	3454 <__aeabi_fdiv+0x38>
    353e:	2b03      	cmp	r3, #3
    3540:	d100      	bne.n	3544 <__aeabi_fdiv+0x128>
    3542:	e0a5      	b.n	3690 <__aeabi_fdiv+0x274>
    3544:	4655      	mov	r5, sl
    3546:	2b01      	cmp	r3, #1
    3548:	d000      	beq.n	354c <__aeabi_fdiv+0x130>
    354a:	e081      	b.n	3650 <__aeabi_fdiv+0x234>
    354c:	2301      	movs	r3, #1
    354e:	2100      	movs	r1, #0
    3550:	2400      	movs	r4, #0
    3552:	402b      	ands	r3, r5
    3554:	0264      	lsls	r4, r4, #9
    3556:	05c9      	lsls	r1, r1, #23
    3558:	0a60      	lsrs	r0, r4, #9
    355a:	07db      	lsls	r3, r3, #31
    355c:	4308      	orrs	r0, r1
    355e:	4318      	orrs	r0, r3
    3560:	b003      	add	sp, #12
    3562:	bc3c      	pop	{r2, r3, r4, r5}
    3564:	4690      	mov	r8, r2
    3566:	4699      	mov	r9, r3
    3568:	46a2      	mov	sl, r4
    356a:	46ab      	mov	fp, r5
    356c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    356e:	2480      	movs	r4, #128	; 0x80
    3570:	2300      	movs	r3, #0
    3572:	03e4      	lsls	r4, r4, #15
    3574:	21ff      	movs	r1, #255	; 0xff
    3576:	e7ed      	b.n	3554 <__aeabi_fdiv+0x138>
    3578:	21ff      	movs	r1, #255	; 0xff
    357a:	2400      	movs	r4, #0
    357c:	e7ea      	b.n	3554 <__aeabi_fdiv+0x138>
    357e:	2301      	movs	r3, #1
    3580:	1a59      	subs	r1, r3, r1
    3582:	291b      	cmp	r1, #27
    3584:	dd66      	ble.n	3654 <__aeabi_fdiv+0x238>
    3586:	9a01      	ldr	r2, [sp, #4]
    3588:	4013      	ands	r3, r2
    358a:	2100      	movs	r1, #0
    358c:	2400      	movs	r4, #0
    358e:	e7e1      	b.n	3554 <__aeabi_fdiv+0x138>
    3590:	2380      	movs	r3, #128	; 0x80
    3592:	03db      	lsls	r3, r3, #15
    3594:	421c      	tst	r4, r3
    3596:	d038      	beq.n	360a <__aeabi_fdiv+0x1ee>
    3598:	421d      	tst	r5, r3
    359a:	d051      	beq.n	3640 <__aeabi_fdiv+0x224>
    359c:	431c      	orrs	r4, r3
    359e:	0264      	lsls	r4, r4, #9
    35a0:	0a64      	lsrs	r4, r4, #9
    35a2:	0033      	movs	r3, r6
    35a4:	21ff      	movs	r1, #255	; 0xff
    35a6:	e7d5      	b.n	3554 <__aeabi_fdiv+0x138>
    35a8:	0163      	lsls	r3, r4, #5
    35aa:	016c      	lsls	r4, r5, #5
    35ac:	42a3      	cmp	r3, r4
    35ae:	d23b      	bcs.n	3628 <__aeabi_fdiv+0x20c>
    35b0:	261b      	movs	r6, #27
    35b2:	2100      	movs	r1, #0
    35b4:	3801      	subs	r0, #1
    35b6:	2501      	movs	r5, #1
    35b8:	001f      	movs	r7, r3
    35ba:	0049      	lsls	r1, r1, #1
    35bc:	005b      	lsls	r3, r3, #1
    35be:	2f00      	cmp	r7, #0
    35c0:	db01      	blt.n	35c6 <__aeabi_fdiv+0x1aa>
    35c2:	429c      	cmp	r4, r3
    35c4:	d801      	bhi.n	35ca <__aeabi_fdiv+0x1ae>
    35c6:	1b1b      	subs	r3, r3, r4
    35c8:	4329      	orrs	r1, r5
    35ca:	3e01      	subs	r6, #1
    35cc:	2e00      	cmp	r6, #0
    35ce:	d1f3      	bne.n	35b8 <__aeabi_fdiv+0x19c>
    35d0:	001c      	movs	r4, r3
    35d2:	1e63      	subs	r3, r4, #1
    35d4:	419c      	sbcs	r4, r3
    35d6:	430c      	orrs	r4, r1
    35d8:	0001      	movs	r1, r0
    35da:	317f      	adds	r1, #127	; 0x7f
    35dc:	2900      	cmp	r1, #0
    35de:	ddce      	ble.n	357e <__aeabi_fdiv+0x162>
    35e0:	0763      	lsls	r3, r4, #29
    35e2:	d004      	beq.n	35ee <__aeabi_fdiv+0x1d2>
    35e4:	230f      	movs	r3, #15
    35e6:	4023      	ands	r3, r4
    35e8:	2b04      	cmp	r3, #4
    35ea:	d000      	beq.n	35ee <__aeabi_fdiv+0x1d2>
    35ec:	3404      	adds	r4, #4
    35ee:	0123      	lsls	r3, r4, #4
    35f0:	d503      	bpl.n	35fa <__aeabi_fdiv+0x1de>
    35f2:	0001      	movs	r1, r0
    35f4:	4b2c      	ldr	r3, [pc, #176]	; (36a8 <__aeabi_fdiv+0x28c>)
    35f6:	3180      	adds	r1, #128	; 0x80
    35f8:	401c      	ands	r4, r3
    35fa:	29fe      	cmp	r1, #254	; 0xfe
    35fc:	dd0d      	ble.n	361a <__aeabi_fdiv+0x1fe>
    35fe:	2301      	movs	r3, #1
    3600:	9a01      	ldr	r2, [sp, #4]
    3602:	21ff      	movs	r1, #255	; 0xff
    3604:	4013      	ands	r3, r2
    3606:	2400      	movs	r4, #0
    3608:	e7a4      	b.n	3554 <__aeabi_fdiv+0x138>
    360a:	2380      	movs	r3, #128	; 0x80
    360c:	03db      	lsls	r3, r3, #15
    360e:	431c      	orrs	r4, r3
    3610:	0264      	lsls	r4, r4, #9
    3612:	0a64      	lsrs	r4, r4, #9
    3614:	0033      	movs	r3, r6
    3616:	21ff      	movs	r1, #255	; 0xff
    3618:	e79c      	b.n	3554 <__aeabi_fdiv+0x138>
    361a:	2301      	movs	r3, #1
    361c:	9a01      	ldr	r2, [sp, #4]
    361e:	01a4      	lsls	r4, r4, #6
    3620:	0a64      	lsrs	r4, r4, #9
    3622:	b2c9      	uxtb	r1, r1
    3624:	4013      	ands	r3, r2
    3626:	e795      	b.n	3554 <__aeabi_fdiv+0x138>
    3628:	1b1b      	subs	r3, r3, r4
    362a:	261a      	movs	r6, #26
    362c:	2101      	movs	r1, #1
    362e:	e7c2      	b.n	35b6 <__aeabi_fdiv+0x19a>
    3630:	9b00      	ldr	r3, [sp, #0]
    3632:	468b      	mov	fp, r1
    3634:	469a      	mov	sl, r3
    3636:	2400      	movs	r4, #0
    3638:	e74c      	b.n	34d4 <__aeabi_fdiv+0xb8>
    363a:	0263      	lsls	r3, r4, #9
    363c:	d5e5      	bpl.n	360a <__aeabi_fdiv+0x1ee>
    363e:	2500      	movs	r5, #0
    3640:	2480      	movs	r4, #128	; 0x80
    3642:	03e4      	lsls	r4, r4, #15
    3644:	432c      	orrs	r4, r5
    3646:	0264      	lsls	r4, r4, #9
    3648:	0a64      	lsrs	r4, r4, #9
    364a:	9b00      	ldr	r3, [sp, #0]
    364c:	21ff      	movs	r1, #255	; 0xff
    364e:	e781      	b.n	3554 <__aeabi_fdiv+0x138>
    3650:	9501      	str	r5, [sp, #4]
    3652:	e7c1      	b.n	35d8 <__aeabi_fdiv+0x1bc>
    3654:	0023      	movs	r3, r4
    3656:	2020      	movs	r0, #32
    3658:	40cb      	lsrs	r3, r1
    365a:	1a41      	subs	r1, r0, r1
    365c:	408c      	lsls	r4, r1
    365e:	1e61      	subs	r1, r4, #1
    3660:	418c      	sbcs	r4, r1
    3662:	431c      	orrs	r4, r3
    3664:	0763      	lsls	r3, r4, #29
    3666:	d004      	beq.n	3672 <__aeabi_fdiv+0x256>
    3668:	230f      	movs	r3, #15
    366a:	4023      	ands	r3, r4
    366c:	2b04      	cmp	r3, #4
    366e:	d000      	beq.n	3672 <__aeabi_fdiv+0x256>
    3670:	3404      	adds	r4, #4
    3672:	0163      	lsls	r3, r4, #5
    3674:	d505      	bpl.n	3682 <__aeabi_fdiv+0x266>
    3676:	2301      	movs	r3, #1
    3678:	9a01      	ldr	r2, [sp, #4]
    367a:	2101      	movs	r1, #1
    367c:	4013      	ands	r3, r2
    367e:	2400      	movs	r4, #0
    3680:	e768      	b.n	3554 <__aeabi_fdiv+0x138>
    3682:	2301      	movs	r3, #1
    3684:	9a01      	ldr	r2, [sp, #4]
    3686:	01a4      	lsls	r4, r4, #6
    3688:	0a64      	lsrs	r4, r4, #9
    368a:	4013      	ands	r3, r2
    368c:	2100      	movs	r1, #0
    368e:	e761      	b.n	3554 <__aeabi_fdiv+0x138>
    3690:	2380      	movs	r3, #128	; 0x80
    3692:	03db      	lsls	r3, r3, #15
    3694:	431c      	orrs	r4, r3
    3696:	0264      	lsls	r4, r4, #9
    3698:	0a64      	lsrs	r4, r4, #9
    369a:	4653      	mov	r3, sl
    369c:	21ff      	movs	r1, #255	; 0xff
    369e:	e759      	b.n	3554 <__aeabi_fdiv+0x138>
    36a0:	00005f38 	.word	0x00005f38
    36a4:	00005f78 	.word	0x00005f78
    36a8:	f7ffffff 	.word	0xf7ffffff

000036ac <__eqsf2>:
    36ac:	b570      	push	{r4, r5, r6, lr}
    36ae:	0042      	lsls	r2, r0, #1
    36b0:	0245      	lsls	r5, r0, #9
    36b2:	024e      	lsls	r6, r1, #9
    36b4:	004c      	lsls	r4, r1, #1
    36b6:	0fc3      	lsrs	r3, r0, #31
    36b8:	0a6d      	lsrs	r5, r5, #9
    36ba:	0e12      	lsrs	r2, r2, #24
    36bc:	0a76      	lsrs	r6, r6, #9
    36be:	0e24      	lsrs	r4, r4, #24
    36c0:	0fc9      	lsrs	r1, r1, #31
    36c2:	2001      	movs	r0, #1
    36c4:	2aff      	cmp	r2, #255	; 0xff
    36c6:	d006      	beq.n	36d6 <__eqsf2+0x2a>
    36c8:	2cff      	cmp	r4, #255	; 0xff
    36ca:	d003      	beq.n	36d4 <__eqsf2+0x28>
    36cc:	42a2      	cmp	r2, r4
    36ce:	d101      	bne.n	36d4 <__eqsf2+0x28>
    36d0:	42b5      	cmp	r5, r6
    36d2:	d006      	beq.n	36e2 <__eqsf2+0x36>
    36d4:	bd70      	pop	{r4, r5, r6, pc}
    36d6:	2d00      	cmp	r5, #0
    36d8:	d1fc      	bne.n	36d4 <__eqsf2+0x28>
    36da:	2cff      	cmp	r4, #255	; 0xff
    36dc:	d1fa      	bne.n	36d4 <__eqsf2+0x28>
    36de:	2e00      	cmp	r6, #0
    36e0:	d1f8      	bne.n	36d4 <__eqsf2+0x28>
    36e2:	428b      	cmp	r3, r1
    36e4:	d006      	beq.n	36f4 <__eqsf2+0x48>
    36e6:	2001      	movs	r0, #1
    36e8:	2a00      	cmp	r2, #0
    36ea:	d1f3      	bne.n	36d4 <__eqsf2+0x28>
    36ec:	0028      	movs	r0, r5
    36ee:	1e45      	subs	r5, r0, #1
    36f0:	41a8      	sbcs	r0, r5
    36f2:	e7ef      	b.n	36d4 <__eqsf2+0x28>
    36f4:	2000      	movs	r0, #0
    36f6:	e7ed      	b.n	36d4 <__eqsf2+0x28>

000036f8 <__gesf2>:
    36f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36fa:	0042      	lsls	r2, r0, #1
    36fc:	0245      	lsls	r5, r0, #9
    36fe:	024c      	lsls	r4, r1, #9
    3700:	0fc3      	lsrs	r3, r0, #31
    3702:	0048      	lsls	r0, r1, #1
    3704:	0a6d      	lsrs	r5, r5, #9
    3706:	0e12      	lsrs	r2, r2, #24
    3708:	0a64      	lsrs	r4, r4, #9
    370a:	0e00      	lsrs	r0, r0, #24
    370c:	0fc9      	lsrs	r1, r1, #31
    370e:	2aff      	cmp	r2, #255	; 0xff
    3710:	d01e      	beq.n	3750 <__gesf2+0x58>
    3712:	28ff      	cmp	r0, #255	; 0xff
    3714:	d021      	beq.n	375a <__gesf2+0x62>
    3716:	2a00      	cmp	r2, #0
    3718:	d10a      	bne.n	3730 <__gesf2+0x38>
    371a:	426e      	negs	r6, r5
    371c:	416e      	adcs	r6, r5
    371e:	b2f6      	uxtb	r6, r6
    3720:	2800      	cmp	r0, #0
    3722:	d10f      	bne.n	3744 <__gesf2+0x4c>
    3724:	2c00      	cmp	r4, #0
    3726:	d10d      	bne.n	3744 <__gesf2+0x4c>
    3728:	2000      	movs	r0, #0
    372a:	2d00      	cmp	r5, #0
    372c:	d009      	beq.n	3742 <__gesf2+0x4a>
    372e:	e005      	b.n	373c <__gesf2+0x44>
    3730:	2800      	cmp	r0, #0
    3732:	d101      	bne.n	3738 <__gesf2+0x40>
    3734:	2c00      	cmp	r4, #0
    3736:	d001      	beq.n	373c <__gesf2+0x44>
    3738:	428b      	cmp	r3, r1
    373a:	d011      	beq.n	3760 <__gesf2+0x68>
    373c:	2101      	movs	r1, #1
    373e:	4258      	negs	r0, r3
    3740:	4308      	orrs	r0, r1
    3742:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3744:	2e00      	cmp	r6, #0
    3746:	d0f7      	beq.n	3738 <__gesf2+0x40>
    3748:	2001      	movs	r0, #1
    374a:	3901      	subs	r1, #1
    374c:	4308      	orrs	r0, r1
    374e:	e7f8      	b.n	3742 <__gesf2+0x4a>
    3750:	2d00      	cmp	r5, #0
    3752:	d0de      	beq.n	3712 <__gesf2+0x1a>
    3754:	2002      	movs	r0, #2
    3756:	4240      	negs	r0, r0
    3758:	e7f3      	b.n	3742 <__gesf2+0x4a>
    375a:	2c00      	cmp	r4, #0
    375c:	d0db      	beq.n	3716 <__gesf2+0x1e>
    375e:	e7f9      	b.n	3754 <__gesf2+0x5c>
    3760:	4282      	cmp	r2, r0
    3762:	dceb      	bgt.n	373c <__gesf2+0x44>
    3764:	db04      	blt.n	3770 <__gesf2+0x78>
    3766:	42a5      	cmp	r5, r4
    3768:	d8e8      	bhi.n	373c <__gesf2+0x44>
    376a:	2000      	movs	r0, #0
    376c:	42a5      	cmp	r5, r4
    376e:	d2e8      	bcs.n	3742 <__gesf2+0x4a>
    3770:	2101      	movs	r1, #1
    3772:	1e58      	subs	r0, r3, #1
    3774:	4308      	orrs	r0, r1
    3776:	e7e4      	b.n	3742 <__gesf2+0x4a>

00003778 <__lesf2>:
    3778:	b5f0      	push	{r4, r5, r6, r7, lr}
    377a:	0042      	lsls	r2, r0, #1
    377c:	024d      	lsls	r5, r1, #9
    377e:	004c      	lsls	r4, r1, #1
    3780:	0246      	lsls	r6, r0, #9
    3782:	0a76      	lsrs	r6, r6, #9
    3784:	0e12      	lsrs	r2, r2, #24
    3786:	0fc3      	lsrs	r3, r0, #31
    3788:	0a6d      	lsrs	r5, r5, #9
    378a:	0e24      	lsrs	r4, r4, #24
    378c:	0fc9      	lsrs	r1, r1, #31
    378e:	2aff      	cmp	r2, #255	; 0xff
    3790:	d016      	beq.n	37c0 <__lesf2+0x48>
    3792:	2cff      	cmp	r4, #255	; 0xff
    3794:	d018      	beq.n	37c8 <__lesf2+0x50>
    3796:	2a00      	cmp	r2, #0
    3798:	d10a      	bne.n	37b0 <__lesf2+0x38>
    379a:	4270      	negs	r0, r6
    379c:	4170      	adcs	r0, r6
    379e:	b2c0      	uxtb	r0, r0
    37a0:	2c00      	cmp	r4, #0
    37a2:	d015      	beq.n	37d0 <__lesf2+0x58>
    37a4:	2800      	cmp	r0, #0
    37a6:	d005      	beq.n	37b4 <__lesf2+0x3c>
    37a8:	2001      	movs	r0, #1
    37aa:	3901      	subs	r1, #1
    37ac:	4308      	orrs	r0, r1
    37ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37b0:	2c00      	cmp	r4, #0
    37b2:	d013      	beq.n	37dc <__lesf2+0x64>
    37b4:	4299      	cmp	r1, r3
    37b6:	d014      	beq.n	37e2 <__lesf2+0x6a>
    37b8:	2001      	movs	r0, #1
    37ba:	425b      	negs	r3, r3
    37bc:	4318      	orrs	r0, r3
    37be:	e7f6      	b.n	37ae <__lesf2+0x36>
    37c0:	2002      	movs	r0, #2
    37c2:	2e00      	cmp	r6, #0
    37c4:	d1f3      	bne.n	37ae <__lesf2+0x36>
    37c6:	e7e4      	b.n	3792 <__lesf2+0x1a>
    37c8:	2002      	movs	r0, #2
    37ca:	2d00      	cmp	r5, #0
    37cc:	d1ef      	bne.n	37ae <__lesf2+0x36>
    37ce:	e7e2      	b.n	3796 <__lesf2+0x1e>
    37d0:	2d00      	cmp	r5, #0
    37d2:	d1e7      	bne.n	37a4 <__lesf2+0x2c>
    37d4:	2000      	movs	r0, #0
    37d6:	2e00      	cmp	r6, #0
    37d8:	d0e9      	beq.n	37ae <__lesf2+0x36>
    37da:	e7ed      	b.n	37b8 <__lesf2+0x40>
    37dc:	2d00      	cmp	r5, #0
    37de:	d1e9      	bne.n	37b4 <__lesf2+0x3c>
    37e0:	e7ea      	b.n	37b8 <__lesf2+0x40>
    37e2:	42a2      	cmp	r2, r4
    37e4:	dc06      	bgt.n	37f4 <__lesf2+0x7c>
    37e6:	dbdf      	blt.n	37a8 <__lesf2+0x30>
    37e8:	42ae      	cmp	r6, r5
    37ea:	d803      	bhi.n	37f4 <__lesf2+0x7c>
    37ec:	2000      	movs	r0, #0
    37ee:	42ae      	cmp	r6, r5
    37f0:	d3da      	bcc.n	37a8 <__lesf2+0x30>
    37f2:	e7dc      	b.n	37ae <__lesf2+0x36>
    37f4:	2001      	movs	r0, #1
    37f6:	4249      	negs	r1, r1
    37f8:	4308      	orrs	r0, r1
    37fa:	e7d8      	b.n	37ae <__lesf2+0x36>

000037fc <__aeabi_fmul>:
    37fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37fe:	4657      	mov	r7, sl
    3800:	464e      	mov	r6, r9
    3802:	4645      	mov	r5, r8
    3804:	46de      	mov	lr, fp
    3806:	b5e0      	push	{r5, r6, r7, lr}
    3808:	0247      	lsls	r7, r0, #9
    380a:	0046      	lsls	r6, r0, #1
    380c:	4688      	mov	r8, r1
    380e:	0a7f      	lsrs	r7, r7, #9
    3810:	0e36      	lsrs	r6, r6, #24
    3812:	0fc4      	lsrs	r4, r0, #31
    3814:	2e00      	cmp	r6, #0
    3816:	d047      	beq.n	38a8 <__aeabi_fmul+0xac>
    3818:	2eff      	cmp	r6, #255	; 0xff
    381a:	d024      	beq.n	3866 <__aeabi_fmul+0x6a>
    381c:	00fb      	lsls	r3, r7, #3
    381e:	2780      	movs	r7, #128	; 0x80
    3820:	04ff      	lsls	r7, r7, #19
    3822:	431f      	orrs	r7, r3
    3824:	2300      	movs	r3, #0
    3826:	4699      	mov	r9, r3
    3828:	469a      	mov	sl, r3
    382a:	3e7f      	subs	r6, #127	; 0x7f
    382c:	4643      	mov	r3, r8
    382e:	025d      	lsls	r5, r3, #9
    3830:	0058      	lsls	r0, r3, #1
    3832:	0fdb      	lsrs	r3, r3, #31
    3834:	0a6d      	lsrs	r5, r5, #9
    3836:	0e00      	lsrs	r0, r0, #24
    3838:	4698      	mov	r8, r3
    383a:	d043      	beq.n	38c4 <__aeabi_fmul+0xc8>
    383c:	28ff      	cmp	r0, #255	; 0xff
    383e:	d03b      	beq.n	38b8 <__aeabi_fmul+0xbc>
    3840:	00eb      	lsls	r3, r5, #3
    3842:	2580      	movs	r5, #128	; 0x80
    3844:	2200      	movs	r2, #0
    3846:	04ed      	lsls	r5, r5, #19
    3848:	431d      	orrs	r5, r3
    384a:	387f      	subs	r0, #127	; 0x7f
    384c:	1836      	adds	r6, r6, r0
    384e:	1c73      	adds	r3, r6, #1
    3850:	4641      	mov	r1, r8
    3852:	469b      	mov	fp, r3
    3854:	464b      	mov	r3, r9
    3856:	4061      	eors	r1, r4
    3858:	4313      	orrs	r3, r2
    385a:	2b0f      	cmp	r3, #15
    385c:	d864      	bhi.n	3928 <__aeabi_fmul+0x12c>
    385e:	4875      	ldr	r0, [pc, #468]	; (3a34 <__aeabi_fmul+0x238>)
    3860:	009b      	lsls	r3, r3, #2
    3862:	58c3      	ldr	r3, [r0, r3]
    3864:	469f      	mov	pc, r3
    3866:	2f00      	cmp	r7, #0
    3868:	d142      	bne.n	38f0 <__aeabi_fmul+0xf4>
    386a:	2308      	movs	r3, #8
    386c:	4699      	mov	r9, r3
    386e:	3b06      	subs	r3, #6
    3870:	26ff      	movs	r6, #255	; 0xff
    3872:	469a      	mov	sl, r3
    3874:	e7da      	b.n	382c <__aeabi_fmul+0x30>
    3876:	4641      	mov	r1, r8
    3878:	2a02      	cmp	r2, #2
    387a:	d028      	beq.n	38ce <__aeabi_fmul+0xd2>
    387c:	2a03      	cmp	r2, #3
    387e:	d100      	bne.n	3882 <__aeabi_fmul+0x86>
    3880:	e0ce      	b.n	3a20 <__aeabi_fmul+0x224>
    3882:	2a01      	cmp	r2, #1
    3884:	d000      	beq.n	3888 <__aeabi_fmul+0x8c>
    3886:	e0ac      	b.n	39e2 <__aeabi_fmul+0x1e6>
    3888:	4011      	ands	r1, r2
    388a:	2000      	movs	r0, #0
    388c:	2200      	movs	r2, #0
    388e:	b2cc      	uxtb	r4, r1
    3890:	0240      	lsls	r0, r0, #9
    3892:	05d2      	lsls	r2, r2, #23
    3894:	0a40      	lsrs	r0, r0, #9
    3896:	07e4      	lsls	r4, r4, #31
    3898:	4310      	orrs	r0, r2
    389a:	4320      	orrs	r0, r4
    389c:	bc3c      	pop	{r2, r3, r4, r5}
    389e:	4690      	mov	r8, r2
    38a0:	4699      	mov	r9, r3
    38a2:	46a2      	mov	sl, r4
    38a4:	46ab      	mov	fp, r5
    38a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38a8:	2f00      	cmp	r7, #0
    38aa:	d115      	bne.n	38d8 <__aeabi_fmul+0xdc>
    38ac:	2304      	movs	r3, #4
    38ae:	4699      	mov	r9, r3
    38b0:	3b03      	subs	r3, #3
    38b2:	2600      	movs	r6, #0
    38b4:	469a      	mov	sl, r3
    38b6:	e7b9      	b.n	382c <__aeabi_fmul+0x30>
    38b8:	20ff      	movs	r0, #255	; 0xff
    38ba:	2202      	movs	r2, #2
    38bc:	2d00      	cmp	r5, #0
    38be:	d0c5      	beq.n	384c <__aeabi_fmul+0x50>
    38c0:	2203      	movs	r2, #3
    38c2:	e7c3      	b.n	384c <__aeabi_fmul+0x50>
    38c4:	2d00      	cmp	r5, #0
    38c6:	d119      	bne.n	38fc <__aeabi_fmul+0x100>
    38c8:	2000      	movs	r0, #0
    38ca:	2201      	movs	r2, #1
    38cc:	e7be      	b.n	384c <__aeabi_fmul+0x50>
    38ce:	2401      	movs	r4, #1
    38d0:	22ff      	movs	r2, #255	; 0xff
    38d2:	400c      	ands	r4, r1
    38d4:	2000      	movs	r0, #0
    38d6:	e7db      	b.n	3890 <__aeabi_fmul+0x94>
    38d8:	0038      	movs	r0, r7
    38da:	f001 fa3b 	bl	4d54 <__clzsi2>
    38de:	2676      	movs	r6, #118	; 0x76
    38e0:	1f43      	subs	r3, r0, #5
    38e2:	409f      	lsls	r7, r3
    38e4:	2300      	movs	r3, #0
    38e6:	4276      	negs	r6, r6
    38e8:	1a36      	subs	r6, r6, r0
    38ea:	4699      	mov	r9, r3
    38ec:	469a      	mov	sl, r3
    38ee:	e79d      	b.n	382c <__aeabi_fmul+0x30>
    38f0:	230c      	movs	r3, #12
    38f2:	4699      	mov	r9, r3
    38f4:	3b09      	subs	r3, #9
    38f6:	26ff      	movs	r6, #255	; 0xff
    38f8:	469a      	mov	sl, r3
    38fa:	e797      	b.n	382c <__aeabi_fmul+0x30>
    38fc:	0028      	movs	r0, r5
    38fe:	f001 fa29 	bl	4d54 <__clzsi2>
    3902:	1f43      	subs	r3, r0, #5
    3904:	409d      	lsls	r5, r3
    3906:	2376      	movs	r3, #118	; 0x76
    3908:	425b      	negs	r3, r3
    390a:	1a18      	subs	r0, r3, r0
    390c:	2200      	movs	r2, #0
    390e:	e79d      	b.n	384c <__aeabi_fmul+0x50>
    3910:	2080      	movs	r0, #128	; 0x80
    3912:	2400      	movs	r4, #0
    3914:	03c0      	lsls	r0, r0, #15
    3916:	22ff      	movs	r2, #255	; 0xff
    3918:	e7ba      	b.n	3890 <__aeabi_fmul+0x94>
    391a:	003d      	movs	r5, r7
    391c:	4652      	mov	r2, sl
    391e:	e7ab      	b.n	3878 <__aeabi_fmul+0x7c>
    3920:	003d      	movs	r5, r7
    3922:	0021      	movs	r1, r4
    3924:	4652      	mov	r2, sl
    3926:	e7a7      	b.n	3878 <__aeabi_fmul+0x7c>
    3928:	0c3b      	lsrs	r3, r7, #16
    392a:	469c      	mov	ip, r3
    392c:	042a      	lsls	r2, r5, #16
    392e:	0c12      	lsrs	r2, r2, #16
    3930:	0c2b      	lsrs	r3, r5, #16
    3932:	0014      	movs	r4, r2
    3934:	4660      	mov	r0, ip
    3936:	4665      	mov	r5, ip
    3938:	043f      	lsls	r7, r7, #16
    393a:	0c3f      	lsrs	r7, r7, #16
    393c:	437c      	muls	r4, r7
    393e:	4342      	muls	r2, r0
    3940:	435d      	muls	r5, r3
    3942:	437b      	muls	r3, r7
    3944:	0c27      	lsrs	r7, r4, #16
    3946:	189b      	adds	r3, r3, r2
    3948:	18ff      	adds	r7, r7, r3
    394a:	42ba      	cmp	r2, r7
    394c:	d903      	bls.n	3956 <__aeabi_fmul+0x15a>
    394e:	2380      	movs	r3, #128	; 0x80
    3950:	025b      	lsls	r3, r3, #9
    3952:	469c      	mov	ip, r3
    3954:	4465      	add	r5, ip
    3956:	0424      	lsls	r4, r4, #16
    3958:	043a      	lsls	r2, r7, #16
    395a:	0c24      	lsrs	r4, r4, #16
    395c:	1912      	adds	r2, r2, r4
    395e:	0193      	lsls	r3, r2, #6
    3960:	1e5c      	subs	r4, r3, #1
    3962:	41a3      	sbcs	r3, r4
    3964:	0c3f      	lsrs	r7, r7, #16
    3966:	0e92      	lsrs	r2, r2, #26
    3968:	197d      	adds	r5, r7, r5
    396a:	431a      	orrs	r2, r3
    396c:	01ad      	lsls	r5, r5, #6
    396e:	4315      	orrs	r5, r2
    3970:	012b      	lsls	r3, r5, #4
    3972:	d504      	bpl.n	397e <__aeabi_fmul+0x182>
    3974:	2301      	movs	r3, #1
    3976:	465e      	mov	r6, fp
    3978:	086a      	lsrs	r2, r5, #1
    397a:	401d      	ands	r5, r3
    397c:	4315      	orrs	r5, r2
    397e:	0032      	movs	r2, r6
    3980:	327f      	adds	r2, #127	; 0x7f
    3982:	2a00      	cmp	r2, #0
    3984:	dd25      	ble.n	39d2 <__aeabi_fmul+0x1d6>
    3986:	076b      	lsls	r3, r5, #29
    3988:	d004      	beq.n	3994 <__aeabi_fmul+0x198>
    398a:	230f      	movs	r3, #15
    398c:	402b      	ands	r3, r5
    398e:	2b04      	cmp	r3, #4
    3990:	d000      	beq.n	3994 <__aeabi_fmul+0x198>
    3992:	3504      	adds	r5, #4
    3994:	012b      	lsls	r3, r5, #4
    3996:	d503      	bpl.n	39a0 <__aeabi_fmul+0x1a4>
    3998:	0032      	movs	r2, r6
    399a:	4b27      	ldr	r3, [pc, #156]	; (3a38 <__aeabi_fmul+0x23c>)
    399c:	3280      	adds	r2, #128	; 0x80
    399e:	401d      	ands	r5, r3
    39a0:	2afe      	cmp	r2, #254	; 0xfe
    39a2:	dc94      	bgt.n	38ce <__aeabi_fmul+0xd2>
    39a4:	2401      	movs	r4, #1
    39a6:	01a8      	lsls	r0, r5, #6
    39a8:	0a40      	lsrs	r0, r0, #9
    39aa:	b2d2      	uxtb	r2, r2
    39ac:	400c      	ands	r4, r1
    39ae:	e76f      	b.n	3890 <__aeabi_fmul+0x94>
    39b0:	2080      	movs	r0, #128	; 0x80
    39b2:	03c0      	lsls	r0, r0, #15
    39b4:	4207      	tst	r7, r0
    39b6:	d007      	beq.n	39c8 <__aeabi_fmul+0x1cc>
    39b8:	4205      	tst	r5, r0
    39ba:	d105      	bne.n	39c8 <__aeabi_fmul+0x1cc>
    39bc:	4328      	orrs	r0, r5
    39be:	0240      	lsls	r0, r0, #9
    39c0:	0a40      	lsrs	r0, r0, #9
    39c2:	4644      	mov	r4, r8
    39c4:	22ff      	movs	r2, #255	; 0xff
    39c6:	e763      	b.n	3890 <__aeabi_fmul+0x94>
    39c8:	4338      	orrs	r0, r7
    39ca:	0240      	lsls	r0, r0, #9
    39cc:	0a40      	lsrs	r0, r0, #9
    39ce:	22ff      	movs	r2, #255	; 0xff
    39d0:	e75e      	b.n	3890 <__aeabi_fmul+0x94>
    39d2:	2401      	movs	r4, #1
    39d4:	1aa3      	subs	r3, r4, r2
    39d6:	2b1b      	cmp	r3, #27
    39d8:	dd05      	ble.n	39e6 <__aeabi_fmul+0x1ea>
    39da:	400c      	ands	r4, r1
    39dc:	2200      	movs	r2, #0
    39de:	2000      	movs	r0, #0
    39e0:	e756      	b.n	3890 <__aeabi_fmul+0x94>
    39e2:	465e      	mov	r6, fp
    39e4:	e7cb      	b.n	397e <__aeabi_fmul+0x182>
    39e6:	002a      	movs	r2, r5
    39e8:	2020      	movs	r0, #32
    39ea:	40da      	lsrs	r2, r3
    39ec:	1ac3      	subs	r3, r0, r3
    39ee:	409d      	lsls	r5, r3
    39f0:	002b      	movs	r3, r5
    39f2:	1e5d      	subs	r5, r3, #1
    39f4:	41ab      	sbcs	r3, r5
    39f6:	4313      	orrs	r3, r2
    39f8:	075a      	lsls	r2, r3, #29
    39fa:	d004      	beq.n	3a06 <__aeabi_fmul+0x20a>
    39fc:	220f      	movs	r2, #15
    39fe:	401a      	ands	r2, r3
    3a00:	2a04      	cmp	r2, #4
    3a02:	d000      	beq.n	3a06 <__aeabi_fmul+0x20a>
    3a04:	3304      	adds	r3, #4
    3a06:	015a      	lsls	r2, r3, #5
    3a08:	d504      	bpl.n	3a14 <__aeabi_fmul+0x218>
    3a0a:	2401      	movs	r4, #1
    3a0c:	2201      	movs	r2, #1
    3a0e:	400c      	ands	r4, r1
    3a10:	2000      	movs	r0, #0
    3a12:	e73d      	b.n	3890 <__aeabi_fmul+0x94>
    3a14:	2401      	movs	r4, #1
    3a16:	019b      	lsls	r3, r3, #6
    3a18:	0a58      	lsrs	r0, r3, #9
    3a1a:	400c      	ands	r4, r1
    3a1c:	2200      	movs	r2, #0
    3a1e:	e737      	b.n	3890 <__aeabi_fmul+0x94>
    3a20:	2080      	movs	r0, #128	; 0x80
    3a22:	2401      	movs	r4, #1
    3a24:	03c0      	lsls	r0, r0, #15
    3a26:	4328      	orrs	r0, r5
    3a28:	0240      	lsls	r0, r0, #9
    3a2a:	0a40      	lsrs	r0, r0, #9
    3a2c:	400c      	ands	r4, r1
    3a2e:	22ff      	movs	r2, #255	; 0xff
    3a30:	e72e      	b.n	3890 <__aeabi_fmul+0x94>
    3a32:	46c0      	nop			; (mov r8, r8)
    3a34:	00005fb8 	.word	0x00005fb8
    3a38:	f7ffffff 	.word	0xf7ffffff

00003a3c <__aeabi_f2iz>:
    3a3c:	0241      	lsls	r1, r0, #9
    3a3e:	0043      	lsls	r3, r0, #1
    3a40:	0fc2      	lsrs	r2, r0, #31
    3a42:	0a49      	lsrs	r1, r1, #9
    3a44:	0e1b      	lsrs	r3, r3, #24
    3a46:	2000      	movs	r0, #0
    3a48:	2b7e      	cmp	r3, #126	; 0x7e
    3a4a:	dd0d      	ble.n	3a68 <__aeabi_f2iz+0x2c>
    3a4c:	2b9d      	cmp	r3, #157	; 0x9d
    3a4e:	dc0c      	bgt.n	3a6a <__aeabi_f2iz+0x2e>
    3a50:	2080      	movs	r0, #128	; 0x80
    3a52:	0400      	lsls	r0, r0, #16
    3a54:	4301      	orrs	r1, r0
    3a56:	2b95      	cmp	r3, #149	; 0x95
    3a58:	dc0a      	bgt.n	3a70 <__aeabi_f2iz+0x34>
    3a5a:	2096      	movs	r0, #150	; 0x96
    3a5c:	1ac3      	subs	r3, r0, r3
    3a5e:	40d9      	lsrs	r1, r3
    3a60:	4248      	negs	r0, r1
    3a62:	2a00      	cmp	r2, #0
    3a64:	d100      	bne.n	3a68 <__aeabi_f2iz+0x2c>
    3a66:	0008      	movs	r0, r1
    3a68:	4770      	bx	lr
    3a6a:	4b03      	ldr	r3, [pc, #12]	; (3a78 <__aeabi_f2iz+0x3c>)
    3a6c:	18d0      	adds	r0, r2, r3
    3a6e:	e7fb      	b.n	3a68 <__aeabi_f2iz+0x2c>
    3a70:	3b96      	subs	r3, #150	; 0x96
    3a72:	4099      	lsls	r1, r3
    3a74:	e7f4      	b.n	3a60 <__aeabi_f2iz+0x24>
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	7fffffff 	.word	0x7fffffff

00003a7c <__aeabi_i2f>:
    3a7c:	b570      	push	{r4, r5, r6, lr}
    3a7e:	2800      	cmp	r0, #0
    3a80:	d030      	beq.n	3ae4 <__aeabi_i2f+0x68>
    3a82:	17c3      	asrs	r3, r0, #31
    3a84:	18c4      	adds	r4, r0, r3
    3a86:	405c      	eors	r4, r3
    3a88:	0fc5      	lsrs	r5, r0, #31
    3a8a:	0020      	movs	r0, r4
    3a8c:	f001 f962 	bl	4d54 <__clzsi2>
    3a90:	239e      	movs	r3, #158	; 0x9e
    3a92:	1a1b      	subs	r3, r3, r0
    3a94:	2b96      	cmp	r3, #150	; 0x96
    3a96:	dc0d      	bgt.n	3ab4 <__aeabi_i2f+0x38>
    3a98:	2296      	movs	r2, #150	; 0x96
    3a9a:	1ad2      	subs	r2, r2, r3
    3a9c:	4094      	lsls	r4, r2
    3a9e:	002a      	movs	r2, r5
    3aa0:	0264      	lsls	r4, r4, #9
    3aa2:	0a64      	lsrs	r4, r4, #9
    3aa4:	b2db      	uxtb	r3, r3
    3aa6:	0264      	lsls	r4, r4, #9
    3aa8:	05db      	lsls	r3, r3, #23
    3aaa:	0a60      	lsrs	r0, r4, #9
    3aac:	07d2      	lsls	r2, r2, #31
    3aae:	4318      	orrs	r0, r3
    3ab0:	4310      	orrs	r0, r2
    3ab2:	bd70      	pop	{r4, r5, r6, pc}
    3ab4:	2b99      	cmp	r3, #153	; 0x99
    3ab6:	dc19      	bgt.n	3aec <__aeabi_i2f+0x70>
    3ab8:	2299      	movs	r2, #153	; 0x99
    3aba:	1ad2      	subs	r2, r2, r3
    3abc:	2a00      	cmp	r2, #0
    3abe:	dd29      	ble.n	3b14 <__aeabi_i2f+0x98>
    3ac0:	4094      	lsls	r4, r2
    3ac2:	0022      	movs	r2, r4
    3ac4:	4c14      	ldr	r4, [pc, #80]	; (3b18 <__aeabi_i2f+0x9c>)
    3ac6:	4014      	ands	r4, r2
    3ac8:	0751      	lsls	r1, r2, #29
    3aca:	d004      	beq.n	3ad6 <__aeabi_i2f+0x5a>
    3acc:	210f      	movs	r1, #15
    3ace:	400a      	ands	r2, r1
    3ad0:	2a04      	cmp	r2, #4
    3ad2:	d000      	beq.n	3ad6 <__aeabi_i2f+0x5a>
    3ad4:	3404      	adds	r4, #4
    3ad6:	0162      	lsls	r2, r4, #5
    3ad8:	d413      	bmi.n	3b02 <__aeabi_i2f+0x86>
    3ada:	01a4      	lsls	r4, r4, #6
    3adc:	0a64      	lsrs	r4, r4, #9
    3ade:	b2db      	uxtb	r3, r3
    3ae0:	002a      	movs	r2, r5
    3ae2:	e7e0      	b.n	3aa6 <__aeabi_i2f+0x2a>
    3ae4:	2200      	movs	r2, #0
    3ae6:	2300      	movs	r3, #0
    3ae8:	2400      	movs	r4, #0
    3aea:	e7dc      	b.n	3aa6 <__aeabi_i2f+0x2a>
    3aec:	2205      	movs	r2, #5
    3aee:	0021      	movs	r1, r4
    3af0:	1a12      	subs	r2, r2, r0
    3af2:	40d1      	lsrs	r1, r2
    3af4:	22b9      	movs	r2, #185	; 0xb9
    3af6:	1ad2      	subs	r2, r2, r3
    3af8:	4094      	lsls	r4, r2
    3afa:	1e62      	subs	r2, r4, #1
    3afc:	4194      	sbcs	r4, r2
    3afe:	430c      	orrs	r4, r1
    3b00:	e7da      	b.n	3ab8 <__aeabi_i2f+0x3c>
    3b02:	4b05      	ldr	r3, [pc, #20]	; (3b18 <__aeabi_i2f+0x9c>)
    3b04:	002a      	movs	r2, r5
    3b06:	401c      	ands	r4, r3
    3b08:	239f      	movs	r3, #159	; 0x9f
    3b0a:	01a4      	lsls	r4, r4, #6
    3b0c:	1a1b      	subs	r3, r3, r0
    3b0e:	0a64      	lsrs	r4, r4, #9
    3b10:	b2db      	uxtb	r3, r3
    3b12:	e7c8      	b.n	3aa6 <__aeabi_i2f+0x2a>
    3b14:	0022      	movs	r2, r4
    3b16:	e7d5      	b.n	3ac4 <__aeabi_i2f+0x48>
    3b18:	fbffffff 	.word	0xfbffffff

00003b1c <__aeabi_dadd>:
    3b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b1e:	4645      	mov	r5, r8
    3b20:	46de      	mov	lr, fp
    3b22:	4657      	mov	r7, sl
    3b24:	464e      	mov	r6, r9
    3b26:	030c      	lsls	r4, r1, #12
    3b28:	b5e0      	push	{r5, r6, r7, lr}
    3b2a:	004e      	lsls	r6, r1, #1
    3b2c:	0fc9      	lsrs	r1, r1, #31
    3b2e:	4688      	mov	r8, r1
    3b30:	000d      	movs	r5, r1
    3b32:	0a61      	lsrs	r1, r4, #9
    3b34:	0f44      	lsrs	r4, r0, #29
    3b36:	430c      	orrs	r4, r1
    3b38:	00c7      	lsls	r7, r0, #3
    3b3a:	0319      	lsls	r1, r3, #12
    3b3c:	0058      	lsls	r0, r3, #1
    3b3e:	0fdb      	lsrs	r3, r3, #31
    3b40:	469b      	mov	fp, r3
    3b42:	0a4b      	lsrs	r3, r1, #9
    3b44:	0f51      	lsrs	r1, r2, #29
    3b46:	430b      	orrs	r3, r1
    3b48:	0d76      	lsrs	r6, r6, #21
    3b4a:	0d40      	lsrs	r0, r0, #21
    3b4c:	0019      	movs	r1, r3
    3b4e:	00d2      	lsls	r2, r2, #3
    3b50:	45d8      	cmp	r8, fp
    3b52:	d100      	bne.n	3b56 <__aeabi_dadd+0x3a>
    3b54:	e0ae      	b.n	3cb4 <__aeabi_dadd+0x198>
    3b56:	1a35      	subs	r5, r6, r0
    3b58:	2d00      	cmp	r5, #0
    3b5a:	dc00      	bgt.n	3b5e <__aeabi_dadd+0x42>
    3b5c:	e0f6      	b.n	3d4c <__aeabi_dadd+0x230>
    3b5e:	2800      	cmp	r0, #0
    3b60:	d10f      	bne.n	3b82 <__aeabi_dadd+0x66>
    3b62:	4313      	orrs	r3, r2
    3b64:	d100      	bne.n	3b68 <__aeabi_dadd+0x4c>
    3b66:	e0db      	b.n	3d20 <__aeabi_dadd+0x204>
    3b68:	1e6b      	subs	r3, r5, #1
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d000      	beq.n	3b70 <__aeabi_dadd+0x54>
    3b6e:	e137      	b.n	3de0 <__aeabi_dadd+0x2c4>
    3b70:	1aba      	subs	r2, r7, r2
    3b72:	4297      	cmp	r7, r2
    3b74:	41bf      	sbcs	r7, r7
    3b76:	1a64      	subs	r4, r4, r1
    3b78:	427f      	negs	r7, r7
    3b7a:	1be4      	subs	r4, r4, r7
    3b7c:	2601      	movs	r6, #1
    3b7e:	0017      	movs	r7, r2
    3b80:	e024      	b.n	3bcc <__aeabi_dadd+0xb0>
    3b82:	4bc6      	ldr	r3, [pc, #792]	; (3e9c <__aeabi_dadd+0x380>)
    3b84:	429e      	cmp	r6, r3
    3b86:	d04d      	beq.n	3c24 <__aeabi_dadd+0x108>
    3b88:	2380      	movs	r3, #128	; 0x80
    3b8a:	041b      	lsls	r3, r3, #16
    3b8c:	4319      	orrs	r1, r3
    3b8e:	2d38      	cmp	r5, #56	; 0x38
    3b90:	dd00      	ble.n	3b94 <__aeabi_dadd+0x78>
    3b92:	e107      	b.n	3da4 <__aeabi_dadd+0x288>
    3b94:	2d1f      	cmp	r5, #31
    3b96:	dd00      	ble.n	3b9a <__aeabi_dadd+0x7e>
    3b98:	e138      	b.n	3e0c <__aeabi_dadd+0x2f0>
    3b9a:	2020      	movs	r0, #32
    3b9c:	1b43      	subs	r3, r0, r5
    3b9e:	469a      	mov	sl, r3
    3ba0:	000b      	movs	r3, r1
    3ba2:	4650      	mov	r0, sl
    3ba4:	4083      	lsls	r3, r0
    3ba6:	4699      	mov	r9, r3
    3ba8:	0013      	movs	r3, r2
    3baa:	4648      	mov	r0, r9
    3bac:	40eb      	lsrs	r3, r5
    3bae:	4318      	orrs	r0, r3
    3bb0:	0003      	movs	r3, r0
    3bb2:	4650      	mov	r0, sl
    3bb4:	4082      	lsls	r2, r0
    3bb6:	1e50      	subs	r0, r2, #1
    3bb8:	4182      	sbcs	r2, r0
    3bba:	40e9      	lsrs	r1, r5
    3bbc:	431a      	orrs	r2, r3
    3bbe:	1aba      	subs	r2, r7, r2
    3bc0:	1a61      	subs	r1, r4, r1
    3bc2:	4297      	cmp	r7, r2
    3bc4:	41a4      	sbcs	r4, r4
    3bc6:	0017      	movs	r7, r2
    3bc8:	4264      	negs	r4, r4
    3bca:	1b0c      	subs	r4, r1, r4
    3bcc:	0223      	lsls	r3, r4, #8
    3bce:	d562      	bpl.n	3c96 <__aeabi_dadd+0x17a>
    3bd0:	0264      	lsls	r4, r4, #9
    3bd2:	0a65      	lsrs	r5, r4, #9
    3bd4:	2d00      	cmp	r5, #0
    3bd6:	d100      	bne.n	3bda <__aeabi_dadd+0xbe>
    3bd8:	e0df      	b.n	3d9a <__aeabi_dadd+0x27e>
    3bda:	0028      	movs	r0, r5
    3bdc:	f001 f8ba 	bl	4d54 <__clzsi2>
    3be0:	0003      	movs	r3, r0
    3be2:	3b08      	subs	r3, #8
    3be4:	2b1f      	cmp	r3, #31
    3be6:	dd00      	ble.n	3bea <__aeabi_dadd+0xce>
    3be8:	e0d2      	b.n	3d90 <__aeabi_dadd+0x274>
    3bea:	2220      	movs	r2, #32
    3bec:	003c      	movs	r4, r7
    3bee:	1ad2      	subs	r2, r2, r3
    3bf0:	409d      	lsls	r5, r3
    3bf2:	40d4      	lsrs	r4, r2
    3bf4:	409f      	lsls	r7, r3
    3bf6:	4325      	orrs	r5, r4
    3bf8:	429e      	cmp	r6, r3
    3bfa:	dd00      	ble.n	3bfe <__aeabi_dadd+0xe2>
    3bfc:	e0c4      	b.n	3d88 <__aeabi_dadd+0x26c>
    3bfe:	1b9e      	subs	r6, r3, r6
    3c00:	1c73      	adds	r3, r6, #1
    3c02:	2b1f      	cmp	r3, #31
    3c04:	dd00      	ble.n	3c08 <__aeabi_dadd+0xec>
    3c06:	e0f1      	b.n	3dec <__aeabi_dadd+0x2d0>
    3c08:	2220      	movs	r2, #32
    3c0a:	0038      	movs	r0, r7
    3c0c:	0029      	movs	r1, r5
    3c0e:	1ad2      	subs	r2, r2, r3
    3c10:	40d8      	lsrs	r0, r3
    3c12:	4091      	lsls	r1, r2
    3c14:	4097      	lsls	r7, r2
    3c16:	002c      	movs	r4, r5
    3c18:	4301      	orrs	r1, r0
    3c1a:	1e78      	subs	r0, r7, #1
    3c1c:	4187      	sbcs	r7, r0
    3c1e:	40dc      	lsrs	r4, r3
    3c20:	2600      	movs	r6, #0
    3c22:	430f      	orrs	r7, r1
    3c24:	077b      	lsls	r3, r7, #29
    3c26:	d009      	beq.n	3c3c <__aeabi_dadd+0x120>
    3c28:	230f      	movs	r3, #15
    3c2a:	403b      	ands	r3, r7
    3c2c:	2b04      	cmp	r3, #4
    3c2e:	d005      	beq.n	3c3c <__aeabi_dadd+0x120>
    3c30:	1d3b      	adds	r3, r7, #4
    3c32:	42bb      	cmp	r3, r7
    3c34:	41bf      	sbcs	r7, r7
    3c36:	427f      	negs	r7, r7
    3c38:	19e4      	adds	r4, r4, r7
    3c3a:	001f      	movs	r7, r3
    3c3c:	0223      	lsls	r3, r4, #8
    3c3e:	d52c      	bpl.n	3c9a <__aeabi_dadd+0x17e>
    3c40:	4b96      	ldr	r3, [pc, #600]	; (3e9c <__aeabi_dadd+0x380>)
    3c42:	3601      	adds	r6, #1
    3c44:	429e      	cmp	r6, r3
    3c46:	d100      	bne.n	3c4a <__aeabi_dadd+0x12e>
    3c48:	e09a      	b.n	3d80 <__aeabi_dadd+0x264>
    3c4a:	4645      	mov	r5, r8
    3c4c:	4b94      	ldr	r3, [pc, #592]	; (3ea0 <__aeabi_dadd+0x384>)
    3c4e:	08ff      	lsrs	r7, r7, #3
    3c50:	401c      	ands	r4, r3
    3c52:	0760      	lsls	r0, r4, #29
    3c54:	0576      	lsls	r6, r6, #21
    3c56:	0264      	lsls	r4, r4, #9
    3c58:	4307      	orrs	r7, r0
    3c5a:	0b24      	lsrs	r4, r4, #12
    3c5c:	0d76      	lsrs	r6, r6, #21
    3c5e:	2100      	movs	r1, #0
    3c60:	0324      	lsls	r4, r4, #12
    3c62:	0b23      	lsrs	r3, r4, #12
    3c64:	0d0c      	lsrs	r4, r1, #20
    3c66:	4a8f      	ldr	r2, [pc, #572]	; (3ea4 <__aeabi_dadd+0x388>)
    3c68:	0524      	lsls	r4, r4, #20
    3c6a:	431c      	orrs	r4, r3
    3c6c:	4014      	ands	r4, r2
    3c6e:	0533      	lsls	r3, r6, #20
    3c70:	4323      	orrs	r3, r4
    3c72:	005b      	lsls	r3, r3, #1
    3c74:	07ed      	lsls	r5, r5, #31
    3c76:	085b      	lsrs	r3, r3, #1
    3c78:	432b      	orrs	r3, r5
    3c7a:	0038      	movs	r0, r7
    3c7c:	0019      	movs	r1, r3
    3c7e:	bc3c      	pop	{r2, r3, r4, r5}
    3c80:	4690      	mov	r8, r2
    3c82:	4699      	mov	r9, r3
    3c84:	46a2      	mov	sl, r4
    3c86:	46ab      	mov	fp, r5
    3c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c8a:	4664      	mov	r4, ip
    3c8c:	4304      	orrs	r4, r0
    3c8e:	d100      	bne.n	3c92 <__aeabi_dadd+0x176>
    3c90:	e211      	b.n	40b6 <__aeabi_dadd+0x59a>
    3c92:	0004      	movs	r4, r0
    3c94:	4667      	mov	r7, ip
    3c96:	077b      	lsls	r3, r7, #29
    3c98:	d1c6      	bne.n	3c28 <__aeabi_dadd+0x10c>
    3c9a:	4645      	mov	r5, r8
    3c9c:	0760      	lsls	r0, r4, #29
    3c9e:	08ff      	lsrs	r7, r7, #3
    3ca0:	4307      	orrs	r7, r0
    3ca2:	08e4      	lsrs	r4, r4, #3
    3ca4:	4b7d      	ldr	r3, [pc, #500]	; (3e9c <__aeabi_dadd+0x380>)
    3ca6:	429e      	cmp	r6, r3
    3ca8:	d030      	beq.n	3d0c <__aeabi_dadd+0x1f0>
    3caa:	0324      	lsls	r4, r4, #12
    3cac:	0576      	lsls	r6, r6, #21
    3cae:	0b24      	lsrs	r4, r4, #12
    3cb0:	0d76      	lsrs	r6, r6, #21
    3cb2:	e7d4      	b.n	3c5e <__aeabi_dadd+0x142>
    3cb4:	1a33      	subs	r3, r6, r0
    3cb6:	469a      	mov	sl, r3
    3cb8:	2b00      	cmp	r3, #0
    3cba:	dd78      	ble.n	3dae <__aeabi_dadd+0x292>
    3cbc:	2800      	cmp	r0, #0
    3cbe:	d031      	beq.n	3d24 <__aeabi_dadd+0x208>
    3cc0:	4876      	ldr	r0, [pc, #472]	; (3e9c <__aeabi_dadd+0x380>)
    3cc2:	4286      	cmp	r6, r0
    3cc4:	d0ae      	beq.n	3c24 <__aeabi_dadd+0x108>
    3cc6:	2080      	movs	r0, #128	; 0x80
    3cc8:	0400      	lsls	r0, r0, #16
    3cca:	4301      	orrs	r1, r0
    3ccc:	4653      	mov	r3, sl
    3cce:	2b38      	cmp	r3, #56	; 0x38
    3cd0:	dc00      	bgt.n	3cd4 <__aeabi_dadd+0x1b8>
    3cd2:	e0e9      	b.n	3ea8 <__aeabi_dadd+0x38c>
    3cd4:	430a      	orrs	r2, r1
    3cd6:	1e51      	subs	r1, r2, #1
    3cd8:	418a      	sbcs	r2, r1
    3cda:	2100      	movs	r1, #0
    3cdc:	19d2      	adds	r2, r2, r7
    3cde:	42ba      	cmp	r2, r7
    3ce0:	41bf      	sbcs	r7, r7
    3ce2:	1909      	adds	r1, r1, r4
    3ce4:	427c      	negs	r4, r7
    3ce6:	0017      	movs	r7, r2
    3ce8:	190c      	adds	r4, r1, r4
    3cea:	0223      	lsls	r3, r4, #8
    3cec:	d5d3      	bpl.n	3c96 <__aeabi_dadd+0x17a>
    3cee:	4b6b      	ldr	r3, [pc, #428]	; (3e9c <__aeabi_dadd+0x380>)
    3cf0:	3601      	adds	r6, #1
    3cf2:	429e      	cmp	r6, r3
    3cf4:	d100      	bne.n	3cf8 <__aeabi_dadd+0x1dc>
    3cf6:	e13a      	b.n	3f6e <__aeabi_dadd+0x452>
    3cf8:	2001      	movs	r0, #1
    3cfa:	4b69      	ldr	r3, [pc, #420]	; (3ea0 <__aeabi_dadd+0x384>)
    3cfc:	401c      	ands	r4, r3
    3cfe:	087b      	lsrs	r3, r7, #1
    3d00:	4007      	ands	r7, r0
    3d02:	431f      	orrs	r7, r3
    3d04:	07e0      	lsls	r0, r4, #31
    3d06:	4307      	orrs	r7, r0
    3d08:	0864      	lsrs	r4, r4, #1
    3d0a:	e78b      	b.n	3c24 <__aeabi_dadd+0x108>
    3d0c:	0023      	movs	r3, r4
    3d0e:	433b      	orrs	r3, r7
    3d10:	d100      	bne.n	3d14 <__aeabi_dadd+0x1f8>
    3d12:	e1cb      	b.n	40ac <__aeabi_dadd+0x590>
    3d14:	2280      	movs	r2, #128	; 0x80
    3d16:	0312      	lsls	r2, r2, #12
    3d18:	4314      	orrs	r4, r2
    3d1a:	0324      	lsls	r4, r4, #12
    3d1c:	0b24      	lsrs	r4, r4, #12
    3d1e:	e79e      	b.n	3c5e <__aeabi_dadd+0x142>
    3d20:	002e      	movs	r6, r5
    3d22:	e77f      	b.n	3c24 <__aeabi_dadd+0x108>
    3d24:	0008      	movs	r0, r1
    3d26:	4310      	orrs	r0, r2
    3d28:	d100      	bne.n	3d2c <__aeabi_dadd+0x210>
    3d2a:	e0b4      	b.n	3e96 <__aeabi_dadd+0x37a>
    3d2c:	1e58      	subs	r0, r3, #1
    3d2e:	2800      	cmp	r0, #0
    3d30:	d000      	beq.n	3d34 <__aeabi_dadd+0x218>
    3d32:	e0de      	b.n	3ef2 <__aeabi_dadd+0x3d6>
    3d34:	18ba      	adds	r2, r7, r2
    3d36:	42ba      	cmp	r2, r7
    3d38:	419b      	sbcs	r3, r3
    3d3a:	1864      	adds	r4, r4, r1
    3d3c:	425b      	negs	r3, r3
    3d3e:	18e4      	adds	r4, r4, r3
    3d40:	0017      	movs	r7, r2
    3d42:	2601      	movs	r6, #1
    3d44:	0223      	lsls	r3, r4, #8
    3d46:	d5a6      	bpl.n	3c96 <__aeabi_dadd+0x17a>
    3d48:	2602      	movs	r6, #2
    3d4a:	e7d5      	b.n	3cf8 <__aeabi_dadd+0x1dc>
    3d4c:	2d00      	cmp	r5, #0
    3d4e:	d16e      	bne.n	3e2e <__aeabi_dadd+0x312>
    3d50:	1c70      	adds	r0, r6, #1
    3d52:	0540      	lsls	r0, r0, #21
    3d54:	0d40      	lsrs	r0, r0, #21
    3d56:	2801      	cmp	r0, #1
    3d58:	dc00      	bgt.n	3d5c <__aeabi_dadd+0x240>
    3d5a:	e0f9      	b.n	3f50 <__aeabi_dadd+0x434>
    3d5c:	1ab8      	subs	r0, r7, r2
    3d5e:	4684      	mov	ip, r0
    3d60:	4287      	cmp	r7, r0
    3d62:	4180      	sbcs	r0, r0
    3d64:	1ae5      	subs	r5, r4, r3
    3d66:	4240      	negs	r0, r0
    3d68:	1a2d      	subs	r5, r5, r0
    3d6a:	0228      	lsls	r0, r5, #8
    3d6c:	d400      	bmi.n	3d70 <__aeabi_dadd+0x254>
    3d6e:	e089      	b.n	3e84 <__aeabi_dadd+0x368>
    3d70:	1bd7      	subs	r7, r2, r7
    3d72:	42ba      	cmp	r2, r7
    3d74:	4192      	sbcs	r2, r2
    3d76:	1b1c      	subs	r4, r3, r4
    3d78:	4252      	negs	r2, r2
    3d7a:	1aa5      	subs	r5, r4, r2
    3d7c:	46d8      	mov	r8, fp
    3d7e:	e729      	b.n	3bd4 <__aeabi_dadd+0xb8>
    3d80:	4645      	mov	r5, r8
    3d82:	2400      	movs	r4, #0
    3d84:	2700      	movs	r7, #0
    3d86:	e76a      	b.n	3c5e <__aeabi_dadd+0x142>
    3d88:	4c45      	ldr	r4, [pc, #276]	; (3ea0 <__aeabi_dadd+0x384>)
    3d8a:	1af6      	subs	r6, r6, r3
    3d8c:	402c      	ands	r4, r5
    3d8e:	e749      	b.n	3c24 <__aeabi_dadd+0x108>
    3d90:	003d      	movs	r5, r7
    3d92:	3828      	subs	r0, #40	; 0x28
    3d94:	4085      	lsls	r5, r0
    3d96:	2700      	movs	r7, #0
    3d98:	e72e      	b.n	3bf8 <__aeabi_dadd+0xdc>
    3d9a:	0038      	movs	r0, r7
    3d9c:	f000 ffda 	bl	4d54 <__clzsi2>
    3da0:	3020      	adds	r0, #32
    3da2:	e71d      	b.n	3be0 <__aeabi_dadd+0xc4>
    3da4:	430a      	orrs	r2, r1
    3da6:	1e51      	subs	r1, r2, #1
    3da8:	418a      	sbcs	r2, r1
    3daa:	2100      	movs	r1, #0
    3dac:	e707      	b.n	3bbe <__aeabi_dadd+0xa2>
    3dae:	2b00      	cmp	r3, #0
    3db0:	d000      	beq.n	3db4 <__aeabi_dadd+0x298>
    3db2:	e0f3      	b.n	3f9c <__aeabi_dadd+0x480>
    3db4:	1c70      	adds	r0, r6, #1
    3db6:	0543      	lsls	r3, r0, #21
    3db8:	0d5b      	lsrs	r3, r3, #21
    3dba:	2b01      	cmp	r3, #1
    3dbc:	dc00      	bgt.n	3dc0 <__aeabi_dadd+0x2a4>
    3dbe:	e0ad      	b.n	3f1c <__aeabi_dadd+0x400>
    3dc0:	4b36      	ldr	r3, [pc, #216]	; (3e9c <__aeabi_dadd+0x380>)
    3dc2:	4298      	cmp	r0, r3
    3dc4:	d100      	bne.n	3dc8 <__aeabi_dadd+0x2ac>
    3dc6:	e0d1      	b.n	3f6c <__aeabi_dadd+0x450>
    3dc8:	18ba      	adds	r2, r7, r2
    3dca:	42ba      	cmp	r2, r7
    3dcc:	41bf      	sbcs	r7, r7
    3dce:	1864      	adds	r4, r4, r1
    3dd0:	427f      	negs	r7, r7
    3dd2:	19e4      	adds	r4, r4, r7
    3dd4:	07e7      	lsls	r7, r4, #31
    3dd6:	0852      	lsrs	r2, r2, #1
    3dd8:	4317      	orrs	r7, r2
    3dda:	0864      	lsrs	r4, r4, #1
    3ddc:	0006      	movs	r6, r0
    3dde:	e721      	b.n	3c24 <__aeabi_dadd+0x108>
    3de0:	482e      	ldr	r0, [pc, #184]	; (3e9c <__aeabi_dadd+0x380>)
    3de2:	4285      	cmp	r5, r0
    3de4:	d100      	bne.n	3de8 <__aeabi_dadd+0x2cc>
    3de6:	e093      	b.n	3f10 <__aeabi_dadd+0x3f4>
    3de8:	001d      	movs	r5, r3
    3dea:	e6d0      	b.n	3b8e <__aeabi_dadd+0x72>
    3dec:	0029      	movs	r1, r5
    3dee:	3e1f      	subs	r6, #31
    3df0:	40f1      	lsrs	r1, r6
    3df2:	2b20      	cmp	r3, #32
    3df4:	d100      	bne.n	3df8 <__aeabi_dadd+0x2dc>
    3df6:	e08d      	b.n	3f14 <__aeabi_dadd+0x3f8>
    3df8:	2240      	movs	r2, #64	; 0x40
    3dfa:	1ad3      	subs	r3, r2, r3
    3dfc:	409d      	lsls	r5, r3
    3dfe:	432f      	orrs	r7, r5
    3e00:	1e7d      	subs	r5, r7, #1
    3e02:	41af      	sbcs	r7, r5
    3e04:	2400      	movs	r4, #0
    3e06:	430f      	orrs	r7, r1
    3e08:	2600      	movs	r6, #0
    3e0a:	e744      	b.n	3c96 <__aeabi_dadd+0x17a>
    3e0c:	002b      	movs	r3, r5
    3e0e:	0008      	movs	r0, r1
    3e10:	3b20      	subs	r3, #32
    3e12:	40d8      	lsrs	r0, r3
    3e14:	0003      	movs	r3, r0
    3e16:	2d20      	cmp	r5, #32
    3e18:	d100      	bne.n	3e1c <__aeabi_dadd+0x300>
    3e1a:	e07d      	b.n	3f18 <__aeabi_dadd+0x3fc>
    3e1c:	2040      	movs	r0, #64	; 0x40
    3e1e:	1b45      	subs	r5, r0, r5
    3e20:	40a9      	lsls	r1, r5
    3e22:	430a      	orrs	r2, r1
    3e24:	1e51      	subs	r1, r2, #1
    3e26:	418a      	sbcs	r2, r1
    3e28:	2100      	movs	r1, #0
    3e2a:	431a      	orrs	r2, r3
    3e2c:	e6c7      	b.n	3bbe <__aeabi_dadd+0xa2>
    3e2e:	2e00      	cmp	r6, #0
    3e30:	d050      	beq.n	3ed4 <__aeabi_dadd+0x3b8>
    3e32:	4e1a      	ldr	r6, [pc, #104]	; (3e9c <__aeabi_dadd+0x380>)
    3e34:	42b0      	cmp	r0, r6
    3e36:	d057      	beq.n	3ee8 <__aeabi_dadd+0x3cc>
    3e38:	2680      	movs	r6, #128	; 0x80
    3e3a:	426b      	negs	r3, r5
    3e3c:	4699      	mov	r9, r3
    3e3e:	0436      	lsls	r6, r6, #16
    3e40:	4334      	orrs	r4, r6
    3e42:	464b      	mov	r3, r9
    3e44:	2b38      	cmp	r3, #56	; 0x38
    3e46:	dd00      	ble.n	3e4a <__aeabi_dadd+0x32e>
    3e48:	e0d6      	b.n	3ff8 <__aeabi_dadd+0x4dc>
    3e4a:	2b1f      	cmp	r3, #31
    3e4c:	dd00      	ble.n	3e50 <__aeabi_dadd+0x334>
    3e4e:	e135      	b.n	40bc <__aeabi_dadd+0x5a0>
    3e50:	2620      	movs	r6, #32
    3e52:	1af5      	subs	r5, r6, r3
    3e54:	0026      	movs	r6, r4
    3e56:	40ae      	lsls	r6, r5
    3e58:	46b2      	mov	sl, r6
    3e5a:	003e      	movs	r6, r7
    3e5c:	40de      	lsrs	r6, r3
    3e5e:	46ac      	mov	ip, r5
    3e60:	0035      	movs	r5, r6
    3e62:	4656      	mov	r6, sl
    3e64:	432e      	orrs	r6, r5
    3e66:	4665      	mov	r5, ip
    3e68:	40af      	lsls	r7, r5
    3e6a:	1e7d      	subs	r5, r7, #1
    3e6c:	41af      	sbcs	r7, r5
    3e6e:	40dc      	lsrs	r4, r3
    3e70:	4337      	orrs	r7, r6
    3e72:	1bd7      	subs	r7, r2, r7
    3e74:	42ba      	cmp	r2, r7
    3e76:	4192      	sbcs	r2, r2
    3e78:	1b0c      	subs	r4, r1, r4
    3e7a:	4252      	negs	r2, r2
    3e7c:	1aa4      	subs	r4, r4, r2
    3e7e:	0006      	movs	r6, r0
    3e80:	46d8      	mov	r8, fp
    3e82:	e6a3      	b.n	3bcc <__aeabi_dadd+0xb0>
    3e84:	4664      	mov	r4, ip
    3e86:	4667      	mov	r7, ip
    3e88:	432c      	orrs	r4, r5
    3e8a:	d000      	beq.n	3e8e <__aeabi_dadd+0x372>
    3e8c:	e6a2      	b.n	3bd4 <__aeabi_dadd+0xb8>
    3e8e:	2500      	movs	r5, #0
    3e90:	2600      	movs	r6, #0
    3e92:	2700      	movs	r7, #0
    3e94:	e706      	b.n	3ca4 <__aeabi_dadd+0x188>
    3e96:	001e      	movs	r6, r3
    3e98:	e6c4      	b.n	3c24 <__aeabi_dadd+0x108>
    3e9a:	46c0      	nop			; (mov r8, r8)
    3e9c:	000007ff 	.word	0x000007ff
    3ea0:	ff7fffff 	.word	0xff7fffff
    3ea4:	800fffff 	.word	0x800fffff
    3ea8:	2b1f      	cmp	r3, #31
    3eaa:	dc63      	bgt.n	3f74 <__aeabi_dadd+0x458>
    3eac:	2020      	movs	r0, #32
    3eae:	1ac3      	subs	r3, r0, r3
    3eb0:	0008      	movs	r0, r1
    3eb2:	4098      	lsls	r0, r3
    3eb4:	469c      	mov	ip, r3
    3eb6:	4683      	mov	fp, r0
    3eb8:	4653      	mov	r3, sl
    3eba:	0010      	movs	r0, r2
    3ebc:	40d8      	lsrs	r0, r3
    3ebe:	0003      	movs	r3, r0
    3ec0:	4658      	mov	r0, fp
    3ec2:	4318      	orrs	r0, r3
    3ec4:	4663      	mov	r3, ip
    3ec6:	409a      	lsls	r2, r3
    3ec8:	1e53      	subs	r3, r2, #1
    3eca:	419a      	sbcs	r2, r3
    3ecc:	4653      	mov	r3, sl
    3ece:	4302      	orrs	r2, r0
    3ed0:	40d9      	lsrs	r1, r3
    3ed2:	e703      	b.n	3cdc <__aeabi_dadd+0x1c0>
    3ed4:	0026      	movs	r6, r4
    3ed6:	433e      	orrs	r6, r7
    3ed8:	d006      	beq.n	3ee8 <__aeabi_dadd+0x3cc>
    3eda:	43eb      	mvns	r3, r5
    3edc:	4699      	mov	r9, r3
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d0c7      	beq.n	3e72 <__aeabi_dadd+0x356>
    3ee2:	4e94      	ldr	r6, [pc, #592]	; (4134 <__aeabi_dadd+0x618>)
    3ee4:	42b0      	cmp	r0, r6
    3ee6:	d1ac      	bne.n	3e42 <__aeabi_dadd+0x326>
    3ee8:	000c      	movs	r4, r1
    3eea:	0017      	movs	r7, r2
    3eec:	0006      	movs	r6, r0
    3eee:	46d8      	mov	r8, fp
    3ef0:	e698      	b.n	3c24 <__aeabi_dadd+0x108>
    3ef2:	4b90      	ldr	r3, [pc, #576]	; (4134 <__aeabi_dadd+0x618>)
    3ef4:	459a      	cmp	sl, r3
    3ef6:	d00b      	beq.n	3f10 <__aeabi_dadd+0x3f4>
    3ef8:	4682      	mov	sl, r0
    3efa:	e6e7      	b.n	3ccc <__aeabi_dadd+0x1b0>
    3efc:	2800      	cmp	r0, #0
    3efe:	d000      	beq.n	3f02 <__aeabi_dadd+0x3e6>
    3f00:	e09e      	b.n	4040 <__aeabi_dadd+0x524>
    3f02:	0018      	movs	r0, r3
    3f04:	4310      	orrs	r0, r2
    3f06:	d100      	bne.n	3f0a <__aeabi_dadd+0x3ee>
    3f08:	e0e9      	b.n	40de <__aeabi_dadd+0x5c2>
    3f0a:	001c      	movs	r4, r3
    3f0c:	0017      	movs	r7, r2
    3f0e:	46d8      	mov	r8, fp
    3f10:	4e88      	ldr	r6, [pc, #544]	; (4134 <__aeabi_dadd+0x618>)
    3f12:	e687      	b.n	3c24 <__aeabi_dadd+0x108>
    3f14:	2500      	movs	r5, #0
    3f16:	e772      	b.n	3dfe <__aeabi_dadd+0x2e2>
    3f18:	2100      	movs	r1, #0
    3f1a:	e782      	b.n	3e22 <__aeabi_dadd+0x306>
    3f1c:	0023      	movs	r3, r4
    3f1e:	433b      	orrs	r3, r7
    3f20:	2e00      	cmp	r6, #0
    3f22:	d000      	beq.n	3f26 <__aeabi_dadd+0x40a>
    3f24:	e0ab      	b.n	407e <__aeabi_dadd+0x562>
    3f26:	2b00      	cmp	r3, #0
    3f28:	d100      	bne.n	3f2c <__aeabi_dadd+0x410>
    3f2a:	e0e7      	b.n	40fc <__aeabi_dadd+0x5e0>
    3f2c:	000b      	movs	r3, r1
    3f2e:	4313      	orrs	r3, r2
    3f30:	d100      	bne.n	3f34 <__aeabi_dadd+0x418>
    3f32:	e677      	b.n	3c24 <__aeabi_dadd+0x108>
    3f34:	18ba      	adds	r2, r7, r2
    3f36:	42ba      	cmp	r2, r7
    3f38:	41bf      	sbcs	r7, r7
    3f3a:	1864      	adds	r4, r4, r1
    3f3c:	427f      	negs	r7, r7
    3f3e:	19e4      	adds	r4, r4, r7
    3f40:	0223      	lsls	r3, r4, #8
    3f42:	d400      	bmi.n	3f46 <__aeabi_dadd+0x42a>
    3f44:	e0f2      	b.n	412c <__aeabi_dadd+0x610>
    3f46:	4b7c      	ldr	r3, [pc, #496]	; (4138 <__aeabi_dadd+0x61c>)
    3f48:	0017      	movs	r7, r2
    3f4a:	401c      	ands	r4, r3
    3f4c:	0006      	movs	r6, r0
    3f4e:	e669      	b.n	3c24 <__aeabi_dadd+0x108>
    3f50:	0020      	movs	r0, r4
    3f52:	4338      	orrs	r0, r7
    3f54:	2e00      	cmp	r6, #0
    3f56:	d1d1      	bne.n	3efc <__aeabi_dadd+0x3e0>
    3f58:	2800      	cmp	r0, #0
    3f5a:	d15b      	bne.n	4014 <__aeabi_dadd+0x4f8>
    3f5c:	001c      	movs	r4, r3
    3f5e:	4314      	orrs	r4, r2
    3f60:	d100      	bne.n	3f64 <__aeabi_dadd+0x448>
    3f62:	e0a8      	b.n	40b6 <__aeabi_dadd+0x59a>
    3f64:	001c      	movs	r4, r3
    3f66:	0017      	movs	r7, r2
    3f68:	46d8      	mov	r8, fp
    3f6a:	e65b      	b.n	3c24 <__aeabi_dadd+0x108>
    3f6c:	0006      	movs	r6, r0
    3f6e:	2400      	movs	r4, #0
    3f70:	2700      	movs	r7, #0
    3f72:	e697      	b.n	3ca4 <__aeabi_dadd+0x188>
    3f74:	4650      	mov	r0, sl
    3f76:	000b      	movs	r3, r1
    3f78:	3820      	subs	r0, #32
    3f7a:	40c3      	lsrs	r3, r0
    3f7c:	4699      	mov	r9, r3
    3f7e:	4653      	mov	r3, sl
    3f80:	2b20      	cmp	r3, #32
    3f82:	d100      	bne.n	3f86 <__aeabi_dadd+0x46a>
    3f84:	e095      	b.n	40b2 <__aeabi_dadd+0x596>
    3f86:	2340      	movs	r3, #64	; 0x40
    3f88:	4650      	mov	r0, sl
    3f8a:	1a1b      	subs	r3, r3, r0
    3f8c:	4099      	lsls	r1, r3
    3f8e:	430a      	orrs	r2, r1
    3f90:	1e51      	subs	r1, r2, #1
    3f92:	418a      	sbcs	r2, r1
    3f94:	464b      	mov	r3, r9
    3f96:	2100      	movs	r1, #0
    3f98:	431a      	orrs	r2, r3
    3f9a:	e69f      	b.n	3cdc <__aeabi_dadd+0x1c0>
    3f9c:	2e00      	cmp	r6, #0
    3f9e:	d130      	bne.n	4002 <__aeabi_dadd+0x4e6>
    3fa0:	0026      	movs	r6, r4
    3fa2:	433e      	orrs	r6, r7
    3fa4:	d067      	beq.n	4076 <__aeabi_dadd+0x55a>
    3fa6:	43db      	mvns	r3, r3
    3fa8:	469a      	mov	sl, r3
    3faa:	2b00      	cmp	r3, #0
    3fac:	d01c      	beq.n	3fe8 <__aeabi_dadd+0x4cc>
    3fae:	4e61      	ldr	r6, [pc, #388]	; (4134 <__aeabi_dadd+0x618>)
    3fb0:	42b0      	cmp	r0, r6
    3fb2:	d060      	beq.n	4076 <__aeabi_dadd+0x55a>
    3fb4:	4653      	mov	r3, sl
    3fb6:	2b38      	cmp	r3, #56	; 0x38
    3fb8:	dd00      	ble.n	3fbc <__aeabi_dadd+0x4a0>
    3fba:	e096      	b.n	40ea <__aeabi_dadd+0x5ce>
    3fbc:	2b1f      	cmp	r3, #31
    3fbe:	dd00      	ble.n	3fc2 <__aeabi_dadd+0x4a6>
    3fc0:	e09f      	b.n	4102 <__aeabi_dadd+0x5e6>
    3fc2:	2620      	movs	r6, #32
    3fc4:	1af3      	subs	r3, r6, r3
    3fc6:	0026      	movs	r6, r4
    3fc8:	409e      	lsls	r6, r3
    3fca:	469c      	mov	ip, r3
    3fcc:	46b3      	mov	fp, r6
    3fce:	4653      	mov	r3, sl
    3fd0:	003e      	movs	r6, r7
    3fd2:	40de      	lsrs	r6, r3
    3fd4:	0033      	movs	r3, r6
    3fd6:	465e      	mov	r6, fp
    3fd8:	431e      	orrs	r6, r3
    3fda:	4663      	mov	r3, ip
    3fdc:	409f      	lsls	r7, r3
    3fde:	1e7b      	subs	r3, r7, #1
    3fe0:	419f      	sbcs	r7, r3
    3fe2:	4653      	mov	r3, sl
    3fe4:	40dc      	lsrs	r4, r3
    3fe6:	4337      	orrs	r7, r6
    3fe8:	18bf      	adds	r7, r7, r2
    3fea:	4297      	cmp	r7, r2
    3fec:	4192      	sbcs	r2, r2
    3fee:	1864      	adds	r4, r4, r1
    3ff0:	4252      	negs	r2, r2
    3ff2:	18a4      	adds	r4, r4, r2
    3ff4:	0006      	movs	r6, r0
    3ff6:	e678      	b.n	3cea <__aeabi_dadd+0x1ce>
    3ff8:	4327      	orrs	r7, r4
    3ffa:	1e7c      	subs	r4, r7, #1
    3ffc:	41a7      	sbcs	r7, r4
    3ffe:	2400      	movs	r4, #0
    4000:	e737      	b.n	3e72 <__aeabi_dadd+0x356>
    4002:	4e4c      	ldr	r6, [pc, #304]	; (4134 <__aeabi_dadd+0x618>)
    4004:	42b0      	cmp	r0, r6
    4006:	d036      	beq.n	4076 <__aeabi_dadd+0x55a>
    4008:	2680      	movs	r6, #128	; 0x80
    400a:	425b      	negs	r3, r3
    400c:	0436      	lsls	r6, r6, #16
    400e:	469a      	mov	sl, r3
    4010:	4334      	orrs	r4, r6
    4012:	e7cf      	b.n	3fb4 <__aeabi_dadd+0x498>
    4014:	0018      	movs	r0, r3
    4016:	4310      	orrs	r0, r2
    4018:	d100      	bne.n	401c <__aeabi_dadd+0x500>
    401a:	e603      	b.n	3c24 <__aeabi_dadd+0x108>
    401c:	1ab8      	subs	r0, r7, r2
    401e:	4684      	mov	ip, r0
    4020:	4567      	cmp	r7, ip
    4022:	41ad      	sbcs	r5, r5
    4024:	1ae0      	subs	r0, r4, r3
    4026:	426d      	negs	r5, r5
    4028:	1b40      	subs	r0, r0, r5
    402a:	0205      	lsls	r5, r0, #8
    402c:	d400      	bmi.n	4030 <__aeabi_dadd+0x514>
    402e:	e62c      	b.n	3c8a <__aeabi_dadd+0x16e>
    4030:	1bd7      	subs	r7, r2, r7
    4032:	42ba      	cmp	r2, r7
    4034:	4192      	sbcs	r2, r2
    4036:	1b1c      	subs	r4, r3, r4
    4038:	4252      	negs	r2, r2
    403a:	1aa4      	subs	r4, r4, r2
    403c:	46d8      	mov	r8, fp
    403e:	e5f1      	b.n	3c24 <__aeabi_dadd+0x108>
    4040:	0018      	movs	r0, r3
    4042:	4310      	orrs	r0, r2
    4044:	d100      	bne.n	4048 <__aeabi_dadd+0x52c>
    4046:	e763      	b.n	3f10 <__aeabi_dadd+0x3f4>
    4048:	08f8      	lsrs	r0, r7, #3
    404a:	0767      	lsls	r7, r4, #29
    404c:	4307      	orrs	r7, r0
    404e:	2080      	movs	r0, #128	; 0x80
    4050:	08e4      	lsrs	r4, r4, #3
    4052:	0300      	lsls	r0, r0, #12
    4054:	4204      	tst	r4, r0
    4056:	d008      	beq.n	406a <__aeabi_dadd+0x54e>
    4058:	08dd      	lsrs	r5, r3, #3
    405a:	4205      	tst	r5, r0
    405c:	d105      	bne.n	406a <__aeabi_dadd+0x54e>
    405e:	08d2      	lsrs	r2, r2, #3
    4060:	0759      	lsls	r1, r3, #29
    4062:	4311      	orrs	r1, r2
    4064:	000f      	movs	r7, r1
    4066:	002c      	movs	r4, r5
    4068:	46d8      	mov	r8, fp
    406a:	0f7b      	lsrs	r3, r7, #29
    406c:	00e4      	lsls	r4, r4, #3
    406e:	431c      	orrs	r4, r3
    4070:	00ff      	lsls	r7, r7, #3
    4072:	4e30      	ldr	r6, [pc, #192]	; (4134 <__aeabi_dadd+0x618>)
    4074:	e5d6      	b.n	3c24 <__aeabi_dadd+0x108>
    4076:	000c      	movs	r4, r1
    4078:	0017      	movs	r7, r2
    407a:	0006      	movs	r6, r0
    407c:	e5d2      	b.n	3c24 <__aeabi_dadd+0x108>
    407e:	2b00      	cmp	r3, #0
    4080:	d038      	beq.n	40f4 <__aeabi_dadd+0x5d8>
    4082:	000b      	movs	r3, r1
    4084:	4313      	orrs	r3, r2
    4086:	d100      	bne.n	408a <__aeabi_dadd+0x56e>
    4088:	e742      	b.n	3f10 <__aeabi_dadd+0x3f4>
    408a:	08f8      	lsrs	r0, r7, #3
    408c:	0767      	lsls	r7, r4, #29
    408e:	4307      	orrs	r7, r0
    4090:	2080      	movs	r0, #128	; 0x80
    4092:	08e4      	lsrs	r4, r4, #3
    4094:	0300      	lsls	r0, r0, #12
    4096:	4204      	tst	r4, r0
    4098:	d0e7      	beq.n	406a <__aeabi_dadd+0x54e>
    409a:	08cb      	lsrs	r3, r1, #3
    409c:	4203      	tst	r3, r0
    409e:	d1e4      	bne.n	406a <__aeabi_dadd+0x54e>
    40a0:	08d2      	lsrs	r2, r2, #3
    40a2:	0749      	lsls	r1, r1, #29
    40a4:	4311      	orrs	r1, r2
    40a6:	000f      	movs	r7, r1
    40a8:	001c      	movs	r4, r3
    40aa:	e7de      	b.n	406a <__aeabi_dadd+0x54e>
    40ac:	2700      	movs	r7, #0
    40ae:	2400      	movs	r4, #0
    40b0:	e5d5      	b.n	3c5e <__aeabi_dadd+0x142>
    40b2:	2100      	movs	r1, #0
    40b4:	e76b      	b.n	3f8e <__aeabi_dadd+0x472>
    40b6:	2500      	movs	r5, #0
    40b8:	2700      	movs	r7, #0
    40ba:	e5f3      	b.n	3ca4 <__aeabi_dadd+0x188>
    40bc:	464e      	mov	r6, r9
    40be:	0025      	movs	r5, r4
    40c0:	3e20      	subs	r6, #32
    40c2:	40f5      	lsrs	r5, r6
    40c4:	464b      	mov	r3, r9
    40c6:	002e      	movs	r6, r5
    40c8:	2b20      	cmp	r3, #32
    40ca:	d02d      	beq.n	4128 <__aeabi_dadd+0x60c>
    40cc:	2540      	movs	r5, #64	; 0x40
    40ce:	1aed      	subs	r5, r5, r3
    40d0:	40ac      	lsls	r4, r5
    40d2:	4327      	orrs	r7, r4
    40d4:	1e7c      	subs	r4, r7, #1
    40d6:	41a7      	sbcs	r7, r4
    40d8:	2400      	movs	r4, #0
    40da:	4337      	orrs	r7, r6
    40dc:	e6c9      	b.n	3e72 <__aeabi_dadd+0x356>
    40de:	2480      	movs	r4, #128	; 0x80
    40e0:	2500      	movs	r5, #0
    40e2:	0324      	lsls	r4, r4, #12
    40e4:	4e13      	ldr	r6, [pc, #76]	; (4134 <__aeabi_dadd+0x618>)
    40e6:	2700      	movs	r7, #0
    40e8:	e5dc      	b.n	3ca4 <__aeabi_dadd+0x188>
    40ea:	4327      	orrs	r7, r4
    40ec:	1e7c      	subs	r4, r7, #1
    40ee:	41a7      	sbcs	r7, r4
    40f0:	2400      	movs	r4, #0
    40f2:	e779      	b.n	3fe8 <__aeabi_dadd+0x4cc>
    40f4:	000c      	movs	r4, r1
    40f6:	0017      	movs	r7, r2
    40f8:	4e0e      	ldr	r6, [pc, #56]	; (4134 <__aeabi_dadd+0x618>)
    40fa:	e593      	b.n	3c24 <__aeabi_dadd+0x108>
    40fc:	000c      	movs	r4, r1
    40fe:	0017      	movs	r7, r2
    4100:	e590      	b.n	3c24 <__aeabi_dadd+0x108>
    4102:	4656      	mov	r6, sl
    4104:	0023      	movs	r3, r4
    4106:	3e20      	subs	r6, #32
    4108:	40f3      	lsrs	r3, r6
    410a:	4699      	mov	r9, r3
    410c:	4653      	mov	r3, sl
    410e:	2b20      	cmp	r3, #32
    4110:	d00e      	beq.n	4130 <__aeabi_dadd+0x614>
    4112:	2340      	movs	r3, #64	; 0x40
    4114:	4656      	mov	r6, sl
    4116:	1b9b      	subs	r3, r3, r6
    4118:	409c      	lsls	r4, r3
    411a:	4327      	orrs	r7, r4
    411c:	1e7c      	subs	r4, r7, #1
    411e:	41a7      	sbcs	r7, r4
    4120:	464b      	mov	r3, r9
    4122:	2400      	movs	r4, #0
    4124:	431f      	orrs	r7, r3
    4126:	e75f      	b.n	3fe8 <__aeabi_dadd+0x4cc>
    4128:	2400      	movs	r4, #0
    412a:	e7d2      	b.n	40d2 <__aeabi_dadd+0x5b6>
    412c:	0017      	movs	r7, r2
    412e:	e5b2      	b.n	3c96 <__aeabi_dadd+0x17a>
    4130:	2400      	movs	r4, #0
    4132:	e7f2      	b.n	411a <__aeabi_dadd+0x5fe>
    4134:	000007ff 	.word	0x000007ff
    4138:	ff7fffff 	.word	0xff7fffff

0000413c <__aeabi_dmul>:
    413c:	b5f0      	push	{r4, r5, r6, r7, lr}
    413e:	4657      	mov	r7, sl
    4140:	4645      	mov	r5, r8
    4142:	46de      	mov	lr, fp
    4144:	464e      	mov	r6, r9
    4146:	b5e0      	push	{r5, r6, r7, lr}
    4148:	030c      	lsls	r4, r1, #12
    414a:	4698      	mov	r8, r3
    414c:	004e      	lsls	r6, r1, #1
    414e:	0b23      	lsrs	r3, r4, #12
    4150:	b087      	sub	sp, #28
    4152:	0007      	movs	r7, r0
    4154:	4692      	mov	sl, r2
    4156:	469b      	mov	fp, r3
    4158:	0d76      	lsrs	r6, r6, #21
    415a:	0fcd      	lsrs	r5, r1, #31
    415c:	2e00      	cmp	r6, #0
    415e:	d06b      	beq.n	4238 <__aeabi_dmul+0xfc>
    4160:	4b6d      	ldr	r3, [pc, #436]	; (4318 <__aeabi_dmul+0x1dc>)
    4162:	429e      	cmp	r6, r3
    4164:	d035      	beq.n	41d2 <__aeabi_dmul+0x96>
    4166:	2480      	movs	r4, #128	; 0x80
    4168:	465b      	mov	r3, fp
    416a:	0f42      	lsrs	r2, r0, #29
    416c:	0424      	lsls	r4, r4, #16
    416e:	00db      	lsls	r3, r3, #3
    4170:	4314      	orrs	r4, r2
    4172:	431c      	orrs	r4, r3
    4174:	00c3      	lsls	r3, r0, #3
    4176:	4699      	mov	r9, r3
    4178:	4b68      	ldr	r3, [pc, #416]	; (431c <__aeabi_dmul+0x1e0>)
    417a:	46a3      	mov	fp, r4
    417c:	469c      	mov	ip, r3
    417e:	2300      	movs	r3, #0
    4180:	2700      	movs	r7, #0
    4182:	4466      	add	r6, ip
    4184:	9302      	str	r3, [sp, #8]
    4186:	4643      	mov	r3, r8
    4188:	031c      	lsls	r4, r3, #12
    418a:	005a      	lsls	r2, r3, #1
    418c:	0fdb      	lsrs	r3, r3, #31
    418e:	4650      	mov	r0, sl
    4190:	0b24      	lsrs	r4, r4, #12
    4192:	0d52      	lsrs	r2, r2, #21
    4194:	4698      	mov	r8, r3
    4196:	d100      	bne.n	419a <__aeabi_dmul+0x5e>
    4198:	e076      	b.n	4288 <__aeabi_dmul+0x14c>
    419a:	4b5f      	ldr	r3, [pc, #380]	; (4318 <__aeabi_dmul+0x1dc>)
    419c:	429a      	cmp	r2, r3
    419e:	d06d      	beq.n	427c <__aeabi_dmul+0x140>
    41a0:	2380      	movs	r3, #128	; 0x80
    41a2:	0f41      	lsrs	r1, r0, #29
    41a4:	041b      	lsls	r3, r3, #16
    41a6:	430b      	orrs	r3, r1
    41a8:	495c      	ldr	r1, [pc, #368]	; (431c <__aeabi_dmul+0x1e0>)
    41aa:	00e4      	lsls	r4, r4, #3
    41ac:	468c      	mov	ip, r1
    41ae:	431c      	orrs	r4, r3
    41b0:	00c3      	lsls	r3, r0, #3
    41b2:	2000      	movs	r0, #0
    41b4:	4462      	add	r2, ip
    41b6:	4641      	mov	r1, r8
    41b8:	18b6      	adds	r6, r6, r2
    41ba:	4069      	eors	r1, r5
    41bc:	1c72      	adds	r2, r6, #1
    41be:	9101      	str	r1, [sp, #4]
    41c0:	4694      	mov	ip, r2
    41c2:	4307      	orrs	r7, r0
    41c4:	2f0f      	cmp	r7, #15
    41c6:	d900      	bls.n	41ca <__aeabi_dmul+0x8e>
    41c8:	e0b0      	b.n	432c <__aeabi_dmul+0x1f0>
    41ca:	4a55      	ldr	r2, [pc, #340]	; (4320 <__aeabi_dmul+0x1e4>)
    41cc:	00bf      	lsls	r7, r7, #2
    41ce:	59d2      	ldr	r2, [r2, r7]
    41d0:	4697      	mov	pc, r2
    41d2:	465b      	mov	r3, fp
    41d4:	4303      	orrs	r3, r0
    41d6:	4699      	mov	r9, r3
    41d8:	d000      	beq.n	41dc <__aeabi_dmul+0xa0>
    41da:	e087      	b.n	42ec <__aeabi_dmul+0x1b0>
    41dc:	2300      	movs	r3, #0
    41de:	469b      	mov	fp, r3
    41e0:	3302      	adds	r3, #2
    41e2:	2708      	movs	r7, #8
    41e4:	9302      	str	r3, [sp, #8]
    41e6:	e7ce      	b.n	4186 <__aeabi_dmul+0x4a>
    41e8:	4642      	mov	r2, r8
    41ea:	9201      	str	r2, [sp, #4]
    41ec:	2802      	cmp	r0, #2
    41ee:	d067      	beq.n	42c0 <__aeabi_dmul+0x184>
    41f0:	2803      	cmp	r0, #3
    41f2:	d100      	bne.n	41f6 <__aeabi_dmul+0xba>
    41f4:	e20e      	b.n	4614 <__aeabi_dmul+0x4d8>
    41f6:	2801      	cmp	r0, #1
    41f8:	d000      	beq.n	41fc <__aeabi_dmul+0xc0>
    41fa:	e162      	b.n	44c2 <__aeabi_dmul+0x386>
    41fc:	2300      	movs	r3, #0
    41fe:	2400      	movs	r4, #0
    4200:	2200      	movs	r2, #0
    4202:	4699      	mov	r9, r3
    4204:	9901      	ldr	r1, [sp, #4]
    4206:	4001      	ands	r1, r0
    4208:	b2cd      	uxtb	r5, r1
    420a:	2100      	movs	r1, #0
    420c:	0312      	lsls	r2, r2, #12
    420e:	0d0b      	lsrs	r3, r1, #20
    4210:	0b12      	lsrs	r2, r2, #12
    4212:	051b      	lsls	r3, r3, #20
    4214:	4313      	orrs	r3, r2
    4216:	4a43      	ldr	r2, [pc, #268]	; (4324 <__aeabi_dmul+0x1e8>)
    4218:	0524      	lsls	r4, r4, #20
    421a:	4013      	ands	r3, r2
    421c:	431c      	orrs	r4, r3
    421e:	0064      	lsls	r4, r4, #1
    4220:	07ed      	lsls	r5, r5, #31
    4222:	0864      	lsrs	r4, r4, #1
    4224:	432c      	orrs	r4, r5
    4226:	4648      	mov	r0, r9
    4228:	0021      	movs	r1, r4
    422a:	b007      	add	sp, #28
    422c:	bc3c      	pop	{r2, r3, r4, r5}
    422e:	4690      	mov	r8, r2
    4230:	4699      	mov	r9, r3
    4232:	46a2      	mov	sl, r4
    4234:	46ab      	mov	fp, r5
    4236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4238:	4303      	orrs	r3, r0
    423a:	4699      	mov	r9, r3
    423c:	d04f      	beq.n	42de <__aeabi_dmul+0x1a2>
    423e:	465b      	mov	r3, fp
    4240:	2b00      	cmp	r3, #0
    4242:	d100      	bne.n	4246 <__aeabi_dmul+0x10a>
    4244:	e189      	b.n	455a <__aeabi_dmul+0x41e>
    4246:	4658      	mov	r0, fp
    4248:	f000 fd84 	bl	4d54 <__clzsi2>
    424c:	0003      	movs	r3, r0
    424e:	3b0b      	subs	r3, #11
    4250:	2b1c      	cmp	r3, #28
    4252:	dd00      	ble.n	4256 <__aeabi_dmul+0x11a>
    4254:	e17a      	b.n	454c <__aeabi_dmul+0x410>
    4256:	221d      	movs	r2, #29
    4258:	1ad3      	subs	r3, r2, r3
    425a:	003a      	movs	r2, r7
    425c:	0001      	movs	r1, r0
    425e:	465c      	mov	r4, fp
    4260:	40da      	lsrs	r2, r3
    4262:	3908      	subs	r1, #8
    4264:	408c      	lsls	r4, r1
    4266:	0013      	movs	r3, r2
    4268:	408f      	lsls	r7, r1
    426a:	4323      	orrs	r3, r4
    426c:	469b      	mov	fp, r3
    426e:	46b9      	mov	r9, r7
    4270:	2300      	movs	r3, #0
    4272:	4e2d      	ldr	r6, [pc, #180]	; (4328 <__aeabi_dmul+0x1ec>)
    4274:	2700      	movs	r7, #0
    4276:	1a36      	subs	r6, r6, r0
    4278:	9302      	str	r3, [sp, #8]
    427a:	e784      	b.n	4186 <__aeabi_dmul+0x4a>
    427c:	4653      	mov	r3, sl
    427e:	4323      	orrs	r3, r4
    4280:	d12a      	bne.n	42d8 <__aeabi_dmul+0x19c>
    4282:	2400      	movs	r4, #0
    4284:	2002      	movs	r0, #2
    4286:	e796      	b.n	41b6 <__aeabi_dmul+0x7a>
    4288:	4653      	mov	r3, sl
    428a:	4323      	orrs	r3, r4
    428c:	d020      	beq.n	42d0 <__aeabi_dmul+0x194>
    428e:	2c00      	cmp	r4, #0
    4290:	d100      	bne.n	4294 <__aeabi_dmul+0x158>
    4292:	e157      	b.n	4544 <__aeabi_dmul+0x408>
    4294:	0020      	movs	r0, r4
    4296:	f000 fd5d 	bl	4d54 <__clzsi2>
    429a:	0003      	movs	r3, r0
    429c:	3b0b      	subs	r3, #11
    429e:	2b1c      	cmp	r3, #28
    42a0:	dd00      	ble.n	42a4 <__aeabi_dmul+0x168>
    42a2:	e149      	b.n	4538 <__aeabi_dmul+0x3fc>
    42a4:	211d      	movs	r1, #29
    42a6:	1acb      	subs	r3, r1, r3
    42a8:	4651      	mov	r1, sl
    42aa:	0002      	movs	r2, r0
    42ac:	40d9      	lsrs	r1, r3
    42ae:	4653      	mov	r3, sl
    42b0:	3a08      	subs	r2, #8
    42b2:	4094      	lsls	r4, r2
    42b4:	4093      	lsls	r3, r2
    42b6:	430c      	orrs	r4, r1
    42b8:	4a1b      	ldr	r2, [pc, #108]	; (4328 <__aeabi_dmul+0x1ec>)
    42ba:	1a12      	subs	r2, r2, r0
    42bc:	2000      	movs	r0, #0
    42be:	e77a      	b.n	41b6 <__aeabi_dmul+0x7a>
    42c0:	2501      	movs	r5, #1
    42c2:	9b01      	ldr	r3, [sp, #4]
    42c4:	4c14      	ldr	r4, [pc, #80]	; (4318 <__aeabi_dmul+0x1dc>)
    42c6:	401d      	ands	r5, r3
    42c8:	2300      	movs	r3, #0
    42ca:	2200      	movs	r2, #0
    42cc:	4699      	mov	r9, r3
    42ce:	e79c      	b.n	420a <__aeabi_dmul+0xce>
    42d0:	2400      	movs	r4, #0
    42d2:	2200      	movs	r2, #0
    42d4:	2001      	movs	r0, #1
    42d6:	e76e      	b.n	41b6 <__aeabi_dmul+0x7a>
    42d8:	4653      	mov	r3, sl
    42da:	2003      	movs	r0, #3
    42dc:	e76b      	b.n	41b6 <__aeabi_dmul+0x7a>
    42de:	2300      	movs	r3, #0
    42e0:	469b      	mov	fp, r3
    42e2:	3301      	adds	r3, #1
    42e4:	2704      	movs	r7, #4
    42e6:	2600      	movs	r6, #0
    42e8:	9302      	str	r3, [sp, #8]
    42ea:	e74c      	b.n	4186 <__aeabi_dmul+0x4a>
    42ec:	2303      	movs	r3, #3
    42ee:	4681      	mov	r9, r0
    42f0:	270c      	movs	r7, #12
    42f2:	9302      	str	r3, [sp, #8]
    42f4:	e747      	b.n	4186 <__aeabi_dmul+0x4a>
    42f6:	2280      	movs	r2, #128	; 0x80
    42f8:	2300      	movs	r3, #0
    42fa:	2500      	movs	r5, #0
    42fc:	0312      	lsls	r2, r2, #12
    42fe:	4699      	mov	r9, r3
    4300:	4c05      	ldr	r4, [pc, #20]	; (4318 <__aeabi_dmul+0x1dc>)
    4302:	e782      	b.n	420a <__aeabi_dmul+0xce>
    4304:	465c      	mov	r4, fp
    4306:	464b      	mov	r3, r9
    4308:	9802      	ldr	r0, [sp, #8]
    430a:	e76f      	b.n	41ec <__aeabi_dmul+0xb0>
    430c:	465c      	mov	r4, fp
    430e:	464b      	mov	r3, r9
    4310:	9501      	str	r5, [sp, #4]
    4312:	9802      	ldr	r0, [sp, #8]
    4314:	e76a      	b.n	41ec <__aeabi_dmul+0xb0>
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	000007ff 	.word	0x000007ff
    431c:	fffffc01 	.word	0xfffffc01
    4320:	00005ff8 	.word	0x00005ff8
    4324:	800fffff 	.word	0x800fffff
    4328:	fffffc0d 	.word	0xfffffc0d
    432c:	464a      	mov	r2, r9
    432e:	4649      	mov	r1, r9
    4330:	0c17      	lsrs	r7, r2, #16
    4332:	0c1a      	lsrs	r2, r3, #16
    4334:	041b      	lsls	r3, r3, #16
    4336:	0c1b      	lsrs	r3, r3, #16
    4338:	0408      	lsls	r0, r1, #16
    433a:	0019      	movs	r1, r3
    433c:	0c00      	lsrs	r0, r0, #16
    433e:	4341      	muls	r1, r0
    4340:	0015      	movs	r5, r2
    4342:	4688      	mov	r8, r1
    4344:	0019      	movs	r1, r3
    4346:	437d      	muls	r5, r7
    4348:	4379      	muls	r1, r7
    434a:	9503      	str	r5, [sp, #12]
    434c:	4689      	mov	r9, r1
    434e:	0029      	movs	r1, r5
    4350:	0015      	movs	r5, r2
    4352:	4345      	muls	r5, r0
    4354:	444d      	add	r5, r9
    4356:	9502      	str	r5, [sp, #8]
    4358:	4645      	mov	r5, r8
    435a:	0c2d      	lsrs	r5, r5, #16
    435c:	46aa      	mov	sl, r5
    435e:	9d02      	ldr	r5, [sp, #8]
    4360:	4455      	add	r5, sl
    4362:	45a9      	cmp	r9, r5
    4364:	d906      	bls.n	4374 <__aeabi_dmul+0x238>
    4366:	468a      	mov	sl, r1
    4368:	2180      	movs	r1, #128	; 0x80
    436a:	0249      	lsls	r1, r1, #9
    436c:	4689      	mov	r9, r1
    436e:	44ca      	add	sl, r9
    4370:	4651      	mov	r1, sl
    4372:	9103      	str	r1, [sp, #12]
    4374:	0c29      	lsrs	r1, r5, #16
    4376:	9104      	str	r1, [sp, #16]
    4378:	4641      	mov	r1, r8
    437a:	0409      	lsls	r1, r1, #16
    437c:	042d      	lsls	r5, r5, #16
    437e:	0c09      	lsrs	r1, r1, #16
    4380:	4688      	mov	r8, r1
    4382:	0029      	movs	r1, r5
    4384:	0c25      	lsrs	r5, r4, #16
    4386:	0424      	lsls	r4, r4, #16
    4388:	4441      	add	r1, r8
    438a:	0c24      	lsrs	r4, r4, #16
    438c:	9105      	str	r1, [sp, #20]
    438e:	0021      	movs	r1, r4
    4390:	4341      	muls	r1, r0
    4392:	4688      	mov	r8, r1
    4394:	0021      	movs	r1, r4
    4396:	4379      	muls	r1, r7
    4398:	468a      	mov	sl, r1
    439a:	4368      	muls	r0, r5
    439c:	4641      	mov	r1, r8
    439e:	4450      	add	r0, sl
    43a0:	4681      	mov	r9, r0
    43a2:	0c08      	lsrs	r0, r1, #16
    43a4:	4448      	add	r0, r9
    43a6:	436f      	muls	r7, r5
    43a8:	4582      	cmp	sl, r0
    43aa:	d903      	bls.n	43b4 <__aeabi_dmul+0x278>
    43ac:	2180      	movs	r1, #128	; 0x80
    43ae:	0249      	lsls	r1, r1, #9
    43b0:	4689      	mov	r9, r1
    43b2:	444f      	add	r7, r9
    43b4:	0c01      	lsrs	r1, r0, #16
    43b6:	4689      	mov	r9, r1
    43b8:	0039      	movs	r1, r7
    43ba:	4449      	add	r1, r9
    43bc:	9102      	str	r1, [sp, #8]
    43be:	4641      	mov	r1, r8
    43c0:	040f      	lsls	r7, r1, #16
    43c2:	9904      	ldr	r1, [sp, #16]
    43c4:	0c3f      	lsrs	r7, r7, #16
    43c6:	4688      	mov	r8, r1
    43c8:	0400      	lsls	r0, r0, #16
    43ca:	19c0      	adds	r0, r0, r7
    43cc:	4480      	add	r8, r0
    43ce:	4641      	mov	r1, r8
    43d0:	9104      	str	r1, [sp, #16]
    43d2:	4659      	mov	r1, fp
    43d4:	0c0f      	lsrs	r7, r1, #16
    43d6:	0409      	lsls	r1, r1, #16
    43d8:	0c09      	lsrs	r1, r1, #16
    43da:	4688      	mov	r8, r1
    43dc:	4359      	muls	r1, r3
    43de:	468a      	mov	sl, r1
    43e0:	0039      	movs	r1, r7
    43e2:	4351      	muls	r1, r2
    43e4:	4689      	mov	r9, r1
    43e6:	4641      	mov	r1, r8
    43e8:	434a      	muls	r2, r1
    43ea:	4651      	mov	r1, sl
    43ec:	0c09      	lsrs	r1, r1, #16
    43ee:	468b      	mov	fp, r1
    43f0:	437b      	muls	r3, r7
    43f2:	18d2      	adds	r2, r2, r3
    43f4:	445a      	add	r2, fp
    43f6:	4293      	cmp	r3, r2
    43f8:	d903      	bls.n	4402 <__aeabi_dmul+0x2c6>
    43fa:	2380      	movs	r3, #128	; 0x80
    43fc:	025b      	lsls	r3, r3, #9
    43fe:	469b      	mov	fp, r3
    4400:	44d9      	add	r9, fp
    4402:	4651      	mov	r1, sl
    4404:	0409      	lsls	r1, r1, #16
    4406:	0c09      	lsrs	r1, r1, #16
    4408:	468a      	mov	sl, r1
    440a:	4641      	mov	r1, r8
    440c:	4361      	muls	r1, r4
    440e:	437c      	muls	r4, r7
    4410:	0c13      	lsrs	r3, r2, #16
    4412:	0412      	lsls	r2, r2, #16
    4414:	444b      	add	r3, r9
    4416:	4452      	add	r2, sl
    4418:	46a1      	mov	r9, r4
    441a:	468a      	mov	sl, r1
    441c:	003c      	movs	r4, r7
    441e:	4641      	mov	r1, r8
    4420:	436c      	muls	r4, r5
    4422:	434d      	muls	r5, r1
    4424:	4651      	mov	r1, sl
    4426:	444d      	add	r5, r9
    4428:	0c0f      	lsrs	r7, r1, #16
    442a:	197d      	adds	r5, r7, r5
    442c:	45a9      	cmp	r9, r5
    442e:	d903      	bls.n	4438 <__aeabi_dmul+0x2fc>
    4430:	2180      	movs	r1, #128	; 0x80
    4432:	0249      	lsls	r1, r1, #9
    4434:	4688      	mov	r8, r1
    4436:	4444      	add	r4, r8
    4438:	9f04      	ldr	r7, [sp, #16]
    443a:	9903      	ldr	r1, [sp, #12]
    443c:	46b8      	mov	r8, r7
    443e:	4441      	add	r1, r8
    4440:	468b      	mov	fp, r1
    4442:	4583      	cmp	fp, r0
    4444:	4180      	sbcs	r0, r0
    4446:	4241      	negs	r1, r0
    4448:	4688      	mov	r8, r1
    444a:	4651      	mov	r1, sl
    444c:	0408      	lsls	r0, r1, #16
    444e:	042f      	lsls	r7, r5, #16
    4450:	0c00      	lsrs	r0, r0, #16
    4452:	183f      	adds	r7, r7, r0
    4454:	4658      	mov	r0, fp
    4456:	9902      	ldr	r1, [sp, #8]
    4458:	1810      	adds	r0, r2, r0
    445a:	4689      	mov	r9, r1
    445c:	4290      	cmp	r0, r2
    445e:	4192      	sbcs	r2, r2
    4460:	444f      	add	r7, r9
    4462:	46ba      	mov	sl, r7
    4464:	4252      	negs	r2, r2
    4466:	4699      	mov	r9, r3
    4468:	4693      	mov	fp, r2
    446a:	44c2      	add	sl, r8
    446c:	44d1      	add	r9, sl
    446e:	44cb      	add	fp, r9
    4470:	428f      	cmp	r7, r1
    4472:	41bf      	sbcs	r7, r7
    4474:	45c2      	cmp	sl, r8
    4476:	4189      	sbcs	r1, r1
    4478:	4599      	cmp	r9, r3
    447a:	419b      	sbcs	r3, r3
    447c:	4593      	cmp	fp, r2
    447e:	4192      	sbcs	r2, r2
    4480:	427f      	negs	r7, r7
    4482:	4249      	negs	r1, r1
    4484:	0c2d      	lsrs	r5, r5, #16
    4486:	4252      	negs	r2, r2
    4488:	430f      	orrs	r7, r1
    448a:	425b      	negs	r3, r3
    448c:	4313      	orrs	r3, r2
    448e:	197f      	adds	r7, r7, r5
    4490:	18ff      	adds	r7, r7, r3
    4492:	465b      	mov	r3, fp
    4494:	193c      	adds	r4, r7, r4
    4496:	0ddb      	lsrs	r3, r3, #23
    4498:	9a05      	ldr	r2, [sp, #20]
    449a:	0264      	lsls	r4, r4, #9
    449c:	431c      	orrs	r4, r3
    449e:	0243      	lsls	r3, r0, #9
    44a0:	4313      	orrs	r3, r2
    44a2:	1e5d      	subs	r5, r3, #1
    44a4:	41ab      	sbcs	r3, r5
    44a6:	465a      	mov	r2, fp
    44a8:	0dc0      	lsrs	r0, r0, #23
    44aa:	4303      	orrs	r3, r0
    44ac:	0252      	lsls	r2, r2, #9
    44ae:	4313      	orrs	r3, r2
    44b0:	01e2      	lsls	r2, r4, #7
    44b2:	d556      	bpl.n	4562 <__aeabi_dmul+0x426>
    44b4:	2001      	movs	r0, #1
    44b6:	085a      	lsrs	r2, r3, #1
    44b8:	4003      	ands	r3, r0
    44ba:	4313      	orrs	r3, r2
    44bc:	07e2      	lsls	r2, r4, #31
    44be:	4313      	orrs	r3, r2
    44c0:	0864      	lsrs	r4, r4, #1
    44c2:	485a      	ldr	r0, [pc, #360]	; (462c <__aeabi_dmul+0x4f0>)
    44c4:	4460      	add	r0, ip
    44c6:	2800      	cmp	r0, #0
    44c8:	dd4d      	ble.n	4566 <__aeabi_dmul+0x42a>
    44ca:	075a      	lsls	r2, r3, #29
    44cc:	d009      	beq.n	44e2 <__aeabi_dmul+0x3a6>
    44ce:	220f      	movs	r2, #15
    44d0:	401a      	ands	r2, r3
    44d2:	2a04      	cmp	r2, #4
    44d4:	d005      	beq.n	44e2 <__aeabi_dmul+0x3a6>
    44d6:	1d1a      	adds	r2, r3, #4
    44d8:	429a      	cmp	r2, r3
    44da:	419b      	sbcs	r3, r3
    44dc:	425b      	negs	r3, r3
    44de:	18e4      	adds	r4, r4, r3
    44e0:	0013      	movs	r3, r2
    44e2:	01e2      	lsls	r2, r4, #7
    44e4:	d504      	bpl.n	44f0 <__aeabi_dmul+0x3b4>
    44e6:	2080      	movs	r0, #128	; 0x80
    44e8:	4a51      	ldr	r2, [pc, #324]	; (4630 <__aeabi_dmul+0x4f4>)
    44ea:	00c0      	lsls	r0, r0, #3
    44ec:	4014      	ands	r4, r2
    44ee:	4460      	add	r0, ip
    44f0:	4a50      	ldr	r2, [pc, #320]	; (4634 <__aeabi_dmul+0x4f8>)
    44f2:	4290      	cmp	r0, r2
    44f4:	dd00      	ble.n	44f8 <__aeabi_dmul+0x3bc>
    44f6:	e6e3      	b.n	42c0 <__aeabi_dmul+0x184>
    44f8:	2501      	movs	r5, #1
    44fa:	08db      	lsrs	r3, r3, #3
    44fc:	0762      	lsls	r2, r4, #29
    44fe:	431a      	orrs	r2, r3
    4500:	0264      	lsls	r4, r4, #9
    4502:	9b01      	ldr	r3, [sp, #4]
    4504:	4691      	mov	r9, r2
    4506:	0b22      	lsrs	r2, r4, #12
    4508:	0544      	lsls	r4, r0, #21
    450a:	0d64      	lsrs	r4, r4, #21
    450c:	401d      	ands	r5, r3
    450e:	e67c      	b.n	420a <__aeabi_dmul+0xce>
    4510:	2280      	movs	r2, #128	; 0x80
    4512:	4659      	mov	r1, fp
    4514:	0312      	lsls	r2, r2, #12
    4516:	4211      	tst	r1, r2
    4518:	d008      	beq.n	452c <__aeabi_dmul+0x3f0>
    451a:	4214      	tst	r4, r2
    451c:	d106      	bne.n	452c <__aeabi_dmul+0x3f0>
    451e:	4322      	orrs	r2, r4
    4520:	0312      	lsls	r2, r2, #12
    4522:	0b12      	lsrs	r2, r2, #12
    4524:	4645      	mov	r5, r8
    4526:	4699      	mov	r9, r3
    4528:	4c43      	ldr	r4, [pc, #268]	; (4638 <__aeabi_dmul+0x4fc>)
    452a:	e66e      	b.n	420a <__aeabi_dmul+0xce>
    452c:	465b      	mov	r3, fp
    452e:	431a      	orrs	r2, r3
    4530:	0312      	lsls	r2, r2, #12
    4532:	0b12      	lsrs	r2, r2, #12
    4534:	4c40      	ldr	r4, [pc, #256]	; (4638 <__aeabi_dmul+0x4fc>)
    4536:	e668      	b.n	420a <__aeabi_dmul+0xce>
    4538:	0003      	movs	r3, r0
    453a:	4654      	mov	r4, sl
    453c:	3b28      	subs	r3, #40	; 0x28
    453e:	409c      	lsls	r4, r3
    4540:	2300      	movs	r3, #0
    4542:	e6b9      	b.n	42b8 <__aeabi_dmul+0x17c>
    4544:	f000 fc06 	bl	4d54 <__clzsi2>
    4548:	3020      	adds	r0, #32
    454a:	e6a6      	b.n	429a <__aeabi_dmul+0x15e>
    454c:	0003      	movs	r3, r0
    454e:	3b28      	subs	r3, #40	; 0x28
    4550:	409f      	lsls	r7, r3
    4552:	2300      	movs	r3, #0
    4554:	46bb      	mov	fp, r7
    4556:	4699      	mov	r9, r3
    4558:	e68a      	b.n	4270 <__aeabi_dmul+0x134>
    455a:	f000 fbfb 	bl	4d54 <__clzsi2>
    455e:	3020      	adds	r0, #32
    4560:	e674      	b.n	424c <__aeabi_dmul+0x110>
    4562:	46b4      	mov	ip, r6
    4564:	e7ad      	b.n	44c2 <__aeabi_dmul+0x386>
    4566:	2501      	movs	r5, #1
    4568:	1a2a      	subs	r2, r5, r0
    456a:	2a38      	cmp	r2, #56	; 0x38
    456c:	dd06      	ble.n	457c <__aeabi_dmul+0x440>
    456e:	9b01      	ldr	r3, [sp, #4]
    4570:	2400      	movs	r4, #0
    4572:	401d      	ands	r5, r3
    4574:	2300      	movs	r3, #0
    4576:	2200      	movs	r2, #0
    4578:	4699      	mov	r9, r3
    457a:	e646      	b.n	420a <__aeabi_dmul+0xce>
    457c:	2a1f      	cmp	r2, #31
    457e:	dc21      	bgt.n	45c4 <__aeabi_dmul+0x488>
    4580:	2520      	movs	r5, #32
    4582:	0020      	movs	r0, r4
    4584:	1aad      	subs	r5, r5, r2
    4586:	001e      	movs	r6, r3
    4588:	40ab      	lsls	r3, r5
    458a:	40a8      	lsls	r0, r5
    458c:	40d6      	lsrs	r6, r2
    458e:	1e5d      	subs	r5, r3, #1
    4590:	41ab      	sbcs	r3, r5
    4592:	4330      	orrs	r0, r6
    4594:	4318      	orrs	r0, r3
    4596:	40d4      	lsrs	r4, r2
    4598:	0743      	lsls	r3, r0, #29
    459a:	d009      	beq.n	45b0 <__aeabi_dmul+0x474>
    459c:	230f      	movs	r3, #15
    459e:	4003      	ands	r3, r0
    45a0:	2b04      	cmp	r3, #4
    45a2:	d005      	beq.n	45b0 <__aeabi_dmul+0x474>
    45a4:	0003      	movs	r3, r0
    45a6:	1d18      	adds	r0, r3, #4
    45a8:	4298      	cmp	r0, r3
    45aa:	419b      	sbcs	r3, r3
    45ac:	425b      	negs	r3, r3
    45ae:	18e4      	adds	r4, r4, r3
    45b0:	0223      	lsls	r3, r4, #8
    45b2:	d521      	bpl.n	45f8 <__aeabi_dmul+0x4bc>
    45b4:	2501      	movs	r5, #1
    45b6:	9b01      	ldr	r3, [sp, #4]
    45b8:	2401      	movs	r4, #1
    45ba:	401d      	ands	r5, r3
    45bc:	2300      	movs	r3, #0
    45be:	2200      	movs	r2, #0
    45c0:	4699      	mov	r9, r3
    45c2:	e622      	b.n	420a <__aeabi_dmul+0xce>
    45c4:	251f      	movs	r5, #31
    45c6:	0021      	movs	r1, r4
    45c8:	426d      	negs	r5, r5
    45ca:	1a28      	subs	r0, r5, r0
    45cc:	40c1      	lsrs	r1, r0
    45ce:	0008      	movs	r0, r1
    45d0:	2a20      	cmp	r2, #32
    45d2:	d01d      	beq.n	4610 <__aeabi_dmul+0x4d4>
    45d4:	355f      	adds	r5, #95	; 0x5f
    45d6:	1aaa      	subs	r2, r5, r2
    45d8:	4094      	lsls	r4, r2
    45da:	4323      	orrs	r3, r4
    45dc:	1e5c      	subs	r4, r3, #1
    45de:	41a3      	sbcs	r3, r4
    45e0:	2507      	movs	r5, #7
    45e2:	4303      	orrs	r3, r0
    45e4:	401d      	ands	r5, r3
    45e6:	2200      	movs	r2, #0
    45e8:	2d00      	cmp	r5, #0
    45ea:	d009      	beq.n	4600 <__aeabi_dmul+0x4c4>
    45ec:	220f      	movs	r2, #15
    45ee:	2400      	movs	r4, #0
    45f0:	401a      	ands	r2, r3
    45f2:	0018      	movs	r0, r3
    45f4:	2a04      	cmp	r2, #4
    45f6:	d1d6      	bne.n	45a6 <__aeabi_dmul+0x46a>
    45f8:	0003      	movs	r3, r0
    45fa:	0765      	lsls	r5, r4, #29
    45fc:	0264      	lsls	r4, r4, #9
    45fe:	0b22      	lsrs	r2, r4, #12
    4600:	08db      	lsrs	r3, r3, #3
    4602:	432b      	orrs	r3, r5
    4604:	2501      	movs	r5, #1
    4606:	4699      	mov	r9, r3
    4608:	9b01      	ldr	r3, [sp, #4]
    460a:	2400      	movs	r4, #0
    460c:	401d      	ands	r5, r3
    460e:	e5fc      	b.n	420a <__aeabi_dmul+0xce>
    4610:	2400      	movs	r4, #0
    4612:	e7e2      	b.n	45da <__aeabi_dmul+0x49e>
    4614:	2280      	movs	r2, #128	; 0x80
    4616:	2501      	movs	r5, #1
    4618:	0312      	lsls	r2, r2, #12
    461a:	4322      	orrs	r2, r4
    461c:	9901      	ldr	r1, [sp, #4]
    461e:	0312      	lsls	r2, r2, #12
    4620:	0b12      	lsrs	r2, r2, #12
    4622:	400d      	ands	r5, r1
    4624:	4699      	mov	r9, r3
    4626:	4c04      	ldr	r4, [pc, #16]	; (4638 <__aeabi_dmul+0x4fc>)
    4628:	e5ef      	b.n	420a <__aeabi_dmul+0xce>
    462a:	46c0      	nop			; (mov r8, r8)
    462c:	000003ff 	.word	0x000003ff
    4630:	feffffff 	.word	0xfeffffff
    4634:	000007fe 	.word	0x000007fe
    4638:	000007ff 	.word	0x000007ff

0000463c <__aeabi_dsub>:
    463c:	b5f0      	push	{r4, r5, r6, r7, lr}
    463e:	4646      	mov	r6, r8
    4640:	46d6      	mov	lr, sl
    4642:	464f      	mov	r7, r9
    4644:	030c      	lsls	r4, r1, #12
    4646:	b5c0      	push	{r6, r7, lr}
    4648:	0fcd      	lsrs	r5, r1, #31
    464a:	004e      	lsls	r6, r1, #1
    464c:	0a61      	lsrs	r1, r4, #9
    464e:	0f44      	lsrs	r4, r0, #29
    4650:	430c      	orrs	r4, r1
    4652:	00c1      	lsls	r1, r0, #3
    4654:	0058      	lsls	r0, r3, #1
    4656:	0d40      	lsrs	r0, r0, #21
    4658:	4684      	mov	ip, r0
    465a:	468a      	mov	sl, r1
    465c:	000f      	movs	r7, r1
    465e:	0319      	lsls	r1, r3, #12
    4660:	0f50      	lsrs	r0, r2, #29
    4662:	0a49      	lsrs	r1, r1, #9
    4664:	4301      	orrs	r1, r0
    4666:	48c6      	ldr	r0, [pc, #792]	; (4980 <__aeabi_dsub+0x344>)
    4668:	0d76      	lsrs	r6, r6, #21
    466a:	46a8      	mov	r8, r5
    466c:	0fdb      	lsrs	r3, r3, #31
    466e:	00d2      	lsls	r2, r2, #3
    4670:	4584      	cmp	ip, r0
    4672:	d100      	bne.n	4676 <__aeabi_dsub+0x3a>
    4674:	e0d8      	b.n	4828 <__aeabi_dsub+0x1ec>
    4676:	2001      	movs	r0, #1
    4678:	4043      	eors	r3, r0
    467a:	42ab      	cmp	r3, r5
    467c:	d100      	bne.n	4680 <__aeabi_dsub+0x44>
    467e:	e0a6      	b.n	47ce <__aeabi_dsub+0x192>
    4680:	4660      	mov	r0, ip
    4682:	1a35      	subs	r5, r6, r0
    4684:	2d00      	cmp	r5, #0
    4686:	dc00      	bgt.n	468a <__aeabi_dsub+0x4e>
    4688:	e105      	b.n	4896 <__aeabi_dsub+0x25a>
    468a:	2800      	cmp	r0, #0
    468c:	d110      	bne.n	46b0 <__aeabi_dsub+0x74>
    468e:	000b      	movs	r3, r1
    4690:	4313      	orrs	r3, r2
    4692:	d100      	bne.n	4696 <__aeabi_dsub+0x5a>
    4694:	e0d7      	b.n	4846 <__aeabi_dsub+0x20a>
    4696:	1e6b      	subs	r3, r5, #1
    4698:	2b00      	cmp	r3, #0
    469a:	d000      	beq.n	469e <__aeabi_dsub+0x62>
    469c:	e14b      	b.n	4936 <__aeabi_dsub+0x2fa>
    469e:	4653      	mov	r3, sl
    46a0:	1a9f      	subs	r7, r3, r2
    46a2:	45ba      	cmp	sl, r7
    46a4:	4180      	sbcs	r0, r0
    46a6:	1a64      	subs	r4, r4, r1
    46a8:	4240      	negs	r0, r0
    46aa:	1a24      	subs	r4, r4, r0
    46ac:	2601      	movs	r6, #1
    46ae:	e01e      	b.n	46ee <__aeabi_dsub+0xb2>
    46b0:	4bb3      	ldr	r3, [pc, #716]	; (4980 <__aeabi_dsub+0x344>)
    46b2:	429e      	cmp	r6, r3
    46b4:	d048      	beq.n	4748 <__aeabi_dsub+0x10c>
    46b6:	2380      	movs	r3, #128	; 0x80
    46b8:	041b      	lsls	r3, r3, #16
    46ba:	4319      	orrs	r1, r3
    46bc:	2d38      	cmp	r5, #56	; 0x38
    46be:	dd00      	ble.n	46c2 <__aeabi_dsub+0x86>
    46c0:	e119      	b.n	48f6 <__aeabi_dsub+0x2ba>
    46c2:	2d1f      	cmp	r5, #31
    46c4:	dd00      	ble.n	46c8 <__aeabi_dsub+0x8c>
    46c6:	e14c      	b.n	4962 <__aeabi_dsub+0x326>
    46c8:	2320      	movs	r3, #32
    46ca:	000f      	movs	r7, r1
    46cc:	1b5b      	subs	r3, r3, r5
    46ce:	0010      	movs	r0, r2
    46d0:	409a      	lsls	r2, r3
    46d2:	409f      	lsls	r7, r3
    46d4:	40e8      	lsrs	r0, r5
    46d6:	1e53      	subs	r3, r2, #1
    46d8:	419a      	sbcs	r2, r3
    46da:	40e9      	lsrs	r1, r5
    46dc:	4307      	orrs	r7, r0
    46de:	4317      	orrs	r7, r2
    46e0:	4653      	mov	r3, sl
    46e2:	1bdf      	subs	r7, r3, r7
    46e4:	1a61      	subs	r1, r4, r1
    46e6:	45ba      	cmp	sl, r7
    46e8:	41a4      	sbcs	r4, r4
    46ea:	4264      	negs	r4, r4
    46ec:	1b0c      	subs	r4, r1, r4
    46ee:	0223      	lsls	r3, r4, #8
    46f0:	d400      	bmi.n	46f4 <__aeabi_dsub+0xb8>
    46f2:	e0c5      	b.n	4880 <__aeabi_dsub+0x244>
    46f4:	0264      	lsls	r4, r4, #9
    46f6:	0a65      	lsrs	r5, r4, #9
    46f8:	2d00      	cmp	r5, #0
    46fa:	d100      	bne.n	46fe <__aeabi_dsub+0xc2>
    46fc:	e0f6      	b.n	48ec <__aeabi_dsub+0x2b0>
    46fe:	0028      	movs	r0, r5
    4700:	f000 fb28 	bl	4d54 <__clzsi2>
    4704:	0003      	movs	r3, r0
    4706:	3b08      	subs	r3, #8
    4708:	2b1f      	cmp	r3, #31
    470a:	dd00      	ble.n	470e <__aeabi_dsub+0xd2>
    470c:	e0e9      	b.n	48e2 <__aeabi_dsub+0x2a6>
    470e:	2220      	movs	r2, #32
    4710:	003c      	movs	r4, r7
    4712:	1ad2      	subs	r2, r2, r3
    4714:	409d      	lsls	r5, r3
    4716:	40d4      	lsrs	r4, r2
    4718:	409f      	lsls	r7, r3
    471a:	4325      	orrs	r5, r4
    471c:	429e      	cmp	r6, r3
    471e:	dd00      	ble.n	4722 <__aeabi_dsub+0xe6>
    4720:	e0db      	b.n	48da <__aeabi_dsub+0x29e>
    4722:	1b9e      	subs	r6, r3, r6
    4724:	1c73      	adds	r3, r6, #1
    4726:	2b1f      	cmp	r3, #31
    4728:	dd00      	ble.n	472c <__aeabi_dsub+0xf0>
    472a:	e10a      	b.n	4942 <__aeabi_dsub+0x306>
    472c:	2220      	movs	r2, #32
    472e:	0038      	movs	r0, r7
    4730:	1ad2      	subs	r2, r2, r3
    4732:	0029      	movs	r1, r5
    4734:	4097      	lsls	r7, r2
    4736:	002c      	movs	r4, r5
    4738:	4091      	lsls	r1, r2
    473a:	40d8      	lsrs	r0, r3
    473c:	1e7a      	subs	r2, r7, #1
    473e:	4197      	sbcs	r7, r2
    4740:	40dc      	lsrs	r4, r3
    4742:	2600      	movs	r6, #0
    4744:	4301      	orrs	r1, r0
    4746:	430f      	orrs	r7, r1
    4748:	077b      	lsls	r3, r7, #29
    474a:	d009      	beq.n	4760 <__aeabi_dsub+0x124>
    474c:	230f      	movs	r3, #15
    474e:	403b      	ands	r3, r7
    4750:	2b04      	cmp	r3, #4
    4752:	d005      	beq.n	4760 <__aeabi_dsub+0x124>
    4754:	1d3b      	adds	r3, r7, #4
    4756:	42bb      	cmp	r3, r7
    4758:	41bf      	sbcs	r7, r7
    475a:	427f      	negs	r7, r7
    475c:	19e4      	adds	r4, r4, r7
    475e:	001f      	movs	r7, r3
    4760:	0223      	lsls	r3, r4, #8
    4762:	d525      	bpl.n	47b0 <__aeabi_dsub+0x174>
    4764:	4b86      	ldr	r3, [pc, #536]	; (4980 <__aeabi_dsub+0x344>)
    4766:	3601      	adds	r6, #1
    4768:	429e      	cmp	r6, r3
    476a:	d100      	bne.n	476e <__aeabi_dsub+0x132>
    476c:	e0af      	b.n	48ce <__aeabi_dsub+0x292>
    476e:	4b85      	ldr	r3, [pc, #532]	; (4984 <__aeabi_dsub+0x348>)
    4770:	2501      	movs	r5, #1
    4772:	401c      	ands	r4, r3
    4774:	4643      	mov	r3, r8
    4776:	0762      	lsls	r2, r4, #29
    4778:	08ff      	lsrs	r7, r7, #3
    477a:	0264      	lsls	r4, r4, #9
    477c:	0576      	lsls	r6, r6, #21
    477e:	4317      	orrs	r7, r2
    4780:	0b24      	lsrs	r4, r4, #12
    4782:	0d76      	lsrs	r6, r6, #21
    4784:	401d      	ands	r5, r3
    4786:	2100      	movs	r1, #0
    4788:	0324      	lsls	r4, r4, #12
    478a:	0b23      	lsrs	r3, r4, #12
    478c:	0d0c      	lsrs	r4, r1, #20
    478e:	4a7e      	ldr	r2, [pc, #504]	; (4988 <__aeabi_dsub+0x34c>)
    4790:	0524      	lsls	r4, r4, #20
    4792:	431c      	orrs	r4, r3
    4794:	4014      	ands	r4, r2
    4796:	0533      	lsls	r3, r6, #20
    4798:	4323      	orrs	r3, r4
    479a:	005b      	lsls	r3, r3, #1
    479c:	07ed      	lsls	r5, r5, #31
    479e:	085b      	lsrs	r3, r3, #1
    47a0:	432b      	orrs	r3, r5
    47a2:	0038      	movs	r0, r7
    47a4:	0019      	movs	r1, r3
    47a6:	bc1c      	pop	{r2, r3, r4}
    47a8:	4690      	mov	r8, r2
    47aa:	4699      	mov	r9, r3
    47ac:	46a2      	mov	sl, r4
    47ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47b0:	2501      	movs	r5, #1
    47b2:	4643      	mov	r3, r8
    47b4:	0762      	lsls	r2, r4, #29
    47b6:	08ff      	lsrs	r7, r7, #3
    47b8:	4317      	orrs	r7, r2
    47ba:	08e4      	lsrs	r4, r4, #3
    47bc:	401d      	ands	r5, r3
    47be:	4b70      	ldr	r3, [pc, #448]	; (4980 <__aeabi_dsub+0x344>)
    47c0:	429e      	cmp	r6, r3
    47c2:	d036      	beq.n	4832 <__aeabi_dsub+0x1f6>
    47c4:	0324      	lsls	r4, r4, #12
    47c6:	0576      	lsls	r6, r6, #21
    47c8:	0b24      	lsrs	r4, r4, #12
    47ca:	0d76      	lsrs	r6, r6, #21
    47cc:	e7db      	b.n	4786 <__aeabi_dsub+0x14a>
    47ce:	4663      	mov	r3, ip
    47d0:	1af3      	subs	r3, r6, r3
    47d2:	2b00      	cmp	r3, #0
    47d4:	dc00      	bgt.n	47d8 <__aeabi_dsub+0x19c>
    47d6:	e094      	b.n	4902 <__aeabi_dsub+0x2c6>
    47d8:	4660      	mov	r0, ip
    47da:	2800      	cmp	r0, #0
    47dc:	d035      	beq.n	484a <__aeabi_dsub+0x20e>
    47de:	4868      	ldr	r0, [pc, #416]	; (4980 <__aeabi_dsub+0x344>)
    47e0:	4286      	cmp	r6, r0
    47e2:	d0b1      	beq.n	4748 <__aeabi_dsub+0x10c>
    47e4:	2780      	movs	r7, #128	; 0x80
    47e6:	043f      	lsls	r7, r7, #16
    47e8:	4339      	orrs	r1, r7
    47ea:	2b38      	cmp	r3, #56	; 0x38
    47ec:	dc00      	bgt.n	47f0 <__aeabi_dsub+0x1b4>
    47ee:	e0fd      	b.n	49ec <__aeabi_dsub+0x3b0>
    47f0:	430a      	orrs	r2, r1
    47f2:	0017      	movs	r7, r2
    47f4:	2100      	movs	r1, #0
    47f6:	1e7a      	subs	r2, r7, #1
    47f8:	4197      	sbcs	r7, r2
    47fa:	4457      	add	r7, sl
    47fc:	4557      	cmp	r7, sl
    47fe:	4180      	sbcs	r0, r0
    4800:	1909      	adds	r1, r1, r4
    4802:	4244      	negs	r4, r0
    4804:	190c      	adds	r4, r1, r4
    4806:	0223      	lsls	r3, r4, #8
    4808:	d53a      	bpl.n	4880 <__aeabi_dsub+0x244>
    480a:	4b5d      	ldr	r3, [pc, #372]	; (4980 <__aeabi_dsub+0x344>)
    480c:	3601      	adds	r6, #1
    480e:	429e      	cmp	r6, r3
    4810:	d100      	bne.n	4814 <__aeabi_dsub+0x1d8>
    4812:	e14b      	b.n	4aac <__aeabi_dsub+0x470>
    4814:	2201      	movs	r2, #1
    4816:	4b5b      	ldr	r3, [pc, #364]	; (4984 <__aeabi_dsub+0x348>)
    4818:	401c      	ands	r4, r3
    481a:	087b      	lsrs	r3, r7, #1
    481c:	4017      	ands	r7, r2
    481e:	431f      	orrs	r7, r3
    4820:	07e2      	lsls	r2, r4, #31
    4822:	4317      	orrs	r7, r2
    4824:	0864      	lsrs	r4, r4, #1
    4826:	e78f      	b.n	4748 <__aeabi_dsub+0x10c>
    4828:	0008      	movs	r0, r1
    482a:	4310      	orrs	r0, r2
    482c:	d000      	beq.n	4830 <__aeabi_dsub+0x1f4>
    482e:	e724      	b.n	467a <__aeabi_dsub+0x3e>
    4830:	e721      	b.n	4676 <__aeabi_dsub+0x3a>
    4832:	0023      	movs	r3, r4
    4834:	433b      	orrs	r3, r7
    4836:	d100      	bne.n	483a <__aeabi_dsub+0x1fe>
    4838:	e1b9      	b.n	4bae <__aeabi_dsub+0x572>
    483a:	2280      	movs	r2, #128	; 0x80
    483c:	0312      	lsls	r2, r2, #12
    483e:	4314      	orrs	r4, r2
    4840:	0324      	lsls	r4, r4, #12
    4842:	0b24      	lsrs	r4, r4, #12
    4844:	e79f      	b.n	4786 <__aeabi_dsub+0x14a>
    4846:	002e      	movs	r6, r5
    4848:	e77e      	b.n	4748 <__aeabi_dsub+0x10c>
    484a:	0008      	movs	r0, r1
    484c:	4310      	orrs	r0, r2
    484e:	d100      	bne.n	4852 <__aeabi_dsub+0x216>
    4850:	e0ca      	b.n	49e8 <__aeabi_dsub+0x3ac>
    4852:	1e58      	subs	r0, r3, #1
    4854:	4684      	mov	ip, r0
    4856:	2800      	cmp	r0, #0
    4858:	d000      	beq.n	485c <__aeabi_dsub+0x220>
    485a:	e0e7      	b.n	4a2c <__aeabi_dsub+0x3f0>
    485c:	4452      	add	r2, sl
    485e:	4552      	cmp	r2, sl
    4860:	4180      	sbcs	r0, r0
    4862:	1864      	adds	r4, r4, r1
    4864:	4240      	negs	r0, r0
    4866:	1824      	adds	r4, r4, r0
    4868:	0017      	movs	r7, r2
    486a:	2601      	movs	r6, #1
    486c:	0223      	lsls	r3, r4, #8
    486e:	d507      	bpl.n	4880 <__aeabi_dsub+0x244>
    4870:	2602      	movs	r6, #2
    4872:	e7cf      	b.n	4814 <__aeabi_dsub+0x1d8>
    4874:	4664      	mov	r4, ip
    4876:	432c      	orrs	r4, r5
    4878:	d100      	bne.n	487c <__aeabi_dsub+0x240>
    487a:	e1b3      	b.n	4be4 <__aeabi_dsub+0x5a8>
    487c:	002c      	movs	r4, r5
    487e:	4667      	mov	r7, ip
    4880:	077b      	lsls	r3, r7, #29
    4882:	d000      	beq.n	4886 <__aeabi_dsub+0x24a>
    4884:	e762      	b.n	474c <__aeabi_dsub+0x110>
    4886:	0763      	lsls	r3, r4, #29
    4888:	08ff      	lsrs	r7, r7, #3
    488a:	431f      	orrs	r7, r3
    488c:	2501      	movs	r5, #1
    488e:	4643      	mov	r3, r8
    4890:	08e4      	lsrs	r4, r4, #3
    4892:	401d      	ands	r5, r3
    4894:	e793      	b.n	47be <__aeabi_dsub+0x182>
    4896:	2d00      	cmp	r5, #0
    4898:	d178      	bne.n	498c <__aeabi_dsub+0x350>
    489a:	1c75      	adds	r5, r6, #1
    489c:	056d      	lsls	r5, r5, #21
    489e:	0d6d      	lsrs	r5, r5, #21
    48a0:	2d01      	cmp	r5, #1
    48a2:	dc00      	bgt.n	48a6 <__aeabi_dsub+0x26a>
    48a4:	e0f2      	b.n	4a8c <__aeabi_dsub+0x450>
    48a6:	4650      	mov	r0, sl
    48a8:	1a80      	subs	r0, r0, r2
    48aa:	4582      	cmp	sl, r0
    48ac:	41bf      	sbcs	r7, r7
    48ae:	1a65      	subs	r5, r4, r1
    48b0:	427f      	negs	r7, r7
    48b2:	1bed      	subs	r5, r5, r7
    48b4:	4684      	mov	ip, r0
    48b6:	0228      	lsls	r0, r5, #8
    48b8:	d400      	bmi.n	48bc <__aeabi_dsub+0x280>
    48ba:	e08c      	b.n	49d6 <__aeabi_dsub+0x39a>
    48bc:	4650      	mov	r0, sl
    48be:	1a17      	subs	r7, r2, r0
    48c0:	42ba      	cmp	r2, r7
    48c2:	4192      	sbcs	r2, r2
    48c4:	1b0c      	subs	r4, r1, r4
    48c6:	4255      	negs	r5, r2
    48c8:	1b65      	subs	r5, r4, r5
    48ca:	4698      	mov	r8, r3
    48cc:	e714      	b.n	46f8 <__aeabi_dsub+0xbc>
    48ce:	2501      	movs	r5, #1
    48d0:	4643      	mov	r3, r8
    48d2:	2400      	movs	r4, #0
    48d4:	401d      	ands	r5, r3
    48d6:	2700      	movs	r7, #0
    48d8:	e755      	b.n	4786 <__aeabi_dsub+0x14a>
    48da:	4c2a      	ldr	r4, [pc, #168]	; (4984 <__aeabi_dsub+0x348>)
    48dc:	1af6      	subs	r6, r6, r3
    48de:	402c      	ands	r4, r5
    48e0:	e732      	b.n	4748 <__aeabi_dsub+0x10c>
    48e2:	003d      	movs	r5, r7
    48e4:	3828      	subs	r0, #40	; 0x28
    48e6:	4085      	lsls	r5, r0
    48e8:	2700      	movs	r7, #0
    48ea:	e717      	b.n	471c <__aeabi_dsub+0xe0>
    48ec:	0038      	movs	r0, r7
    48ee:	f000 fa31 	bl	4d54 <__clzsi2>
    48f2:	3020      	adds	r0, #32
    48f4:	e706      	b.n	4704 <__aeabi_dsub+0xc8>
    48f6:	430a      	orrs	r2, r1
    48f8:	0017      	movs	r7, r2
    48fa:	2100      	movs	r1, #0
    48fc:	1e7a      	subs	r2, r7, #1
    48fe:	4197      	sbcs	r7, r2
    4900:	e6ee      	b.n	46e0 <__aeabi_dsub+0xa4>
    4902:	2b00      	cmp	r3, #0
    4904:	d000      	beq.n	4908 <__aeabi_dsub+0x2cc>
    4906:	e0e5      	b.n	4ad4 <__aeabi_dsub+0x498>
    4908:	1c73      	adds	r3, r6, #1
    490a:	469c      	mov	ip, r3
    490c:	055b      	lsls	r3, r3, #21
    490e:	0d5b      	lsrs	r3, r3, #21
    4910:	2b01      	cmp	r3, #1
    4912:	dc00      	bgt.n	4916 <__aeabi_dsub+0x2da>
    4914:	e09f      	b.n	4a56 <__aeabi_dsub+0x41a>
    4916:	4b1a      	ldr	r3, [pc, #104]	; (4980 <__aeabi_dsub+0x344>)
    4918:	459c      	cmp	ip, r3
    491a:	d100      	bne.n	491e <__aeabi_dsub+0x2e2>
    491c:	e0c5      	b.n	4aaa <__aeabi_dsub+0x46e>
    491e:	4452      	add	r2, sl
    4920:	4552      	cmp	r2, sl
    4922:	4180      	sbcs	r0, r0
    4924:	1864      	adds	r4, r4, r1
    4926:	4240      	negs	r0, r0
    4928:	1824      	adds	r4, r4, r0
    492a:	07e7      	lsls	r7, r4, #31
    492c:	0852      	lsrs	r2, r2, #1
    492e:	4317      	orrs	r7, r2
    4930:	0864      	lsrs	r4, r4, #1
    4932:	4666      	mov	r6, ip
    4934:	e708      	b.n	4748 <__aeabi_dsub+0x10c>
    4936:	4812      	ldr	r0, [pc, #72]	; (4980 <__aeabi_dsub+0x344>)
    4938:	4285      	cmp	r5, r0
    493a:	d100      	bne.n	493e <__aeabi_dsub+0x302>
    493c:	e085      	b.n	4a4a <__aeabi_dsub+0x40e>
    493e:	001d      	movs	r5, r3
    4940:	e6bc      	b.n	46bc <__aeabi_dsub+0x80>
    4942:	0029      	movs	r1, r5
    4944:	3e1f      	subs	r6, #31
    4946:	40f1      	lsrs	r1, r6
    4948:	2b20      	cmp	r3, #32
    494a:	d100      	bne.n	494e <__aeabi_dsub+0x312>
    494c:	e07f      	b.n	4a4e <__aeabi_dsub+0x412>
    494e:	2240      	movs	r2, #64	; 0x40
    4950:	1ad3      	subs	r3, r2, r3
    4952:	409d      	lsls	r5, r3
    4954:	432f      	orrs	r7, r5
    4956:	1e7d      	subs	r5, r7, #1
    4958:	41af      	sbcs	r7, r5
    495a:	2400      	movs	r4, #0
    495c:	430f      	orrs	r7, r1
    495e:	2600      	movs	r6, #0
    4960:	e78e      	b.n	4880 <__aeabi_dsub+0x244>
    4962:	002b      	movs	r3, r5
    4964:	000f      	movs	r7, r1
    4966:	3b20      	subs	r3, #32
    4968:	40df      	lsrs	r7, r3
    496a:	2d20      	cmp	r5, #32
    496c:	d071      	beq.n	4a52 <__aeabi_dsub+0x416>
    496e:	2340      	movs	r3, #64	; 0x40
    4970:	1b5d      	subs	r5, r3, r5
    4972:	40a9      	lsls	r1, r5
    4974:	430a      	orrs	r2, r1
    4976:	1e51      	subs	r1, r2, #1
    4978:	418a      	sbcs	r2, r1
    497a:	2100      	movs	r1, #0
    497c:	4317      	orrs	r7, r2
    497e:	e6af      	b.n	46e0 <__aeabi_dsub+0xa4>
    4980:	000007ff 	.word	0x000007ff
    4984:	ff7fffff 	.word	0xff7fffff
    4988:	800fffff 	.word	0x800fffff
    498c:	2e00      	cmp	r6, #0
    498e:	d03e      	beq.n	4a0e <__aeabi_dsub+0x3d2>
    4990:	4eb3      	ldr	r6, [pc, #716]	; (4c60 <__aeabi_dsub+0x624>)
    4992:	45b4      	cmp	ip, r6
    4994:	d045      	beq.n	4a22 <__aeabi_dsub+0x3e6>
    4996:	2680      	movs	r6, #128	; 0x80
    4998:	0436      	lsls	r6, r6, #16
    499a:	426d      	negs	r5, r5
    499c:	4334      	orrs	r4, r6
    499e:	2d38      	cmp	r5, #56	; 0x38
    49a0:	dd00      	ble.n	49a4 <__aeabi_dsub+0x368>
    49a2:	e0a8      	b.n	4af6 <__aeabi_dsub+0x4ba>
    49a4:	2d1f      	cmp	r5, #31
    49a6:	dd00      	ble.n	49aa <__aeabi_dsub+0x36e>
    49a8:	e11f      	b.n	4bea <__aeabi_dsub+0x5ae>
    49aa:	2620      	movs	r6, #32
    49ac:	0027      	movs	r7, r4
    49ae:	4650      	mov	r0, sl
    49b0:	1b76      	subs	r6, r6, r5
    49b2:	40b7      	lsls	r7, r6
    49b4:	40e8      	lsrs	r0, r5
    49b6:	4307      	orrs	r7, r0
    49b8:	4650      	mov	r0, sl
    49ba:	40b0      	lsls	r0, r6
    49bc:	1e46      	subs	r6, r0, #1
    49be:	41b0      	sbcs	r0, r6
    49c0:	40ec      	lsrs	r4, r5
    49c2:	4338      	orrs	r0, r7
    49c4:	1a17      	subs	r7, r2, r0
    49c6:	42ba      	cmp	r2, r7
    49c8:	4192      	sbcs	r2, r2
    49ca:	1b0c      	subs	r4, r1, r4
    49cc:	4252      	negs	r2, r2
    49ce:	1aa4      	subs	r4, r4, r2
    49d0:	4666      	mov	r6, ip
    49d2:	4698      	mov	r8, r3
    49d4:	e68b      	b.n	46ee <__aeabi_dsub+0xb2>
    49d6:	4664      	mov	r4, ip
    49d8:	4667      	mov	r7, ip
    49da:	432c      	orrs	r4, r5
    49dc:	d000      	beq.n	49e0 <__aeabi_dsub+0x3a4>
    49de:	e68b      	b.n	46f8 <__aeabi_dsub+0xbc>
    49e0:	2500      	movs	r5, #0
    49e2:	2600      	movs	r6, #0
    49e4:	2700      	movs	r7, #0
    49e6:	e6ea      	b.n	47be <__aeabi_dsub+0x182>
    49e8:	001e      	movs	r6, r3
    49ea:	e6ad      	b.n	4748 <__aeabi_dsub+0x10c>
    49ec:	2b1f      	cmp	r3, #31
    49ee:	dc60      	bgt.n	4ab2 <__aeabi_dsub+0x476>
    49f0:	2720      	movs	r7, #32
    49f2:	1af8      	subs	r0, r7, r3
    49f4:	000f      	movs	r7, r1
    49f6:	4684      	mov	ip, r0
    49f8:	4087      	lsls	r7, r0
    49fa:	0010      	movs	r0, r2
    49fc:	40d8      	lsrs	r0, r3
    49fe:	4307      	orrs	r7, r0
    4a00:	4660      	mov	r0, ip
    4a02:	4082      	lsls	r2, r0
    4a04:	1e50      	subs	r0, r2, #1
    4a06:	4182      	sbcs	r2, r0
    4a08:	40d9      	lsrs	r1, r3
    4a0a:	4317      	orrs	r7, r2
    4a0c:	e6f5      	b.n	47fa <__aeabi_dsub+0x1be>
    4a0e:	0026      	movs	r6, r4
    4a10:	4650      	mov	r0, sl
    4a12:	4306      	orrs	r6, r0
    4a14:	d005      	beq.n	4a22 <__aeabi_dsub+0x3e6>
    4a16:	43ed      	mvns	r5, r5
    4a18:	2d00      	cmp	r5, #0
    4a1a:	d0d3      	beq.n	49c4 <__aeabi_dsub+0x388>
    4a1c:	4e90      	ldr	r6, [pc, #576]	; (4c60 <__aeabi_dsub+0x624>)
    4a1e:	45b4      	cmp	ip, r6
    4a20:	d1bd      	bne.n	499e <__aeabi_dsub+0x362>
    4a22:	000c      	movs	r4, r1
    4a24:	0017      	movs	r7, r2
    4a26:	4666      	mov	r6, ip
    4a28:	4698      	mov	r8, r3
    4a2a:	e68d      	b.n	4748 <__aeabi_dsub+0x10c>
    4a2c:	488c      	ldr	r0, [pc, #560]	; (4c60 <__aeabi_dsub+0x624>)
    4a2e:	4283      	cmp	r3, r0
    4a30:	d00b      	beq.n	4a4a <__aeabi_dsub+0x40e>
    4a32:	4663      	mov	r3, ip
    4a34:	e6d9      	b.n	47ea <__aeabi_dsub+0x1ae>
    4a36:	2d00      	cmp	r5, #0
    4a38:	d000      	beq.n	4a3c <__aeabi_dsub+0x400>
    4a3a:	e096      	b.n	4b6a <__aeabi_dsub+0x52e>
    4a3c:	0008      	movs	r0, r1
    4a3e:	4310      	orrs	r0, r2
    4a40:	d100      	bne.n	4a44 <__aeabi_dsub+0x408>
    4a42:	e0e2      	b.n	4c0a <__aeabi_dsub+0x5ce>
    4a44:	000c      	movs	r4, r1
    4a46:	0017      	movs	r7, r2
    4a48:	4698      	mov	r8, r3
    4a4a:	4e85      	ldr	r6, [pc, #532]	; (4c60 <__aeabi_dsub+0x624>)
    4a4c:	e67c      	b.n	4748 <__aeabi_dsub+0x10c>
    4a4e:	2500      	movs	r5, #0
    4a50:	e780      	b.n	4954 <__aeabi_dsub+0x318>
    4a52:	2100      	movs	r1, #0
    4a54:	e78e      	b.n	4974 <__aeabi_dsub+0x338>
    4a56:	0023      	movs	r3, r4
    4a58:	4650      	mov	r0, sl
    4a5a:	4303      	orrs	r3, r0
    4a5c:	2e00      	cmp	r6, #0
    4a5e:	d000      	beq.n	4a62 <__aeabi_dsub+0x426>
    4a60:	e0a8      	b.n	4bb4 <__aeabi_dsub+0x578>
    4a62:	2b00      	cmp	r3, #0
    4a64:	d100      	bne.n	4a68 <__aeabi_dsub+0x42c>
    4a66:	e0de      	b.n	4c26 <__aeabi_dsub+0x5ea>
    4a68:	000b      	movs	r3, r1
    4a6a:	4313      	orrs	r3, r2
    4a6c:	d100      	bne.n	4a70 <__aeabi_dsub+0x434>
    4a6e:	e66b      	b.n	4748 <__aeabi_dsub+0x10c>
    4a70:	4452      	add	r2, sl
    4a72:	4552      	cmp	r2, sl
    4a74:	4180      	sbcs	r0, r0
    4a76:	1864      	adds	r4, r4, r1
    4a78:	4240      	negs	r0, r0
    4a7a:	1824      	adds	r4, r4, r0
    4a7c:	0017      	movs	r7, r2
    4a7e:	0223      	lsls	r3, r4, #8
    4a80:	d400      	bmi.n	4a84 <__aeabi_dsub+0x448>
    4a82:	e6fd      	b.n	4880 <__aeabi_dsub+0x244>
    4a84:	4b77      	ldr	r3, [pc, #476]	; (4c64 <__aeabi_dsub+0x628>)
    4a86:	4666      	mov	r6, ip
    4a88:	401c      	ands	r4, r3
    4a8a:	e65d      	b.n	4748 <__aeabi_dsub+0x10c>
    4a8c:	0025      	movs	r5, r4
    4a8e:	4650      	mov	r0, sl
    4a90:	4305      	orrs	r5, r0
    4a92:	2e00      	cmp	r6, #0
    4a94:	d1cf      	bne.n	4a36 <__aeabi_dsub+0x3fa>
    4a96:	2d00      	cmp	r5, #0
    4a98:	d14f      	bne.n	4b3a <__aeabi_dsub+0x4fe>
    4a9a:	000c      	movs	r4, r1
    4a9c:	4314      	orrs	r4, r2
    4a9e:	d100      	bne.n	4aa2 <__aeabi_dsub+0x466>
    4aa0:	e0a0      	b.n	4be4 <__aeabi_dsub+0x5a8>
    4aa2:	000c      	movs	r4, r1
    4aa4:	0017      	movs	r7, r2
    4aa6:	4698      	mov	r8, r3
    4aa8:	e64e      	b.n	4748 <__aeabi_dsub+0x10c>
    4aaa:	4666      	mov	r6, ip
    4aac:	2400      	movs	r4, #0
    4aae:	2700      	movs	r7, #0
    4ab0:	e685      	b.n	47be <__aeabi_dsub+0x182>
    4ab2:	001f      	movs	r7, r3
    4ab4:	0008      	movs	r0, r1
    4ab6:	3f20      	subs	r7, #32
    4ab8:	40f8      	lsrs	r0, r7
    4aba:	0007      	movs	r7, r0
    4abc:	2b20      	cmp	r3, #32
    4abe:	d100      	bne.n	4ac2 <__aeabi_dsub+0x486>
    4ac0:	e08e      	b.n	4be0 <__aeabi_dsub+0x5a4>
    4ac2:	2040      	movs	r0, #64	; 0x40
    4ac4:	1ac3      	subs	r3, r0, r3
    4ac6:	4099      	lsls	r1, r3
    4ac8:	430a      	orrs	r2, r1
    4aca:	1e51      	subs	r1, r2, #1
    4acc:	418a      	sbcs	r2, r1
    4ace:	2100      	movs	r1, #0
    4ad0:	4317      	orrs	r7, r2
    4ad2:	e692      	b.n	47fa <__aeabi_dsub+0x1be>
    4ad4:	2e00      	cmp	r6, #0
    4ad6:	d114      	bne.n	4b02 <__aeabi_dsub+0x4c6>
    4ad8:	0026      	movs	r6, r4
    4ada:	4650      	mov	r0, sl
    4adc:	4306      	orrs	r6, r0
    4ade:	d062      	beq.n	4ba6 <__aeabi_dsub+0x56a>
    4ae0:	43db      	mvns	r3, r3
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d15c      	bne.n	4ba0 <__aeabi_dsub+0x564>
    4ae6:	1887      	adds	r7, r0, r2
    4ae8:	4297      	cmp	r7, r2
    4aea:	4192      	sbcs	r2, r2
    4aec:	1864      	adds	r4, r4, r1
    4aee:	4252      	negs	r2, r2
    4af0:	18a4      	adds	r4, r4, r2
    4af2:	4666      	mov	r6, ip
    4af4:	e687      	b.n	4806 <__aeabi_dsub+0x1ca>
    4af6:	4650      	mov	r0, sl
    4af8:	4320      	orrs	r0, r4
    4afa:	1e44      	subs	r4, r0, #1
    4afc:	41a0      	sbcs	r0, r4
    4afe:	2400      	movs	r4, #0
    4b00:	e760      	b.n	49c4 <__aeabi_dsub+0x388>
    4b02:	4e57      	ldr	r6, [pc, #348]	; (4c60 <__aeabi_dsub+0x624>)
    4b04:	45b4      	cmp	ip, r6
    4b06:	d04e      	beq.n	4ba6 <__aeabi_dsub+0x56a>
    4b08:	2680      	movs	r6, #128	; 0x80
    4b0a:	0436      	lsls	r6, r6, #16
    4b0c:	425b      	negs	r3, r3
    4b0e:	4334      	orrs	r4, r6
    4b10:	2b38      	cmp	r3, #56	; 0x38
    4b12:	dd00      	ble.n	4b16 <__aeabi_dsub+0x4da>
    4b14:	e07f      	b.n	4c16 <__aeabi_dsub+0x5da>
    4b16:	2b1f      	cmp	r3, #31
    4b18:	dd00      	ble.n	4b1c <__aeabi_dsub+0x4e0>
    4b1a:	e08b      	b.n	4c34 <__aeabi_dsub+0x5f8>
    4b1c:	2620      	movs	r6, #32
    4b1e:	0027      	movs	r7, r4
    4b20:	4650      	mov	r0, sl
    4b22:	1af6      	subs	r6, r6, r3
    4b24:	40b7      	lsls	r7, r6
    4b26:	40d8      	lsrs	r0, r3
    4b28:	4307      	orrs	r7, r0
    4b2a:	4650      	mov	r0, sl
    4b2c:	40b0      	lsls	r0, r6
    4b2e:	1e46      	subs	r6, r0, #1
    4b30:	41b0      	sbcs	r0, r6
    4b32:	4307      	orrs	r7, r0
    4b34:	40dc      	lsrs	r4, r3
    4b36:	18bf      	adds	r7, r7, r2
    4b38:	e7d6      	b.n	4ae8 <__aeabi_dsub+0x4ac>
    4b3a:	000d      	movs	r5, r1
    4b3c:	4315      	orrs	r5, r2
    4b3e:	d100      	bne.n	4b42 <__aeabi_dsub+0x506>
    4b40:	e602      	b.n	4748 <__aeabi_dsub+0x10c>
    4b42:	4650      	mov	r0, sl
    4b44:	1a80      	subs	r0, r0, r2
    4b46:	4582      	cmp	sl, r0
    4b48:	41bf      	sbcs	r7, r7
    4b4a:	1a65      	subs	r5, r4, r1
    4b4c:	427f      	negs	r7, r7
    4b4e:	1bed      	subs	r5, r5, r7
    4b50:	4684      	mov	ip, r0
    4b52:	0228      	lsls	r0, r5, #8
    4b54:	d400      	bmi.n	4b58 <__aeabi_dsub+0x51c>
    4b56:	e68d      	b.n	4874 <__aeabi_dsub+0x238>
    4b58:	4650      	mov	r0, sl
    4b5a:	1a17      	subs	r7, r2, r0
    4b5c:	42ba      	cmp	r2, r7
    4b5e:	4192      	sbcs	r2, r2
    4b60:	1b0c      	subs	r4, r1, r4
    4b62:	4252      	negs	r2, r2
    4b64:	1aa4      	subs	r4, r4, r2
    4b66:	4698      	mov	r8, r3
    4b68:	e5ee      	b.n	4748 <__aeabi_dsub+0x10c>
    4b6a:	000d      	movs	r5, r1
    4b6c:	4315      	orrs	r5, r2
    4b6e:	d100      	bne.n	4b72 <__aeabi_dsub+0x536>
    4b70:	e76b      	b.n	4a4a <__aeabi_dsub+0x40e>
    4b72:	4650      	mov	r0, sl
    4b74:	0767      	lsls	r7, r4, #29
    4b76:	08c0      	lsrs	r0, r0, #3
    4b78:	4307      	orrs	r7, r0
    4b7a:	2080      	movs	r0, #128	; 0x80
    4b7c:	08e4      	lsrs	r4, r4, #3
    4b7e:	0300      	lsls	r0, r0, #12
    4b80:	4204      	tst	r4, r0
    4b82:	d007      	beq.n	4b94 <__aeabi_dsub+0x558>
    4b84:	08cd      	lsrs	r5, r1, #3
    4b86:	4205      	tst	r5, r0
    4b88:	d104      	bne.n	4b94 <__aeabi_dsub+0x558>
    4b8a:	002c      	movs	r4, r5
    4b8c:	4698      	mov	r8, r3
    4b8e:	08d7      	lsrs	r7, r2, #3
    4b90:	0749      	lsls	r1, r1, #29
    4b92:	430f      	orrs	r7, r1
    4b94:	0f7b      	lsrs	r3, r7, #29
    4b96:	00e4      	lsls	r4, r4, #3
    4b98:	431c      	orrs	r4, r3
    4b9a:	00ff      	lsls	r7, r7, #3
    4b9c:	4e30      	ldr	r6, [pc, #192]	; (4c60 <__aeabi_dsub+0x624>)
    4b9e:	e5d3      	b.n	4748 <__aeabi_dsub+0x10c>
    4ba0:	4e2f      	ldr	r6, [pc, #188]	; (4c60 <__aeabi_dsub+0x624>)
    4ba2:	45b4      	cmp	ip, r6
    4ba4:	d1b4      	bne.n	4b10 <__aeabi_dsub+0x4d4>
    4ba6:	000c      	movs	r4, r1
    4ba8:	0017      	movs	r7, r2
    4baa:	4666      	mov	r6, ip
    4bac:	e5cc      	b.n	4748 <__aeabi_dsub+0x10c>
    4bae:	2700      	movs	r7, #0
    4bb0:	2400      	movs	r4, #0
    4bb2:	e5e8      	b.n	4786 <__aeabi_dsub+0x14a>
    4bb4:	2b00      	cmp	r3, #0
    4bb6:	d039      	beq.n	4c2c <__aeabi_dsub+0x5f0>
    4bb8:	000b      	movs	r3, r1
    4bba:	4313      	orrs	r3, r2
    4bbc:	d100      	bne.n	4bc0 <__aeabi_dsub+0x584>
    4bbe:	e744      	b.n	4a4a <__aeabi_dsub+0x40e>
    4bc0:	08c0      	lsrs	r0, r0, #3
    4bc2:	0767      	lsls	r7, r4, #29
    4bc4:	4307      	orrs	r7, r0
    4bc6:	2080      	movs	r0, #128	; 0x80
    4bc8:	08e4      	lsrs	r4, r4, #3
    4bca:	0300      	lsls	r0, r0, #12
    4bcc:	4204      	tst	r4, r0
    4bce:	d0e1      	beq.n	4b94 <__aeabi_dsub+0x558>
    4bd0:	08cb      	lsrs	r3, r1, #3
    4bd2:	4203      	tst	r3, r0
    4bd4:	d1de      	bne.n	4b94 <__aeabi_dsub+0x558>
    4bd6:	08d7      	lsrs	r7, r2, #3
    4bd8:	0749      	lsls	r1, r1, #29
    4bda:	430f      	orrs	r7, r1
    4bdc:	001c      	movs	r4, r3
    4bde:	e7d9      	b.n	4b94 <__aeabi_dsub+0x558>
    4be0:	2100      	movs	r1, #0
    4be2:	e771      	b.n	4ac8 <__aeabi_dsub+0x48c>
    4be4:	2500      	movs	r5, #0
    4be6:	2700      	movs	r7, #0
    4be8:	e5e9      	b.n	47be <__aeabi_dsub+0x182>
    4bea:	002e      	movs	r6, r5
    4bec:	0027      	movs	r7, r4
    4bee:	3e20      	subs	r6, #32
    4bf0:	40f7      	lsrs	r7, r6
    4bf2:	2d20      	cmp	r5, #32
    4bf4:	d02f      	beq.n	4c56 <__aeabi_dsub+0x61a>
    4bf6:	2640      	movs	r6, #64	; 0x40
    4bf8:	1b75      	subs	r5, r6, r5
    4bfa:	40ac      	lsls	r4, r5
    4bfc:	4650      	mov	r0, sl
    4bfe:	4320      	orrs	r0, r4
    4c00:	1e44      	subs	r4, r0, #1
    4c02:	41a0      	sbcs	r0, r4
    4c04:	2400      	movs	r4, #0
    4c06:	4338      	orrs	r0, r7
    4c08:	e6dc      	b.n	49c4 <__aeabi_dsub+0x388>
    4c0a:	2480      	movs	r4, #128	; 0x80
    4c0c:	2500      	movs	r5, #0
    4c0e:	0324      	lsls	r4, r4, #12
    4c10:	4e13      	ldr	r6, [pc, #76]	; (4c60 <__aeabi_dsub+0x624>)
    4c12:	2700      	movs	r7, #0
    4c14:	e5d3      	b.n	47be <__aeabi_dsub+0x182>
    4c16:	4650      	mov	r0, sl
    4c18:	4320      	orrs	r0, r4
    4c1a:	0007      	movs	r7, r0
    4c1c:	1e78      	subs	r0, r7, #1
    4c1e:	4187      	sbcs	r7, r0
    4c20:	2400      	movs	r4, #0
    4c22:	18bf      	adds	r7, r7, r2
    4c24:	e760      	b.n	4ae8 <__aeabi_dsub+0x4ac>
    4c26:	000c      	movs	r4, r1
    4c28:	0017      	movs	r7, r2
    4c2a:	e58d      	b.n	4748 <__aeabi_dsub+0x10c>
    4c2c:	000c      	movs	r4, r1
    4c2e:	0017      	movs	r7, r2
    4c30:	4e0b      	ldr	r6, [pc, #44]	; (4c60 <__aeabi_dsub+0x624>)
    4c32:	e589      	b.n	4748 <__aeabi_dsub+0x10c>
    4c34:	001e      	movs	r6, r3
    4c36:	0027      	movs	r7, r4
    4c38:	3e20      	subs	r6, #32
    4c3a:	40f7      	lsrs	r7, r6
    4c3c:	2b20      	cmp	r3, #32
    4c3e:	d00c      	beq.n	4c5a <__aeabi_dsub+0x61e>
    4c40:	2640      	movs	r6, #64	; 0x40
    4c42:	1af3      	subs	r3, r6, r3
    4c44:	409c      	lsls	r4, r3
    4c46:	4650      	mov	r0, sl
    4c48:	4320      	orrs	r0, r4
    4c4a:	1e44      	subs	r4, r0, #1
    4c4c:	41a0      	sbcs	r0, r4
    4c4e:	4307      	orrs	r7, r0
    4c50:	2400      	movs	r4, #0
    4c52:	18bf      	adds	r7, r7, r2
    4c54:	e748      	b.n	4ae8 <__aeabi_dsub+0x4ac>
    4c56:	2400      	movs	r4, #0
    4c58:	e7d0      	b.n	4bfc <__aeabi_dsub+0x5c0>
    4c5a:	2400      	movs	r4, #0
    4c5c:	e7f3      	b.n	4c46 <__aeabi_dsub+0x60a>
    4c5e:	46c0      	nop			; (mov r8, r8)
    4c60:	000007ff 	.word	0x000007ff
    4c64:	ff7fffff 	.word	0xff7fffff

00004c68 <__aeabi_d2iz>:
    4c68:	b530      	push	{r4, r5, lr}
    4c6a:	4d13      	ldr	r5, [pc, #76]	; (4cb8 <__aeabi_d2iz+0x50>)
    4c6c:	030a      	lsls	r2, r1, #12
    4c6e:	004b      	lsls	r3, r1, #1
    4c70:	0b12      	lsrs	r2, r2, #12
    4c72:	0d5b      	lsrs	r3, r3, #21
    4c74:	0fc9      	lsrs	r1, r1, #31
    4c76:	2400      	movs	r4, #0
    4c78:	42ab      	cmp	r3, r5
    4c7a:	dd10      	ble.n	4c9e <__aeabi_d2iz+0x36>
    4c7c:	4c0f      	ldr	r4, [pc, #60]	; (4cbc <__aeabi_d2iz+0x54>)
    4c7e:	42a3      	cmp	r3, r4
    4c80:	dc0f      	bgt.n	4ca2 <__aeabi_d2iz+0x3a>
    4c82:	2480      	movs	r4, #128	; 0x80
    4c84:	4d0e      	ldr	r5, [pc, #56]	; (4cc0 <__aeabi_d2iz+0x58>)
    4c86:	0364      	lsls	r4, r4, #13
    4c88:	4322      	orrs	r2, r4
    4c8a:	1aed      	subs	r5, r5, r3
    4c8c:	2d1f      	cmp	r5, #31
    4c8e:	dd0b      	ble.n	4ca8 <__aeabi_d2iz+0x40>
    4c90:	480c      	ldr	r0, [pc, #48]	; (4cc4 <__aeabi_d2iz+0x5c>)
    4c92:	1ac3      	subs	r3, r0, r3
    4c94:	40da      	lsrs	r2, r3
    4c96:	4254      	negs	r4, r2
    4c98:	2900      	cmp	r1, #0
    4c9a:	d100      	bne.n	4c9e <__aeabi_d2iz+0x36>
    4c9c:	0014      	movs	r4, r2
    4c9e:	0020      	movs	r0, r4
    4ca0:	bd30      	pop	{r4, r5, pc}
    4ca2:	4b09      	ldr	r3, [pc, #36]	; (4cc8 <__aeabi_d2iz+0x60>)
    4ca4:	18cc      	adds	r4, r1, r3
    4ca6:	e7fa      	b.n	4c9e <__aeabi_d2iz+0x36>
    4ca8:	4c08      	ldr	r4, [pc, #32]	; (4ccc <__aeabi_d2iz+0x64>)
    4caa:	40e8      	lsrs	r0, r5
    4cac:	46a4      	mov	ip, r4
    4cae:	4463      	add	r3, ip
    4cb0:	409a      	lsls	r2, r3
    4cb2:	4302      	orrs	r2, r0
    4cb4:	e7ef      	b.n	4c96 <__aeabi_d2iz+0x2e>
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	000003fe 	.word	0x000003fe
    4cbc:	0000041d 	.word	0x0000041d
    4cc0:	00000433 	.word	0x00000433
    4cc4:	00000413 	.word	0x00000413
    4cc8:	7fffffff 	.word	0x7fffffff
    4ccc:	fffffbed 	.word	0xfffffbed

00004cd0 <__aeabi_i2d>:
    4cd0:	b570      	push	{r4, r5, r6, lr}
    4cd2:	2800      	cmp	r0, #0
    4cd4:	d030      	beq.n	4d38 <__aeabi_i2d+0x68>
    4cd6:	17c3      	asrs	r3, r0, #31
    4cd8:	18c4      	adds	r4, r0, r3
    4cda:	405c      	eors	r4, r3
    4cdc:	0fc5      	lsrs	r5, r0, #31
    4cde:	0020      	movs	r0, r4
    4ce0:	f000 f838 	bl	4d54 <__clzsi2>
    4ce4:	4b17      	ldr	r3, [pc, #92]	; (4d44 <__aeabi_i2d+0x74>)
    4ce6:	4a18      	ldr	r2, [pc, #96]	; (4d48 <__aeabi_i2d+0x78>)
    4ce8:	1a1b      	subs	r3, r3, r0
    4cea:	1ad2      	subs	r2, r2, r3
    4cec:	2a1f      	cmp	r2, #31
    4cee:	dd18      	ble.n	4d22 <__aeabi_i2d+0x52>
    4cf0:	4a16      	ldr	r2, [pc, #88]	; (4d4c <__aeabi_i2d+0x7c>)
    4cf2:	1ad2      	subs	r2, r2, r3
    4cf4:	4094      	lsls	r4, r2
    4cf6:	2200      	movs	r2, #0
    4cf8:	0324      	lsls	r4, r4, #12
    4cfa:	055b      	lsls	r3, r3, #21
    4cfc:	0b24      	lsrs	r4, r4, #12
    4cfe:	0d5b      	lsrs	r3, r3, #21
    4d00:	2100      	movs	r1, #0
    4d02:	0010      	movs	r0, r2
    4d04:	0324      	lsls	r4, r4, #12
    4d06:	0d0a      	lsrs	r2, r1, #20
    4d08:	0b24      	lsrs	r4, r4, #12
    4d0a:	0512      	lsls	r2, r2, #20
    4d0c:	4322      	orrs	r2, r4
    4d0e:	4c10      	ldr	r4, [pc, #64]	; (4d50 <__aeabi_i2d+0x80>)
    4d10:	051b      	lsls	r3, r3, #20
    4d12:	4022      	ands	r2, r4
    4d14:	4313      	orrs	r3, r2
    4d16:	005b      	lsls	r3, r3, #1
    4d18:	07ed      	lsls	r5, r5, #31
    4d1a:	085b      	lsrs	r3, r3, #1
    4d1c:	432b      	orrs	r3, r5
    4d1e:	0019      	movs	r1, r3
    4d20:	bd70      	pop	{r4, r5, r6, pc}
    4d22:	0021      	movs	r1, r4
    4d24:	4091      	lsls	r1, r2
    4d26:	000a      	movs	r2, r1
    4d28:	210b      	movs	r1, #11
    4d2a:	1a08      	subs	r0, r1, r0
    4d2c:	40c4      	lsrs	r4, r0
    4d2e:	055b      	lsls	r3, r3, #21
    4d30:	0324      	lsls	r4, r4, #12
    4d32:	0b24      	lsrs	r4, r4, #12
    4d34:	0d5b      	lsrs	r3, r3, #21
    4d36:	e7e3      	b.n	4d00 <__aeabi_i2d+0x30>
    4d38:	2500      	movs	r5, #0
    4d3a:	2300      	movs	r3, #0
    4d3c:	2400      	movs	r4, #0
    4d3e:	2200      	movs	r2, #0
    4d40:	e7de      	b.n	4d00 <__aeabi_i2d+0x30>
    4d42:	46c0      	nop			; (mov r8, r8)
    4d44:	0000041e 	.word	0x0000041e
    4d48:	00000433 	.word	0x00000433
    4d4c:	00000413 	.word	0x00000413
    4d50:	800fffff 	.word	0x800fffff

00004d54 <__clzsi2>:
    4d54:	211c      	movs	r1, #28
    4d56:	2301      	movs	r3, #1
    4d58:	041b      	lsls	r3, r3, #16
    4d5a:	4298      	cmp	r0, r3
    4d5c:	d301      	bcc.n	4d62 <__clzsi2+0xe>
    4d5e:	0c00      	lsrs	r0, r0, #16
    4d60:	3910      	subs	r1, #16
    4d62:	0a1b      	lsrs	r3, r3, #8
    4d64:	4298      	cmp	r0, r3
    4d66:	d301      	bcc.n	4d6c <__clzsi2+0x18>
    4d68:	0a00      	lsrs	r0, r0, #8
    4d6a:	3908      	subs	r1, #8
    4d6c:	091b      	lsrs	r3, r3, #4
    4d6e:	4298      	cmp	r0, r3
    4d70:	d301      	bcc.n	4d76 <__clzsi2+0x22>
    4d72:	0900      	lsrs	r0, r0, #4
    4d74:	3904      	subs	r1, #4
    4d76:	a202      	add	r2, pc, #8	; (adr r2, 4d80 <__clzsi2+0x2c>)
    4d78:	5c10      	ldrb	r0, [r2, r0]
    4d7a:	1840      	adds	r0, r0, r1
    4d7c:	4770      	bx	lr
    4d7e:	46c0      	nop			; (mov r8, r8)
    4d80:	02020304 	.word	0x02020304
    4d84:	01010101 	.word	0x01010101
	...

00004d90 <__libc_init_array>:
    4d90:	b570      	push	{r4, r5, r6, lr}
    4d92:	2600      	movs	r6, #0
    4d94:	4d0c      	ldr	r5, [pc, #48]	; (4dc8 <__libc_init_array+0x38>)
    4d96:	4c0d      	ldr	r4, [pc, #52]	; (4dcc <__libc_init_array+0x3c>)
    4d98:	1b64      	subs	r4, r4, r5
    4d9a:	10a4      	asrs	r4, r4, #2
    4d9c:	42a6      	cmp	r6, r4
    4d9e:	d109      	bne.n	4db4 <__libc_init_array+0x24>
    4da0:	2600      	movs	r6, #0
    4da2:	f001 f995 	bl	60d0 <_init>
    4da6:	4d0a      	ldr	r5, [pc, #40]	; (4dd0 <__libc_init_array+0x40>)
    4da8:	4c0a      	ldr	r4, [pc, #40]	; (4dd4 <__libc_init_array+0x44>)
    4daa:	1b64      	subs	r4, r4, r5
    4dac:	10a4      	asrs	r4, r4, #2
    4dae:	42a6      	cmp	r6, r4
    4db0:	d105      	bne.n	4dbe <__libc_init_array+0x2e>
    4db2:	bd70      	pop	{r4, r5, r6, pc}
    4db4:	00b3      	lsls	r3, r6, #2
    4db6:	58eb      	ldr	r3, [r5, r3]
    4db8:	4798      	blx	r3
    4dba:	3601      	adds	r6, #1
    4dbc:	e7ee      	b.n	4d9c <__libc_init_array+0xc>
    4dbe:	00b3      	lsls	r3, r6, #2
    4dc0:	58eb      	ldr	r3, [r5, r3]
    4dc2:	4798      	blx	r3
    4dc4:	3601      	adds	r6, #1
    4dc6:	e7f2      	b.n	4dae <__libc_init_array+0x1e>
    4dc8:	000060dc 	.word	0x000060dc
    4dcc:	000060dc 	.word	0x000060dc
    4dd0:	000060dc 	.word	0x000060dc
    4dd4:	000060e0 	.word	0x000060e0

00004dd8 <memcpy>:
    4dd8:	2300      	movs	r3, #0
    4dda:	b510      	push	{r4, lr}
    4ddc:	429a      	cmp	r2, r3
    4dde:	d100      	bne.n	4de2 <memcpy+0xa>
    4de0:	bd10      	pop	{r4, pc}
    4de2:	5ccc      	ldrb	r4, [r1, r3]
    4de4:	54c4      	strb	r4, [r0, r3]
    4de6:	3301      	adds	r3, #1
    4de8:	e7f8      	b.n	4ddc <memcpy+0x4>

00004dea <memset>:
    4dea:	0003      	movs	r3, r0
    4dec:	1882      	adds	r2, r0, r2
    4dee:	4293      	cmp	r3, r2
    4df0:	d100      	bne.n	4df4 <memset+0xa>
    4df2:	4770      	bx	lr
    4df4:	7019      	strb	r1, [r3, #0]
    4df6:	3301      	adds	r3, #1
    4df8:	e7f9      	b.n	4dee <memset+0x4>

00004dfa <setbuf>:
    4dfa:	424a      	negs	r2, r1
    4dfc:	414a      	adcs	r2, r1
    4dfe:	2380      	movs	r3, #128	; 0x80
    4e00:	b510      	push	{r4, lr}
    4e02:	0052      	lsls	r2, r2, #1
    4e04:	00db      	lsls	r3, r3, #3
    4e06:	f000 f801 	bl	4e0c <setvbuf>
    4e0a:	bd10      	pop	{r4, pc}

00004e0c <setvbuf>:
    4e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e0e:	001d      	movs	r5, r3
    4e10:	4b4f      	ldr	r3, [pc, #316]	; (4f50 <setvbuf+0x144>)
    4e12:	b085      	sub	sp, #20
    4e14:	681e      	ldr	r6, [r3, #0]
    4e16:	0004      	movs	r4, r0
    4e18:	000f      	movs	r7, r1
    4e1a:	9200      	str	r2, [sp, #0]
    4e1c:	2e00      	cmp	r6, #0
    4e1e:	d005      	beq.n	4e2c <setvbuf+0x20>
    4e20:	69b3      	ldr	r3, [r6, #24]
    4e22:	2b00      	cmp	r3, #0
    4e24:	d102      	bne.n	4e2c <setvbuf+0x20>
    4e26:	0030      	movs	r0, r6
    4e28:	f000 f9b6 	bl	5198 <__sinit>
    4e2c:	4b49      	ldr	r3, [pc, #292]	; (4f54 <setvbuf+0x148>)
    4e2e:	429c      	cmp	r4, r3
    4e30:	d150      	bne.n	4ed4 <setvbuf+0xc8>
    4e32:	6874      	ldr	r4, [r6, #4]
    4e34:	9b00      	ldr	r3, [sp, #0]
    4e36:	2b02      	cmp	r3, #2
    4e38:	d005      	beq.n	4e46 <setvbuf+0x3a>
    4e3a:	2b01      	cmp	r3, #1
    4e3c:	d900      	bls.n	4e40 <setvbuf+0x34>
    4e3e:	e084      	b.n	4f4a <setvbuf+0x13e>
    4e40:	2d00      	cmp	r5, #0
    4e42:	da00      	bge.n	4e46 <setvbuf+0x3a>
    4e44:	e081      	b.n	4f4a <setvbuf+0x13e>
    4e46:	0021      	movs	r1, r4
    4e48:	0030      	movs	r0, r6
    4e4a:	f000 f937 	bl	50bc <_fflush_r>
    4e4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4e50:	2900      	cmp	r1, #0
    4e52:	d008      	beq.n	4e66 <setvbuf+0x5a>
    4e54:	0023      	movs	r3, r4
    4e56:	3344      	adds	r3, #68	; 0x44
    4e58:	4299      	cmp	r1, r3
    4e5a:	d002      	beq.n	4e62 <setvbuf+0x56>
    4e5c:	0030      	movs	r0, r6
    4e5e:	f000 fa63 	bl	5328 <_free_r>
    4e62:	2300      	movs	r3, #0
    4e64:	6363      	str	r3, [r4, #52]	; 0x34
    4e66:	2300      	movs	r3, #0
    4e68:	61a3      	str	r3, [r4, #24]
    4e6a:	6063      	str	r3, [r4, #4]
    4e6c:	89a3      	ldrh	r3, [r4, #12]
    4e6e:	061b      	lsls	r3, r3, #24
    4e70:	d503      	bpl.n	4e7a <setvbuf+0x6e>
    4e72:	6921      	ldr	r1, [r4, #16]
    4e74:	0030      	movs	r0, r6
    4e76:	f000 fa57 	bl	5328 <_free_r>
    4e7a:	89a3      	ldrh	r3, [r4, #12]
    4e7c:	4a36      	ldr	r2, [pc, #216]	; (4f58 <setvbuf+0x14c>)
    4e7e:	4013      	ands	r3, r2
    4e80:	81a3      	strh	r3, [r4, #12]
    4e82:	9b00      	ldr	r3, [sp, #0]
    4e84:	2b02      	cmp	r3, #2
    4e86:	d05a      	beq.n	4f3e <setvbuf+0x132>
    4e88:	ab03      	add	r3, sp, #12
    4e8a:	aa02      	add	r2, sp, #8
    4e8c:	0021      	movs	r1, r4
    4e8e:	0030      	movs	r0, r6
    4e90:	f000 fa18 	bl	52c4 <__swhatbuf_r>
    4e94:	89a3      	ldrh	r3, [r4, #12]
    4e96:	4318      	orrs	r0, r3
    4e98:	81a0      	strh	r0, [r4, #12]
    4e9a:	2d00      	cmp	r5, #0
    4e9c:	d124      	bne.n	4ee8 <setvbuf+0xdc>
    4e9e:	9d02      	ldr	r5, [sp, #8]
    4ea0:	0028      	movs	r0, r5
    4ea2:	f000 fa37 	bl	5314 <malloc>
    4ea6:	9501      	str	r5, [sp, #4]
    4ea8:	1e07      	subs	r7, r0, #0
    4eaa:	d142      	bne.n	4f32 <setvbuf+0x126>
    4eac:	9b02      	ldr	r3, [sp, #8]
    4eae:	9301      	str	r3, [sp, #4]
    4eb0:	42ab      	cmp	r3, r5
    4eb2:	d139      	bne.n	4f28 <setvbuf+0x11c>
    4eb4:	2001      	movs	r0, #1
    4eb6:	4240      	negs	r0, r0
    4eb8:	2302      	movs	r3, #2
    4eba:	89a2      	ldrh	r2, [r4, #12]
    4ebc:	4313      	orrs	r3, r2
    4ebe:	81a3      	strh	r3, [r4, #12]
    4ec0:	2300      	movs	r3, #0
    4ec2:	60a3      	str	r3, [r4, #8]
    4ec4:	0023      	movs	r3, r4
    4ec6:	3347      	adds	r3, #71	; 0x47
    4ec8:	6023      	str	r3, [r4, #0]
    4eca:	6123      	str	r3, [r4, #16]
    4ecc:	2301      	movs	r3, #1
    4ece:	6163      	str	r3, [r4, #20]
    4ed0:	b005      	add	sp, #20
    4ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ed4:	4b21      	ldr	r3, [pc, #132]	; (4f5c <setvbuf+0x150>)
    4ed6:	429c      	cmp	r4, r3
    4ed8:	d101      	bne.n	4ede <setvbuf+0xd2>
    4eda:	68b4      	ldr	r4, [r6, #8]
    4edc:	e7aa      	b.n	4e34 <setvbuf+0x28>
    4ede:	4b20      	ldr	r3, [pc, #128]	; (4f60 <setvbuf+0x154>)
    4ee0:	429c      	cmp	r4, r3
    4ee2:	d1a7      	bne.n	4e34 <setvbuf+0x28>
    4ee4:	68f4      	ldr	r4, [r6, #12]
    4ee6:	e7a5      	b.n	4e34 <setvbuf+0x28>
    4ee8:	2f00      	cmp	r7, #0
    4eea:	d0d9      	beq.n	4ea0 <setvbuf+0x94>
    4eec:	69b3      	ldr	r3, [r6, #24]
    4eee:	2b00      	cmp	r3, #0
    4ef0:	d102      	bne.n	4ef8 <setvbuf+0xec>
    4ef2:	0030      	movs	r0, r6
    4ef4:	f000 f950 	bl	5198 <__sinit>
    4ef8:	9b00      	ldr	r3, [sp, #0]
    4efa:	2b01      	cmp	r3, #1
    4efc:	d103      	bne.n	4f06 <setvbuf+0xfa>
    4efe:	89a3      	ldrh	r3, [r4, #12]
    4f00:	9a00      	ldr	r2, [sp, #0]
    4f02:	431a      	orrs	r2, r3
    4f04:	81a2      	strh	r2, [r4, #12]
    4f06:	2008      	movs	r0, #8
    4f08:	89a3      	ldrh	r3, [r4, #12]
    4f0a:	6027      	str	r7, [r4, #0]
    4f0c:	6127      	str	r7, [r4, #16]
    4f0e:	6165      	str	r5, [r4, #20]
    4f10:	4018      	ands	r0, r3
    4f12:	d018      	beq.n	4f46 <setvbuf+0x13a>
    4f14:	2001      	movs	r0, #1
    4f16:	4018      	ands	r0, r3
    4f18:	2300      	movs	r3, #0
    4f1a:	4298      	cmp	r0, r3
    4f1c:	d011      	beq.n	4f42 <setvbuf+0x136>
    4f1e:	426d      	negs	r5, r5
    4f20:	60a3      	str	r3, [r4, #8]
    4f22:	61a5      	str	r5, [r4, #24]
    4f24:	0018      	movs	r0, r3
    4f26:	e7d3      	b.n	4ed0 <setvbuf+0xc4>
    4f28:	9801      	ldr	r0, [sp, #4]
    4f2a:	f000 f9f3 	bl	5314 <malloc>
    4f2e:	1e07      	subs	r7, r0, #0
    4f30:	d0c0      	beq.n	4eb4 <setvbuf+0xa8>
    4f32:	2380      	movs	r3, #128	; 0x80
    4f34:	89a2      	ldrh	r2, [r4, #12]
    4f36:	9d01      	ldr	r5, [sp, #4]
    4f38:	4313      	orrs	r3, r2
    4f3a:	81a3      	strh	r3, [r4, #12]
    4f3c:	e7d6      	b.n	4eec <setvbuf+0xe0>
    4f3e:	2000      	movs	r0, #0
    4f40:	e7ba      	b.n	4eb8 <setvbuf+0xac>
    4f42:	60a5      	str	r5, [r4, #8]
    4f44:	e7c4      	b.n	4ed0 <setvbuf+0xc4>
    4f46:	60a0      	str	r0, [r4, #8]
    4f48:	e7c2      	b.n	4ed0 <setvbuf+0xc4>
    4f4a:	2001      	movs	r0, #1
    4f4c:	4240      	negs	r0, r0
    4f4e:	e7bf      	b.n	4ed0 <setvbuf+0xc4>
    4f50:	20000024 	.word	0x20000024
    4f54:	0000605c 	.word	0x0000605c
    4f58:	fffff35c 	.word	0xfffff35c
    4f5c:	0000607c 	.word	0x0000607c
    4f60:	0000603c 	.word	0x0000603c

00004f64 <siprintf>:
    4f64:	b40e      	push	{r1, r2, r3}
    4f66:	b510      	push	{r4, lr}
    4f68:	b09d      	sub	sp, #116	; 0x74
    4f6a:	a902      	add	r1, sp, #8
    4f6c:	9002      	str	r0, [sp, #8]
    4f6e:	6108      	str	r0, [r1, #16]
    4f70:	480b      	ldr	r0, [pc, #44]	; (4fa0 <siprintf+0x3c>)
    4f72:	2482      	movs	r4, #130	; 0x82
    4f74:	6088      	str	r0, [r1, #8]
    4f76:	6148      	str	r0, [r1, #20]
    4f78:	2001      	movs	r0, #1
    4f7a:	4240      	negs	r0, r0
    4f7c:	ab1f      	add	r3, sp, #124	; 0x7c
    4f7e:	81c8      	strh	r0, [r1, #14]
    4f80:	4808      	ldr	r0, [pc, #32]	; (4fa4 <siprintf+0x40>)
    4f82:	cb04      	ldmia	r3!, {r2}
    4f84:	00a4      	lsls	r4, r4, #2
    4f86:	6800      	ldr	r0, [r0, #0]
    4f88:	9301      	str	r3, [sp, #4]
    4f8a:	818c      	strh	r4, [r1, #12]
    4f8c:	f000 fad6 	bl	553c <_svfiprintf_r>
    4f90:	2300      	movs	r3, #0
    4f92:	9a02      	ldr	r2, [sp, #8]
    4f94:	7013      	strb	r3, [r2, #0]
    4f96:	b01d      	add	sp, #116	; 0x74
    4f98:	bc10      	pop	{r4}
    4f9a:	bc08      	pop	{r3}
    4f9c:	b003      	add	sp, #12
    4f9e:	4718      	bx	r3
    4fa0:	7fffffff 	.word	0x7fffffff
    4fa4:	20000024 	.word	0x20000024

00004fa8 <__sflush_r>:
    4fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4faa:	898a      	ldrh	r2, [r1, #12]
    4fac:	0005      	movs	r5, r0
    4fae:	000c      	movs	r4, r1
    4fb0:	0713      	lsls	r3, r2, #28
    4fb2:	d460      	bmi.n	5076 <__sflush_r+0xce>
    4fb4:	684b      	ldr	r3, [r1, #4]
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	dc04      	bgt.n	4fc4 <__sflush_r+0x1c>
    4fba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4fbc:	2b00      	cmp	r3, #0
    4fbe:	dc01      	bgt.n	4fc4 <__sflush_r+0x1c>
    4fc0:	2000      	movs	r0, #0
    4fc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4fc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4fc6:	2f00      	cmp	r7, #0
    4fc8:	d0fa      	beq.n	4fc0 <__sflush_r+0x18>
    4fca:	2300      	movs	r3, #0
    4fcc:	682e      	ldr	r6, [r5, #0]
    4fce:	602b      	str	r3, [r5, #0]
    4fd0:	2380      	movs	r3, #128	; 0x80
    4fd2:	015b      	lsls	r3, r3, #5
    4fd4:	401a      	ands	r2, r3
    4fd6:	d034      	beq.n	5042 <__sflush_r+0x9a>
    4fd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4fda:	89a3      	ldrh	r3, [r4, #12]
    4fdc:	075b      	lsls	r3, r3, #29
    4fde:	d506      	bpl.n	4fee <__sflush_r+0x46>
    4fe0:	6863      	ldr	r3, [r4, #4]
    4fe2:	1ac0      	subs	r0, r0, r3
    4fe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	d001      	beq.n	4fee <__sflush_r+0x46>
    4fea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4fec:	1ac0      	subs	r0, r0, r3
    4fee:	0002      	movs	r2, r0
    4ff0:	6a21      	ldr	r1, [r4, #32]
    4ff2:	2300      	movs	r3, #0
    4ff4:	0028      	movs	r0, r5
    4ff6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4ff8:	47b8      	blx	r7
    4ffa:	89a1      	ldrh	r1, [r4, #12]
    4ffc:	1c43      	adds	r3, r0, #1
    4ffe:	d106      	bne.n	500e <__sflush_r+0x66>
    5000:	682b      	ldr	r3, [r5, #0]
    5002:	2b1d      	cmp	r3, #29
    5004:	d831      	bhi.n	506a <__sflush_r+0xc2>
    5006:	4a2c      	ldr	r2, [pc, #176]	; (50b8 <__sflush_r+0x110>)
    5008:	40da      	lsrs	r2, r3
    500a:	07d3      	lsls	r3, r2, #31
    500c:	d52d      	bpl.n	506a <__sflush_r+0xc2>
    500e:	2300      	movs	r3, #0
    5010:	6063      	str	r3, [r4, #4]
    5012:	6923      	ldr	r3, [r4, #16]
    5014:	6023      	str	r3, [r4, #0]
    5016:	04cb      	lsls	r3, r1, #19
    5018:	d505      	bpl.n	5026 <__sflush_r+0x7e>
    501a:	1c43      	adds	r3, r0, #1
    501c:	d102      	bne.n	5024 <__sflush_r+0x7c>
    501e:	682b      	ldr	r3, [r5, #0]
    5020:	2b00      	cmp	r3, #0
    5022:	d100      	bne.n	5026 <__sflush_r+0x7e>
    5024:	6560      	str	r0, [r4, #84]	; 0x54
    5026:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5028:	602e      	str	r6, [r5, #0]
    502a:	2900      	cmp	r1, #0
    502c:	d0c8      	beq.n	4fc0 <__sflush_r+0x18>
    502e:	0023      	movs	r3, r4
    5030:	3344      	adds	r3, #68	; 0x44
    5032:	4299      	cmp	r1, r3
    5034:	d002      	beq.n	503c <__sflush_r+0x94>
    5036:	0028      	movs	r0, r5
    5038:	f000 f976 	bl	5328 <_free_r>
    503c:	2000      	movs	r0, #0
    503e:	6360      	str	r0, [r4, #52]	; 0x34
    5040:	e7bf      	b.n	4fc2 <__sflush_r+0x1a>
    5042:	2301      	movs	r3, #1
    5044:	6a21      	ldr	r1, [r4, #32]
    5046:	0028      	movs	r0, r5
    5048:	47b8      	blx	r7
    504a:	1c43      	adds	r3, r0, #1
    504c:	d1c5      	bne.n	4fda <__sflush_r+0x32>
    504e:	682b      	ldr	r3, [r5, #0]
    5050:	2b00      	cmp	r3, #0
    5052:	d0c2      	beq.n	4fda <__sflush_r+0x32>
    5054:	2b1d      	cmp	r3, #29
    5056:	d001      	beq.n	505c <__sflush_r+0xb4>
    5058:	2b16      	cmp	r3, #22
    505a:	d101      	bne.n	5060 <__sflush_r+0xb8>
    505c:	602e      	str	r6, [r5, #0]
    505e:	e7af      	b.n	4fc0 <__sflush_r+0x18>
    5060:	2340      	movs	r3, #64	; 0x40
    5062:	89a2      	ldrh	r2, [r4, #12]
    5064:	4313      	orrs	r3, r2
    5066:	81a3      	strh	r3, [r4, #12]
    5068:	e7ab      	b.n	4fc2 <__sflush_r+0x1a>
    506a:	2340      	movs	r3, #64	; 0x40
    506c:	430b      	orrs	r3, r1
    506e:	2001      	movs	r0, #1
    5070:	81a3      	strh	r3, [r4, #12]
    5072:	4240      	negs	r0, r0
    5074:	e7a5      	b.n	4fc2 <__sflush_r+0x1a>
    5076:	690f      	ldr	r7, [r1, #16]
    5078:	2f00      	cmp	r7, #0
    507a:	d0a1      	beq.n	4fc0 <__sflush_r+0x18>
    507c:	680b      	ldr	r3, [r1, #0]
    507e:	600f      	str	r7, [r1, #0]
    5080:	1bdb      	subs	r3, r3, r7
    5082:	9301      	str	r3, [sp, #4]
    5084:	2300      	movs	r3, #0
    5086:	0792      	lsls	r2, r2, #30
    5088:	d100      	bne.n	508c <__sflush_r+0xe4>
    508a:	694b      	ldr	r3, [r1, #20]
    508c:	60a3      	str	r3, [r4, #8]
    508e:	9b01      	ldr	r3, [sp, #4]
    5090:	2b00      	cmp	r3, #0
    5092:	dc00      	bgt.n	5096 <__sflush_r+0xee>
    5094:	e794      	b.n	4fc0 <__sflush_r+0x18>
    5096:	9b01      	ldr	r3, [sp, #4]
    5098:	003a      	movs	r2, r7
    509a:	6a21      	ldr	r1, [r4, #32]
    509c:	0028      	movs	r0, r5
    509e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    50a0:	47b0      	blx	r6
    50a2:	2800      	cmp	r0, #0
    50a4:	dc03      	bgt.n	50ae <__sflush_r+0x106>
    50a6:	2340      	movs	r3, #64	; 0x40
    50a8:	89a2      	ldrh	r2, [r4, #12]
    50aa:	4313      	orrs	r3, r2
    50ac:	e7df      	b.n	506e <__sflush_r+0xc6>
    50ae:	9b01      	ldr	r3, [sp, #4]
    50b0:	183f      	adds	r7, r7, r0
    50b2:	1a1b      	subs	r3, r3, r0
    50b4:	9301      	str	r3, [sp, #4]
    50b6:	e7ea      	b.n	508e <__sflush_r+0xe6>
    50b8:	20400001 	.word	0x20400001

000050bc <_fflush_r>:
    50bc:	690b      	ldr	r3, [r1, #16]
    50be:	b570      	push	{r4, r5, r6, lr}
    50c0:	0005      	movs	r5, r0
    50c2:	000c      	movs	r4, r1
    50c4:	2b00      	cmp	r3, #0
    50c6:	d101      	bne.n	50cc <_fflush_r+0x10>
    50c8:	2000      	movs	r0, #0
    50ca:	bd70      	pop	{r4, r5, r6, pc}
    50cc:	2800      	cmp	r0, #0
    50ce:	d004      	beq.n	50da <_fflush_r+0x1e>
    50d0:	6983      	ldr	r3, [r0, #24]
    50d2:	2b00      	cmp	r3, #0
    50d4:	d101      	bne.n	50da <_fflush_r+0x1e>
    50d6:	f000 f85f 	bl	5198 <__sinit>
    50da:	4b0b      	ldr	r3, [pc, #44]	; (5108 <_fflush_r+0x4c>)
    50dc:	429c      	cmp	r4, r3
    50de:	d109      	bne.n	50f4 <_fflush_r+0x38>
    50e0:	686c      	ldr	r4, [r5, #4]
    50e2:	220c      	movs	r2, #12
    50e4:	5ea3      	ldrsh	r3, [r4, r2]
    50e6:	2b00      	cmp	r3, #0
    50e8:	d0ee      	beq.n	50c8 <_fflush_r+0xc>
    50ea:	0021      	movs	r1, r4
    50ec:	0028      	movs	r0, r5
    50ee:	f7ff ff5b 	bl	4fa8 <__sflush_r>
    50f2:	e7ea      	b.n	50ca <_fflush_r+0xe>
    50f4:	4b05      	ldr	r3, [pc, #20]	; (510c <_fflush_r+0x50>)
    50f6:	429c      	cmp	r4, r3
    50f8:	d101      	bne.n	50fe <_fflush_r+0x42>
    50fa:	68ac      	ldr	r4, [r5, #8]
    50fc:	e7f1      	b.n	50e2 <_fflush_r+0x26>
    50fe:	4b04      	ldr	r3, [pc, #16]	; (5110 <_fflush_r+0x54>)
    5100:	429c      	cmp	r4, r3
    5102:	d1ee      	bne.n	50e2 <_fflush_r+0x26>
    5104:	68ec      	ldr	r4, [r5, #12]
    5106:	e7ec      	b.n	50e2 <_fflush_r+0x26>
    5108:	0000605c 	.word	0x0000605c
    510c:	0000607c 	.word	0x0000607c
    5110:	0000603c 	.word	0x0000603c

00005114 <_cleanup_r>:
    5114:	b510      	push	{r4, lr}
    5116:	4902      	ldr	r1, [pc, #8]	; (5120 <_cleanup_r+0xc>)
    5118:	f000 f8b2 	bl	5280 <_fwalk_reent>
    511c:	bd10      	pop	{r4, pc}
    511e:	46c0      	nop			; (mov r8, r8)
    5120:	000050bd 	.word	0x000050bd

00005124 <std.isra.0>:
    5124:	2300      	movs	r3, #0
    5126:	b510      	push	{r4, lr}
    5128:	0004      	movs	r4, r0
    512a:	6003      	str	r3, [r0, #0]
    512c:	6043      	str	r3, [r0, #4]
    512e:	6083      	str	r3, [r0, #8]
    5130:	8181      	strh	r1, [r0, #12]
    5132:	6643      	str	r3, [r0, #100]	; 0x64
    5134:	81c2      	strh	r2, [r0, #14]
    5136:	6103      	str	r3, [r0, #16]
    5138:	6143      	str	r3, [r0, #20]
    513a:	6183      	str	r3, [r0, #24]
    513c:	0019      	movs	r1, r3
    513e:	2208      	movs	r2, #8
    5140:	305c      	adds	r0, #92	; 0x5c
    5142:	f7ff fe52 	bl	4dea <memset>
    5146:	4b05      	ldr	r3, [pc, #20]	; (515c <std.isra.0+0x38>)
    5148:	6224      	str	r4, [r4, #32]
    514a:	6263      	str	r3, [r4, #36]	; 0x24
    514c:	4b04      	ldr	r3, [pc, #16]	; (5160 <std.isra.0+0x3c>)
    514e:	62a3      	str	r3, [r4, #40]	; 0x28
    5150:	4b04      	ldr	r3, [pc, #16]	; (5164 <std.isra.0+0x40>)
    5152:	62e3      	str	r3, [r4, #44]	; 0x2c
    5154:	4b04      	ldr	r3, [pc, #16]	; (5168 <std.isra.0+0x44>)
    5156:	6323      	str	r3, [r4, #48]	; 0x30
    5158:	bd10      	pop	{r4, pc}
    515a:	46c0      	nop			; (mov r8, r8)
    515c:	00005a79 	.word	0x00005a79
    5160:	00005aa1 	.word	0x00005aa1
    5164:	00005ad9 	.word	0x00005ad9
    5168:	00005b05 	.word	0x00005b05

0000516c <__sfmoreglue>:
    516c:	b570      	push	{r4, r5, r6, lr}
    516e:	2568      	movs	r5, #104	; 0x68
    5170:	1e4a      	subs	r2, r1, #1
    5172:	4355      	muls	r5, r2
    5174:	000e      	movs	r6, r1
    5176:	0029      	movs	r1, r5
    5178:	3174      	adds	r1, #116	; 0x74
    517a:	f000 f91f 	bl	53bc <_malloc_r>
    517e:	1e04      	subs	r4, r0, #0
    5180:	d008      	beq.n	5194 <__sfmoreglue+0x28>
    5182:	2100      	movs	r1, #0
    5184:	002a      	movs	r2, r5
    5186:	6001      	str	r1, [r0, #0]
    5188:	6046      	str	r6, [r0, #4]
    518a:	300c      	adds	r0, #12
    518c:	60a0      	str	r0, [r4, #8]
    518e:	3268      	adds	r2, #104	; 0x68
    5190:	f7ff fe2b 	bl	4dea <memset>
    5194:	0020      	movs	r0, r4
    5196:	bd70      	pop	{r4, r5, r6, pc}

00005198 <__sinit>:
    5198:	6983      	ldr	r3, [r0, #24]
    519a:	b513      	push	{r0, r1, r4, lr}
    519c:	0004      	movs	r4, r0
    519e:	2b00      	cmp	r3, #0
    51a0:	d128      	bne.n	51f4 <__sinit+0x5c>
    51a2:	6483      	str	r3, [r0, #72]	; 0x48
    51a4:	64c3      	str	r3, [r0, #76]	; 0x4c
    51a6:	6503      	str	r3, [r0, #80]	; 0x50
    51a8:	4b13      	ldr	r3, [pc, #76]	; (51f8 <__sinit+0x60>)
    51aa:	4a14      	ldr	r2, [pc, #80]	; (51fc <__sinit+0x64>)
    51ac:	681b      	ldr	r3, [r3, #0]
    51ae:	6282      	str	r2, [r0, #40]	; 0x28
    51b0:	9301      	str	r3, [sp, #4]
    51b2:	4298      	cmp	r0, r3
    51b4:	d101      	bne.n	51ba <__sinit+0x22>
    51b6:	2301      	movs	r3, #1
    51b8:	6183      	str	r3, [r0, #24]
    51ba:	0020      	movs	r0, r4
    51bc:	f000 f820 	bl	5200 <__sfp>
    51c0:	6060      	str	r0, [r4, #4]
    51c2:	0020      	movs	r0, r4
    51c4:	f000 f81c 	bl	5200 <__sfp>
    51c8:	60a0      	str	r0, [r4, #8]
    51ca:	0020      	movs	r0, r4
    51cc:	f000 f818 	bl	5200 <__sfp>
    51d0:	2200      	movs	r2, #0
    51d2:	60e0      	str	r0, [r4, #12]
    51d4:	2104      	movs	r1, #4
    51d6:	6860      	ldr	r0, [r4, #4]
    51d8:	f7ff ffa4 	bl	5124 <std.isra.0>
    51dc:	2201      	movs	r2, #1
    51de:	2109      	movs	r1, #9
    51e0:	68a0      	ldr	r0, [r4, #8]
    51e2:	f7ff ff9f 	bl	5124 <std.isra.0>
    51e6:	2202      	movs	r2, #2
    51e8:	2112      	movs	r1, #18
    51ea:	68e0      	ldr	r0, [r4, #12]
    51ec:	f7ff ff9a 	bl	5124 <std.isra.0>
    51f0:	2301      	movs	r3, #1
    51f2:	61a3      	str	r3, [r4, #24]
    51f4:	bd13      	pop	{r0, r1, r4, pc}
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	00006038 	.word	0x00006038
    51fc:	00005115 	.word	0x00005115

00005200 <__sfp>:
    5200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5202:	4b1e      	ldr	r3, [pc, #120]	; (527c <__sfp+0x7c>)
    5204:	0007      	movs	r7, r0
    5206:	681e      	ldr	r6, [r3, #0]
    5208:	69b3      	ldr	r3, [r6, #24]
    520a:	2b00      	cmp	r3, #0
    520c:	d102      	bne.n	5214 <__sfp+0x14>
    520e:	0030      	movs	r0, r6
    5210:	f7ff ffc2 	bl	5198 <__sinit>
    5214:	3648      	adds	r6, #72	; 0x48
    5216:	68b4      	ldr	r4, [r6, #8]
    5218:	6873      	ldr	r3, [r6, #4]
    521a:	3b01      	subs	r3, #1
    521c:	d504      	bpl.n	5228 <__sfp+0x28>
    521e:	6833      	ldr	r3, [r6, #0]
    5220:	2b00      	cmp	r3, #0
    5222:	d007      	beq.n	5234 <__sfp+0x34>
    5224:	6836      	ldr	r6, [r6, #0]
    5226:	e7f6      	b.n	5216 <__sfp+0x16>
    5228:	220c      	movs	r2, #12
    522a:	5ea5      	ldrsh	r5, [r4, r2]
    522c:	2d00      	cmp	r5, #0
    522e:	d00d      	beq.n	524c <__sfp+0x4c>
    5230:	3468      	adds	r4, #104	; 0x68
    5232:	e7f2      	b.n	521a <__sfp+0x1a>
    5234:	2104      	movs	r1, #4
    5236:	0038      	movs	r0, r7
    5238:	f7ff ff98 	bl	516c <__sfmoreglue>
    523c:	6030      	str	r0, [r6, #0]
    523e:	2800      	cmp	r0, #0
    5240:	d1f0      	bne.n	5224 <__sfp+0x24>
    5242:	230c      	movs	r3, #12
    5244:	0004      	movs	r4, r0
    5246:	603b      	str	r3, [r7, #0]
    5248:	0020      	movs	r0, r4
    524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    524c:	2301      	movs	r3, #1
    524e:	0020      	movs	r0, r4
    5250:	425b      	negs	r3, r3
    5252:	81e3      	strh	r3, [r4, #14]
    5254:	3302      	adds	r3, #2
    5256:	81a3      	strh	r3, [r4, #12]
    5258:	6665      	str	r5, [r4, #100]	; 0x64
    525a:	6025      	str	r5, [r4, #0]
    525c:	60a5      	str	r5, [r4, #8]
    525e:	6065      	str	r5, [r4, #4]
    5260:	6125      	str	r5, [r4, #16]
    5262:	6165      	str	r5, [r4, #20]
    5264:	61a5      	str	r5, [r4, #24]
    5266:	2208      	movs	r2, #8
    5268:	0029      	movs	r1, r5
    526a:	305c      	adds	r0, #92	; 0x5c
    526c:	f7ff fdbd 	bl	4dea <memset>
    5270:	6365      	str	r5, [r4, #52]	; 0x34
    5272:	63a5      	str	r5, [r4, #56]	; 0x38
    5274:	64a5      	str	r5, [r4, #72]	; 0x48
    5276:	64e5      	str	r5, [r4, #76]	; 0x4c
    5278:	e7e6      	b.n	5248 <__sfp+0x48>
    527a:	46c0      	nop			; (mov r8, r8)
    527c:	00006038 	.word	0x00006038

00005280 <_fwalk_reent>:
    5280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5282:	0004      	movs	r4, r0
    5284:	0007      	movs	r7, r0
    5286:	2600      	movs	r6, #0
    5288:	9101      	str	r1, [sp, #4]
    528a:	3448      	adds	r4, #72	; 0x48
    528c:	2c00      	cmp	r4, #0
    528e:	d101      	bne.n	5294 <_fwalk_reent+0x14>
    5290:	0030      	movs	r0, r6
    5292:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5294:	6863      	ldr	r3, [r4, #4]
    5296:	68a5      	ldr	r5, [r4, #8]
    5298:	9300      	str	r3, [sp, #0]
    529a:	9b00      	ldr	r3, [sp, #0]
    529c:	3b01      	subs	r3, #1
    529e:	9300      	str	r3, [sp, #0]
    52a0:	d501      	bpl.n	52a6 <_fwalk_reent+0x26>
    52a2:	6824      	ldr	r4, [r4, #0]
    52a4:	e7f2      	b.n	528c <_fwalk_reent+0xc>
    52a6:	89ab      	ldrh	r3, [r5, #12]
    52a8:	2b01      	cmp	r3, #1
    52aa:	d908      	bls.n	52be <_fwalk_reent+0x3e>
    52ac:	220e      	movs	r2, #14
    52ae:	5eab      	ldrsh	r3, [r5, r2]
    52b0:	3301      	adds	r3, #1
    52b2:	d004      	beq.n	52be <_fwalk_reent+0x3e>
    52b4:	0029      	movs	r1, r5
    52b6:	0038      	movs	r0, r7
    52b8:	9b01      	ldr	r3, [sp, #4]
    52ba:	4798      	blx	r3
    52bc:	4306      	orrs	r6, r0
    52be:	3568      	adds	r5, #104	; 0x68
    52c0:	e7eb      	b.n	529a <_fwalk_reent+0x1a>
	...

000052c4 <__swhatbuf_r>:
    52c4:	b570      	push	{r4, r5, r6, lr}
    52c6:	000e      	movs	r6, r1
    52c8:	001d      	movs	r5, r3
    52ca:	230e      	movs	r3, #14
    52cc:	5ec9      	ldrsh	r1, [r1, r3]
    52ce:	b090      	sub	sp, #64	; 0x40
    52d0:	0014      	movs	r4, r2
    52d2:	2900      	cmp	r1, #0
    52d4:	da07      	bge.n	52e6 <__swhatbuf_r+0x22>
    52d6:	2300      	movs	r3, #0
    52d8:	602b      	str	r3, [r5, #0]
    52da:	89b3      	ldrh	r3, [r6, #12]
    52dc:	061b      	lsls	r3, r3, #24
    52de:	d411      	bmi.n	5304 <__swhatbuf_r+0x40>
    52e0:	2380      	movs	r3, #128	; 0x80
    52e2:	00db      	lsls	r3, r3, #3
    52e4:	e00f      	b.n	5306 <__swhatbuf_r+0x42>
    52e6:	aa01      	add	r2, sp, #4
    52e8:	f000 fc38 	bl	5b5c <_fstat_r>
    52ec:	2800      	cmp	r0, #0
    52ee:	dbf2      	blt.n	52d6 <__swhatbuf_r+0x12>
    52f0:	22f0      	movs	r2, #240	; 0xf0
    52f2:	9b02      	ldr	r3, [sp, #8]
    52f4:	0212      	lsls	r2, r2, #8
    52f6:	4013      	ands	r3, r2
    52f8:	4a05      	ldr	r2, [pc, #20]	; (5310 <__swhatbuf_r+0x4c>)
    52fa:	189b      	adds	r3, r3, r2
    52fc:	425a      	negs	r2, r3
    52fe:	4153      	adcs	r3, r2
    5300:	602b      	str	r3, [r5, #0]
    5302:	e7ed      	b.n	52e0 <__swhatbuf_r+0x1c>
    5304:	2340      	movs	r3, #64	; 0x40
    5306:	2000      	movs	r0, #0
    5308:	6023      	str	r3, [r4, #0]
    530a:	b010      	add	sp, #64	; 0x40
    530c:	bd70      	pop	{r4, r5, r6, pc}
    530e:	46c0      	nop			; (mov r8, r8)
    5310:	ffffe000 	.word	0xffffe000

00005314 <malloc>:
    5314:	b510      	push	{r4, lr}
    5316:	4b03      	ldr	r3, [pc, #12]	; (5324 <malloc+0x10>)
    5318:	0001      	movs	r1, r0
    531a:	6818      	ldr	r0, [r3, #0]
    531c:	f000 f84e 	bl	53bc <_malloc_r>
    5320:	bd10      	pop	{r4, pc}
    5322:	46c0      	nop			; (mov r8, r8)
    5324:	20000024 	.word	0x20000024

00005328 <_free_r>:
    5328:	b570      	push	{r4, r5, r6, lr}
    532a:	0005      	movs	r5, r0
    532c:	2900      	cmp	r1, #0
    532e:	d010      	beq.n	5352 <_free_r+0x2a>
    5330:	1f0c      	subs	r4, r1, #4
    5332:	6823      	ldr	r3, [r4, #0]
    5334:	2b00      	cmp	r3, #0
    5336:	da00      	bge.n	533a <_free_r+0x12>
    5338:	18e4      	adds	r4, r4, r3
    533a:	0028      	movs	r0, r5
    533c:	f000 fc51 	bl	5be2 <__malloc_lock>
    5340:	4a1d      	ldr	r2, [pc, #116]	; (53b8 <_free_r+0x90>)
    5342:	6813      	ldr	r3, [r2, #0]
    5344:	2b00      	cmp	r3, #0
    5346:	d105      	bne.n	5354 <_free_r+0x2c>
    5348:	6063      	str	r3, [r4, #4]
    534a:	6014      	str	r4, [r2, #0]
    534c:	0028      	movs	r0, r5
    534e:	f000 fc49 	bl	5be4 <__malloc_unlock>
    5352:	bd70      	pop	{r4, r5, r6, pc}
    5354:	42a3      	cmp	r3, r4
    5356:	d909      	bls.n	536c <_free_r+0x44>
    5358:	6821      	ldr	r1, [r4, #0]
    535a:	1860      	adds	r0, r4, r1
    535c:	4283      	cmp	r3, r0
    535e:	d1f3      	bne.n	5348 <_free_r+0x20>
    5360:	6818      	ldr	r0, [r3, #0]
    5362:	685b      	ldr	r3, [r3, #4]
    5364:	1841      	adds	r1, r0, r1
    5366:	6021      	str	r1, [r4, #0]
    5368:	e7ee      	b.n	5348 <_free_r+0x20>
    536a:	0013      	movs	r3, r2
    536c:	685a      	ldr	r2, [r3, #4]
    536e:	2a00      	cmp	r2, #0
    5370:	d001      	beq.n	5376 <_free_r+0x4e>
    5372:	42a2      	cmp	r2, r4
    5374:	d9f9      	bls.n	536a <_free_r+0x42>
    5376:	6819      	ldr	r1, [r3, #0]
    5378:	1858      	adds	r0, r3, r1
    537a:	42a0      	cmp	r0, r4
    537c:	d10b      	bne.n	5396 <_free_r+0x6e>
    537e:	6820      	ldr	r0, [r4, #0]
    5380:	1809      	adds	r1, r1, r0
    5382:	1858      	adds	r0, r3, r1
    5384:	6019      	str	r1, [r3, #0]
    5386:	4282      	cmp	r2, r0
    5388:	d1e0      	bne.n	534c <_free_r+0x24>
    538a:	6810      	ldr	r0, [r2, #0]
    538c:	6852      	ldr	r2, [r2, #4]
    538e:	1841      	adds	r1, r0, r1
    5390:	6019      	str	r1, [r3, #0]
    5392:	605a      	str	r2, [r3, #4]
    5394:	e7da      	b.n	534c <_free_r+0x24>
    5396:	42a0      	cmp	r0, r4
    5398:	d902      	bls.n	53a0 <_free_r+0x78>
    539a:	230c      	movs	r3, #12
    539c:	602b      	str	r3, [r5, #0]
    539e:	e7d5      	b.n	534c <_free_r+0x24>
    53a0:	6821      	ldr	r1, [r4, #0]
    53a2:	1860      	adds	r0, r4, r1
    53a4:	4282      	cmp	r2, r0
    53a6:	d103      	bne.n	53b0 <_free_r+0x88>
    53a8:	6810      	ldr	r0, [r2, #0]
    53aa:	6852      	ldr	r2, [r2, #4]
    53ac:	1841      	adds	r1, r0, r1
    53ae:	6021      	str	r1, [r4, #0]
    53b0:	6062      	str	r2, [r4, #4]
    53b2:	605c      	str	r4, [r3, #4]
    53b4:	e7ca      	b.n	534c <_free_r+0x24>
    53b6:	46c0      	nop			; (mov r8, r8)
    53b8:	20000190 	.word	0x20000190

000053bc <_malloc_r>:
    53bc:	2303      	movs	r3, #3
    53be:	b570      	push	{r4, r5, r6, lr}
    53c0:	1ccd      	adds	r5, r1, #3
    53c2:	439d      	bics	r5, r3
    53c4:	3508      	adds	r5, #8
    53c6:	0006      	movs	r6, r0
    53c8:	2d0c      	cmp	r5, #12
    53ca:	d21e      	bcs.n	540a <_malloc_r+0x4e>
    53cc:	250c      	movs	r5, #12
    53ce:	42a9      	cmp	r1, r5
    53d0:	d81d      	bhi.n	540e <_malloc_r+0x52>
    53d2:	0030      	movs	r0, r6
    53d4:	f000 fc05 	bl	5be2 <__malloc_lock>
    53d8:	4a25      	ldr	r2, [pc, #148]	; (5470 <_malloc_r+0xb4>)
    53da:	6814      	ldr	r4, [r2, #0]
    53dc:	0021      	movs	r1, r4
    53de:	2900      	cmp	r1, #0
    53e0:	d119      	bne.n	5416 <_malloc_r+0x5a>
    53e2:	4c24      	ldr	r4, [pc, #144]	; (5474 <_malloc_r+0xb8>)
    53e4:	6823      	ldr	r3, [r4, #0]
    53e6:	2b00      	cmp	r3, #0
    53e8:	d103      	bne.n	53f2 <_malloc_r+0x36>
    53ea:	0030      	movs	r0, r6
    53ec:	f000 fb32 	bl	5a54 <_sbrk_r>
    53f0:	6020      	str	r0, [r4, #0]
    53f2:	0029      	movs	r1, r5
    53f4:	0030      	movs	r0, r6
    53f6:	f000 fb2d 	bl	5a54 <_sbrk_r>
    53fa:	1c43      	adds	r3, r0, #1
    53fc:	d12c      	bne.n	5458 <_malloc_r+0x9c>
    53fe:	230c      	movs	r3, #12
    5400:	0030      	movs	r0, r6
    5402:	6033      	str	r3, [r6, #0]
    5404:	f000 fbee 	bl	5be4 <__malloc_unlock>
    5408:	e003      	b.n	5412 <_malloc_r+0x56>
    540a:	2d00      	cmp	r5, #0
    540c:	dadf      	bge.n	53ce <_malloc_r+0x12>
    540e:	230c      	movs	r3, #12
    5410:	6033      	str	r3, [r6, #0]
    5412:	2000      	movs	r0, #0
    5414:	bd70      	pop	{r4, r5, r6, pc}
    5416:	680b      	ldr	r3, [r1, #0]
    5418:	1b5b      	subs	r3, r3, r5
    541a:	d41a      	bmi.n	5452 <_malloc_r+0x96>
    541c:	2b0b      	cmp	r3, #11
    541e:	d903      	bls.n	5428 <_malloc_r+0x6c>
    5420:	600b      	str	r3, [r1, #0]
    5422:	18cc      	adds	r4, r1, r3
    5424:	6025      	str	r5, [r4, #0]
    5426:	e003      	b.n	5430 <_malloc_r+0x74>
    5428:	428c      	cmp	r4, r1
    542a:	d10e      	bne.n	544a <_malloc_r+0x8e>
    542c:	6863      	ldr	r3, [r4, #4]
    542e:	6013      	str	r3, [r2, #0]
    5430:	0030      	movs	r0, r6
    5432:	f000 fbd7 	bl	5be4 <__malloc_unlock>
    5436:	0020      	movs	r0, r4
    5438:	2207      	movs	r2, #7
    543a:	300b      	adds	r0, #11
    543c:	1d23      	adds	r3, r4, #4
    543e:	4390      	bics	r0, r2
    5440:	1ac3      	subs	r3, r0, r3
    5442:	d0e7      	beq.n	5414 <_malloc_r+0x58>
    5444:	425a      	negs	r2, r3
    5446:	50e2      	str	r2, [r4, r3]
    5448:	e7e4      	b.n	5414 <_malloc_r+0x58>
    544a:	684b      	ldr	r3, [r1, #4]
    544c:	6063      	str	r3, [r4, #4]
    544e:	000c      	movs	r4, r1
    5450:	e7ee      	b.n	5430 <_malloc_r+0x74>
    5452:	000c      	movs	r4, r1
    5454:	6849      	ldr	r1, [r1, #4]
    5456:	e7c2      	b.n	53de <_malloc_r+0x22>
    5458:	2303      	movs	r3, #3
    545a:	1cc4      	adds	r4, r0, #3
    545c:	439c      	bics	r4, r3
    545e:	42a0      	cmp	r0, r4
    5460:	d0e0      	beq.n	5424 <_malloc_r+0x68>
    5462:	1a21      	subs	r1, r4, r0
    5464:	0030      	movs	r0, r6
    5466:	f000 faf5 	bl	5a54 <_sbrk_r>
    546a:	1c43      	adds	r3, r0, #1
    546c:	d1da      	bne.n	5424 <_malloc_r+0x68>
    546e:	e7c6      	b.n	53fe <_malloc_r+0x42>
    5470:	20000190 	.word	0x20000190
    5474:	20000194 	.word	0x20000194

00005478 <__ssputs_r>:
    5478:	b5f0      	push	{r4, r5, r6, r7, lr}
    547a:	688e      	ldr	r6, [r1, #8]
    547c:	b085      	sub	sp, #20
    547e:	0007      	movs	r7, r0
    5480:	000c      	movs	r4, r1
    5482:	9203      	str	r2, [sp, #12]
    5484:	9301      	str	r3, [sp, #4]
    5486:	429e      	cmp	r6, r3
    5488:	d839      	bhi.n	54fe <__ssputs_r+0x86>
    548a:	2390      	movs	r3, #144	; 0x90
    548c:	898a      	ldrh	r2, [r1, #12]
    548e:	00db      	lsls	r3, r3, #3
    5490:	421a      	tst	r2, r3
    5492:	d034      	beq.n	54fe <__ssputs_r+0x86>
    5494:	2503      	movs	r5, #3
    5496:	6909      	ldr	r1, [r1, #16]
    5498:	6823      	ldr	r3, [r4, #0]
    549a:	1a5b      	subs	r3, r3, r1
    549c:	9302      	str	r3, [sp, #8]
    549e:	6963      	ldr	r3, [r4, #20]
    54a0:	9802      	ldr	r0, [sp, #8]
    54a2:	435d      	muls	r5, r3
    54a4:	0feb      	lsrs	r3, r5, #31
    54a6:	195d      	adds	r5, r3, r5
    54a8:	9b01      	ldr	r3, [sp, #4]
    54aa:	106d      	asrs	r5, r5, #1
    54ac:	3301      	adds	r3, #1
    54ae:	181b      	adds	r3, r3, r0
    54b0:	42ab      	cmp	r3, r5
    54b2:	d900      	bls.n	54b6 <__ssputs_r+0x3e>
    54b4:	001d      	movs	r5, r3
    54b6:	0553      	lsls	r3, r2, #21
    54b8:	d532      	bpl.n	5520 <__ssputs_r+0xa8>
    54ba:	0029      	movs	r1, r5
    54bc:	0038      	movs	r0, r7
    54be:	f7ff ff7d 	bl	53bc <_malloc_r>
    54c2:	1e06      	subs	r6, r0, #0
    54c4:	d109      	bne.n	54da <__ssputs_r+0x62>
    54c6:	230c      	movs	r3, #12
    54c8:	603b      	str	r3, [r7, #0]
    54ca:	2340      	movs	r3, #64	; 0x40
    54cc:	2001      	movs	r0, #1
    54ce:	89a2      	ldrh	r2, [r4, #12]
    54d0:	4240      	negs	r0, r0
    54d2:	4313      	orrs	r3, r2
    54d4:	81a3      	strh	r3, [r4, #12]
    54d6:	b005      	add	sp, #20
    54d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54da:	9a02      	ldr	r2, [sp, #8]
    54dc:	6921      	ldr	r1, [r4, #16]
    54de:	f7ff fc7b 	bl	4dd8 <memcpy>
    54e2:	89a3      	ldrh	r3, [r4, #12]
    54e4:	4a14      	ldr	r2, [pc, #80]	; (5538 <__ssputs_r+0xc0>)
    54e6:	401a      	ands	r2, r3
    54e8:	2380      	movs	r3, #128	; 0x80
    54ea:	4313      	orrs	r3, r2
    54ec:	81a3      	strh	r3, [r4, #12]
    54ee:	9b02      	ldr	r3, [sp, #8]
    54f0:	6126      	str	r6, [r4, #16]
    54f2:	18f6      	adds	r6, r6, r3
    54f4:	6026      	str	r6, [r4, #0]
    54f6:	6165      	str	r5, [r4, #20]
    54f8:	9e01      	ldr	r6, [sp, #4]
    54fa:	1aed      	subs	r5, r5, r3
    54fc:	60a5      	str	r5, [r4, #8]
    54fe:	9b01      	ldr	r3, [sp, #4]
    5500:	42b3      	cmp	r3, r6
    5502:	d200      	bcs.n	5506 <__ssputs_r+0x8e>
    5504:	001e      	movs	r6, r3
    5506:	0032      	movs	r2, r6
    5508:	9903      	ldr	r1, [sp, #12]
    550a:	6820      	ldr	r0, [r4, #0]
    550c:	f000 fb57 	bl	5bbe <memmove>
    5510:	68a3      	ldr	r3, [r4, #8]
    5512:	2000      	movs	r0, #0
    5514:	1b9b      	subs	r3, r3, r6
    5516:	60a3      	str	r3, [r4, #8]
    5518:	6823      	ldr	r3, [r4, #0]
    551a:	199e      	adds	r6, r3, r6
    551c:	6026      	str	r6, [r4, #0]
    551e:	e7da      	b.n	54d6 <__ssputs_r+0x5e>
    5520:	002a      	movs	r2, r5
    5522:	0038      	movs	r0, r7
    5524:	f000 fb5f 	bl	5be6 <_realloc_r>
    5528:	1e06      	subs	r6, r0, #0
    552a:	d1e0      	bne.n	54ee <__ssputs_r+0x76>
    552c:	6921      	ldr	r1, [r4, #16]
    552e:	0038      	movs	r0, r7
    5530:	f7ff fefa 	bl	5328 <_free_r>
    5534:	e7c7      	b.n	54c6 <__ssputs_r+0x4e>
    5536:	46c0      	nop			; (mov r8, r8)
    5538:	fffffb7f 	.word	0xfffffb7f

0000553c <_svfiprintf_r>:
    553c:	b5f0      	push	{r4, r5, r6, r7, lr}
    553e:	b09f      	sub	sp, #124	; 0x7c
    5540:	9002      	str	r0, [sp, #8]
    5542:	9305      	str	r3, [sp, #20]
    5544:	898b      	ldrh	r3, [r1, #12]
    5546:	000f      	movs	r7, r1
    5548:	0016      	movs	r6, r2
    554a:	061b      	lsls	r3, r3, #24
    554c:	d511      	bpl.n	5572 <_svfiprintf_r+0x36>
    554e:	690b      	ldr	r3, [r1, #16]
    5550:	2b00      	cmp	r3, #0
    5552:	d10e      	bne.n	5572 <_svfiprintf_r+0x36>
    5554:	2140      	movs	r1, #64	; 0x40
    5556:	f7ff ff31 	bl	53bc <_malloc_r>
    555a:	6038      	str	r0, [r7, #0]
    555c:	6138      	str	r0, [r7, #16]
    555e:	2800      	cmp	r0, #0
    5560:	d105      	bne.n	556e <_svfiprintf_r+0x32>
    5562:	230c      	movs	r3, #12
    5564:	9a02      	ldr	r2, [sp, #8]
    5566:	3801      	subs	r0, #1
    5568:	6013      	str	r3, [r2, #0]
    556a:	b01f      	add	sp, #124	; 0x7c
    556c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    556e:	2340      	movs	r3, #64	; 0x40
    5570:	617b      	str	r3, [r7, #20]
    5572:	2300      	movs	r3, #0
    5574:	ad06      	add	r5, sp, #24
    5576:	616b      	str	r3, [r5, #20]
    5578:	3320      	adds	r3, #32
    557a:	766b      	strb	r3, [r5, #25]
    557c:	3310      	adds	r3, #16
    557e:	76ab      	strb	r3, [r5, #26]
    5580:	0034      	movs	r4, r6
    5582:	7823      	ldrb	r3, [r4, #0]
    5584:	2b00      	cmp	r3, #0
    5586:	d147      	bne.n	5618 <_svfiprintf_r+0xdc>
    5588:	1ba3      	subs	r3, r4, r6
    558a:	9304      	str	r3, [sp, #16]
    558c:	d00d      	beq.n	55aa <_svfiprintf_r+0x6e>
    558e:	1ba3      	subs	r3, r4, r6
    5590:	0032      	movs	r2, r6
    5592:	0039      	movs	r1, r7
    5594:	9802      	ldr	r0, [sp, #8]
    5596:	f7ff ff6f 	bl	5478 <__ssputs_r>
    559a:	1c43      	adds	r3, r0, #1
    559c:	d100      	bne.n	55a0 <_svfiprintf_r+0x64>
    559e:	e0b5      	b.n	570c <_svfiprintf_r+0x1d0>
    55a0:	696a      	ldr	r2, [r5, #20]
    55a2:	9b04      	ldr	r3, [sp, #16]
    55a4:	4694      	mov	ip, r2
    55a6:	4463      	add	r3, ip
    55a8:	616b      	str	r3, [r5, #20]
    55aa:	7823      	ldrb	r3, [r4, #0]
    55ac:	2b00      	cmp	r3, #0
    55ae:	d100      	bne.n	55b2 <_svfiprintf_r+0x76>
    55b0:	e0ac      	b.n	570c <_svfiprintf_r+0x1d0>
    55b2:	2201      	movs	r2, #1
    55b4:	2300      	movs	r3, #0
    55b6:	4252      	negs	r2, r2
    55b8:	606a      	str	r2, [r5, #4]
    55ba:	a902      	add	r1, sp, #8
    55bc:	3254      	adds	r2, #84	; 0x54
    55be:	1852      	adds	r2, r2, r1
    55c0:	3401      	adds	r4, #1
    55c2:	602b      	str	r3, [r5, #0]
    55c4:	60eb      	str	r3, [r5, #12]
    55c6:	60ab      	str	r3, [r5, #8]
    55c8:	7013      	strb	r3, [r2, #0]
    55ca:	65ab      	str	r3, [r5, #88]	; 0x58
    55cc:	4e58      	ldr	r6, [pc, #352]	; (5730 <_svfiprintf_r+0x1f4>)
    55ce:	2205      	movs	r2, #5
    55d0:	7821      	ldrb	r1, [r4, #0]
    55d2:	0030      	movs	r0, r6
    55d4:	f000 fae8 	bl	5ba8 <memchr>
    55d8:	1c62      	adds	r2, r4, #1
    55da:	2800      	cmp	r0, #0
    55dc:	d120      	bne.n	5620 <_svfiprintf_r+0xe4>
    55de:	6829      	ldr	r1, [r5, #0]
    55e0:	06cb      	lsls	r3, r1, #27
    55e2:	d504      	bpl.n	55ee <_svfiprintf_r+0xb2>
    55e4:	2353      	movs	r3, #83	; 0x53
    55e6:	ae02      	add	r6, sp, #8
    55e8:	3020      	adds	r0, #32
    55ea:	199b      	adds	r3, r3, r6
    55ec:	7018      	strb	r0, [r3, #0]
    55ee:	070b      	lsls	r3, r1, #28
    55f0:	d504      	bpl.n	55fc <_svfiprintf_r+0xc0>
    55f2:	2353      	movs	r3, #83	; 0x53
    55f4:	202b      	movs	r0, #43	; 0x2b
    55f6:	ae02      	add	r6, sp, #8
    55f8:	199b      	adds	r3, r3, r6
    55fa:	7018      	strb	r0, [r3, #0]
    55fc:	7823      	ldrb	r3, [r4, #0]
    55fe:	2b2a      	cmp	r3, #42	; 0x2a
    5600:	d016      	beq.n	5630 <_svfiprintf_r+0xf4>
    5602:	2000      	movs	r0, #0
    5604:	210a      	movs	r1, #10
    5606:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5608:	7822      	ldrb	r2, [r4, #0]
    560a:	3a30      	subs	r2, #48	; 0x30
    560c:	2a09      	cmp	r2, #9
    560e:	d955      	bls.n	56bc <_svfiprintf_r+0x180>
    5610:	2800      	cmp	r0, #0
    5612:	d015      	beq.n	5640 <_svfiprintf_r+0x104>
    5614:	9309      	str	r3, [sp, #36]	; 0x24
    5616:	e013      	b.n	5640 <_svfiprintf_r+0x104>
    5618:	2b25      	cmp	r3, #37	; 0x25
    561a:	d0b5      	beq.n	5588 <_svfiprintf_r+0x4c>
    561c:	3401      	adds	r4, #1
    561e:	e7b0      	b.n	5582 <_svfiprintf_r+0x46>
    5620:	2301      	movs	r3, #1
    5622:	1b80      	subs	r0, r0, r6
    5624:	4083      	lsls	r3, r0
    5626:	6829      	ldr	r1, [r5, #0]
    5628:	0014      	movs	r4, r2
    562a:	430b      	orrs	r3, r1
    562c:	602b      	str	r3, [r5, #0]
    562e:	e7cd      	b.n	55cc <_svfiprintf_r+0x90>
    5630:	9b05      	ldr	r3, [sp, #20]
    5632:	1d18      	adds	r0, r3, #4
    5634:	681b      	ldr	r3, [r3, #0]
    5636:	9005      	str	r0, [sp, #20]
    5638:	2b00      	cmp	r3, #0
    563a:	db39      	blt.n	56b0 <_svfiprintf_r+0x174>
    563c:	9309      	str	r3, [sp, #36]	; 0x24
    563e:	0014      	movs	r4, r2
    5640:	7823      	ldrb	r3, [r4, #0]
    5642:	2b2e      	cmp	r3, #46	; 0x2e
    5644:	d10b      	bne.n	565e <_svfiprintf_r+0x122>
    5646:	7863      	ldrb	r3, [r4, #1]
    5648:	1c62      	adds	r2, r4, #1
    564a:	2b2a      	cmp	r3, #42	; 0x2a
    564c:	d13e      	bne.n	56cc <_svfiprintf_r+0x190>
    564e:	9b05      	ldr	r3, [sp, #20]
    5650:	3402      	adds	r4, #2
    5652:	1d1a      	adds	r2, r3, #4
    5654:	681b      	ldr	r3, [r3, #0]
    5656:	9205      	str	r2, [sp, #20]
    5658:	2b00      	cmp	r3, #0
    565a:	db34      	blt.n	56c6 <_svfiprintf_r+0x18a>
    565c:	9307      	str	r3, [sp, #28]
    565e:	4e35      	ldr	r6, [pc, #212]	; (5734 <_svfiprintf_r+0x1f8>)
    5660:	7821      	ldrb	r1, [r4, #0]
    5662:	2203      	movs	r2, #3
    5664:	0030      	movs	r0, r6
    5666:	f000 fa9f 	bl	5ba8 <memchr>
    566a:	2800      	cmp	r0, #0
    566c:	d006      	beq.n	567c <_svfiprintf_r+0x140>
    566e:	2340      	movs	r3, #64	; 0x40
    5670:	1b80      	subs	r0, r0, r6
    5672:	4083      	lsls	r3, r0
    5674:	682a      	ldr	r2, [r5, #0]
    5676:	3401      	adds	r4, #1
    5678:	4313      	orrs	r3, r2
    567a:	602b      	str	r3, [r5, #0]
    567c:	7821      	ldrb	r1, [r4, #0]
    567e:	2206      	movs	r2, #6
    5680:	482d      	ldr	r0, [pc, #180]	; (5738 <_svfiprintf_r+0x1fc>)
    5682:	1c66      	adds	r6, r4, #1
    5684:	7629      	strb	r1, [r5, #24]
    5686:	f000 fa8f 	bl	5ba8 <memchr>
    568a:	2800      	cmp	r0, #0
    568c:	d046      	beq.n	571c <_svfiprintf_r+0x1e0>
    568e:	4b2b      	ldr	r3, [pc, #172]	; (573c <_svfiprintf_r+0x200>)
    5690:	2b00      	cmp	r3, #0
    5692:	d12f      	bne.n	56f4 <_svfiprintf_r+0x1b8>
    5694:	6829      	ldr	r1, [r5, #0]
    5696:	9b05      	ldr	r3, [sp, #20]
    5698:	2207      	movs	r2, #7
    569a:	05c9      	lsls	r1, r1, #23
    569c:	d528      	bpl.n	56f0 <_svfiprintf_r+0x1b4>
    569e:	189b      	adds	r3, r3, r2
    56a0:	4393      	bics	r3, r2
    56a2:	3308      	adds	r3, #8
    56a4:	9305      	str	r3, [sp, #20]
    56a6:	696b      	ldr	r3, [r5, #20]
    56a8:	9a03      	ldr	r2, [sp, #12]
    56aa:	189b      	adds	r3, r3, r2
    56ac:	616b      	str	r3, [r5, #20]
    56ae:	e767      	b.n	5580 <_svfiprintf_r+0x44>
    56b0:	425b      	negs	r3, r3
    56b2:	60eb      	str	r3, [r5, #12]
    56b4:	2302      	movs	r3, #2
    56b6:	430b      	orrs	r3, r1
    56b8:	602b      	str	r3, [r5, #0]
    56ba:	e7c0      	b.n	563e <_svfiprintf_r+0x102>
    56bc:	434b      	muls	r3, r1
    56be:	3401      	adds	r4, #1
    56c0:	189b      	adds	r3, r3, r2
    56c2:	2001      	movs	r0, #1
    56c4:	e7a0      	b.n	5608 <_svfiprintf_r+0xcc>
    56c6:	2301      	movs	r3, #1
    56c8:	425b      	negs	r3, r3
    56ca:	e7c7      	b.n	565c <_svfiprintf_r+0x120>
    56cc:	2300      	movs	r3, #0
    56ce:	0014      	movs	r4, r2
    56d0:	200a      	movs	r0, #10
    56d2:	001a      	movs	r2, r3
    56d4:	606b      	str	r3, [r5, #4]
    56d6:	7821      	ldrb	r1, [r4, #0]
    56d8:	3930      	subs	r1, #48	; 0x30
    56da:	2909      	cmp	r1, #9
    56dc:	d903      	bls.n	56e6 <_svfiprintf_r+0x1aa>
    56de:	2b00      	cmp	r3, #0
    56e0:	d0bd      	beq.n	565e <_svfiprintf_r+0x122>
    56e2:	9207      	str	r2, [sp, #28]
    56e4:	e7bb      	b.n	565e <_svfiprintf_r+0x122>
    56e6:	4342      	muls	r2, r0
    56e8:	3401      	adds	r4, #1
    56ea:	1852      	adds	r2, r2, r1
    56ec:	2301      	movs	r3, #1
    56ee:	e7f2      	b.n	56d6 <_svfiprintf_r+0x19a>
    56f0:	3307      	adds	r3, #7
    56f2:	e7d5      	b.n	56a0 <_svfiprintf_r+0x164>
    56f4:	ab05      	add	r3, sp, #20
    56f6:	9300      	str	r3, [sp, #0]
    56f8:	003a      	movs	r2, r7
    56fa:	4b11      	ldr	r3, [pc, #68]	; (5740 <_svfiprintf_r+0x204>)
    56fc:	0029      	movs	r1, r5
    56fe:	9802      	ldr	r0, [sp, #8]
    5700:	e000      	b.n	5704 <_svfiprintf_r+0x1c8>
    5702:	bf00      	nop
    5704:	9003      	str	r0, [sp, #12]
    5706:	9b03      	ldr	r3, [sp, #12]
    5708:	3301      	adds	r3, #1
    570a:	d1cc      	bne.n	56a6 <_svfiprintf_r+0x16a>
    570c:	89bb      	ldrh	r3, [r7, #12]
    570e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5710:	065b      	lsls	r3, r3, #25
    5712:	d400      	bmi.n	5716 <_svfiprintf_r+0x1da>
    5714:	e729      	b.n	556a <_svfiprintf_r+0x2e>
    5716:	2001      	movs	r0, #1
    5718:	4240      	negs	r0, r0
    571a:	e726      	b.n	556a <_svfiprintf_r+0x2e>
    571c:	ab05      	add	r3, sp, #20
    571e:	9300      	str	r3, [sp, #0]
    5720:	003a      	movs	r2, r7
    5722:	4b07      	ldr	r3, [pc, #28]	; (5740 <_svfiprintf_r+0x204>)
    5724:	0029      	movs	r1, r5
    5726:	9802      	ldr	r0, [sp, #8]
    5728:	f000 f87a 	bl	5820 <_printf_i>
    572c:	e7ea      	b.n	5704 <_svfiprintf_r+0x1c8>
    572e:	46c0      	nop			; (mov r8, r8)
    5730:	0000609c 	.word	0x0000609c
    5734:	000060a2 	.word	0x000060a2
    5738:	000060a6 	.word	0x000060a6
    573c:	00000000 	.word	0x00000000
    5740:	00005479 	.word	0x00005479

00005744 <_printf_common>:
    5744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5746:	0015      	movs	r5, r2
    5748:	9301      	str	r3, [sp, #4]
    574a:	688a      	ldr	r2, [r1, #8]
    574c:	690b      	ldr	r3, [r1, #16]
    574e:	9000      	str	r0, [sp, #0]
    5750:	000c      	movs	r4, r1
    5752:	4293      	cmp	r3, r2
    5754:	da00      	bge.n	5758 <_printf_common+0x14>
    5756:	0013      	movs	r3, r2
    5758:	0022      	movs	r2, r4
    575a:	602b      	str	r3, [r5, #0]
    575c:	3243      	adds	r2, #67	; 0x43
    575e:	7812      	ldrb	r2, [r2, #0]
    5760:	2a00      	cmp	r2, #0
    5762:	d001      	beq.n	5768 <_printf_common+0x24>
    5764:	3301      	adds	r3, #1
    5766:	602b      	str	r3, [r5, #0]
    5768:	6823      	ldr	r3, [r4, #0]
    576a:	069b      	lsls	r3, r3, #26
    576c:	d502      	bpl.n	5774 <_printf_common+0x30>
    576e:	682b      	ldr	r3, [r5, #0]
    5770:	3302      	adds	r3, #2
    5772:	602b      	str	r3, [r5, #0]
    5774:	2706      	movs	r7, #6
    5776:	6823      	ldr	r3, [r4, #0]
    5778:	401f      	ands	r7, r3
    577a:	d027      	beq.n	57cc <_printf_common+0x88>
    577c:	0023      	movs	r3, r4
    577e:	3343      	adds	r3, #67	; 0x43
    5780:	781b      	ldrb	r3, [r3, #0]
    5782:	1e5a      	subs	r2, r3, #1
    5784:	4193      	sbcs	r3, r2
    5786:	6822      	ldr	r2, [r4, #0]
    5788:	0692      	lsls	r2, r2, #26
    578a:	d430      	bmi.n	57ee <_printf_common+0xaa>
    578c:	0022      	movs	r2, r4
    578e:	9901      	ldr	r1, [sp, #4]
    5790:	3243      	adds	r2, #67	; 0x43
    5792:	9800      	ldr	r0, [sp, #0]
    5794:	9e08      	ldr	r6, [sp, #32]
    5796:	47b0      	blx	r6
    5798:	1c43      	adds	r3, r0, #1
    579a:	d025      	beq.n	57e8 <_printf_common+0xa4>
    579c:	2306      	movs	r3, #6
    579e:	6820      	ldr	r0, [r4, #0]
    57a0:	682a      	ldr	r2, [r5, #0]
    57a2:	68e1      	ldr	r1, [r4, #12]
    57a4:	4003      	ands	r3, r0
    57a6:	2500      	movs	r5, #0
    57a8:	2b04      	cmp	r3, #4
    57aa:	d103      	bne.n	57b4 <_printf_common+0x70>
    57ac:	1a8d      	subs	r5, r1, r2
    57ae:	43eb      	mvns	r3, r5
    57b0:	17db      	asrs	r3, r3, #31
    57b2:	401d      	ands	r5, r3
    57b4:	68a3      	ldr	r3, [r4, #8]
    57b6:	6922      	ldr	r2, [r4, #16]
    57b8:	4293      	cmp	r3, r2
    57ba:	dd01      	ble.n	57c0 <_printf_common+0x7c>
    57bc:	1a9b      	subs	r3, r3, r2
    57be:	18ed      	adds	r5, r5, r3
    57c0:	2700      	movs	r7, #0
    57c2:	42bd      	cmp	r5, r7
    57c4:	d120      	bne.n	5808 <_printf_common+0xc4>
    57c6:	2000      	movs	r0, #0
    57c8:	e010      	b.n	57ec <_printf_common+0xa8>
    57ca:	3701      	adds	r7, #1
    57cc:	68e3      	ldr	r3, [r4, #12]
    57ce:	682a      	ldr	r2, [r5, #0]
    57d0:	1a9b      	subs	r3, r3, r2
    57d2:	429f      	cmp	r7, r3
    57d4:	dad2      	bge.n	577c <_printf_common+0x38>
    57d6:	0022      	movs	r2, r4
    57d8:	2301      	movs	r3, #1
    57da:	3219      	adds	r2, #25
    57dc:	9901      	ldr	r1, [sp, #4]
    57de:	9800      	ldr	r0, [sp, #0]
    57e0:	9e08      	ldr	r6, [sp, #32]
    57e2:	47b0      	blx	r6
    57e4:	1c43      	adds	r3, r0, #1
    57e6:	d1f0      	bne.n	57ca <_printf_common+0x86>
    57e8:	2001      	movs	r0, #1
    57ea:	4240      	negs	r0, r0
    57ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    57ee:	2030      	movs	r0, #48	; 0x30
    57f0:	18e1      	adds	r1, r4, r3
    57f2:	3143      	adds	r1, #67	; 0x43
    57f4:	7008      	strb	r0, [r1, #0]
    57f6:	0021      	movs	r1, r4
    57f8:	1c5a      	adds	r2, r3, #1
    57fa:	3145      	adds	r1, #69	; 0x45
    57fc:	7809      	ldrb	r1, [r1, #0]
    57fe:	18a2      	adds	r2, r4, r2
    5800:	3243      	adds	r2, #67	; 0x43
    5802:	3302      	adds	r3, #2
    5804:	7011      	strb	r1, [r2, #0]
    5806:	e7c1      	b.n	578c <_printf_common+0x48>
    5808:	0022      	movs	r2, r4
    580a:	2301      	movs	r3, #1
    580c:	321a      	adds	r2, #26
    580e:	9901      	ldr	r1, [sp, #4]
    5810:	9800      	ldr	r0, [sp, #0]
    5812:	9e08      	ldr	r6, [sp, #32]
    5814:	47b0      	blx	r6
    5816:	1c43      	adds	r3, r0, #1
    5818:	d0e6      	beq.n	57e8 <_printf_common+0xa4>
    581a:	3701      	adds	r7, #1
    581c:	e7d1      	b.n	57c2 <_printf_common+0x7e>
	...

00005820 <_printf_i>:
    5820:	b5f0      	push	{r4, r5, r6, r7, lr}
    5822:	b08b      	sub	sp, #44	; 0x2c
    5824:	9206      	str	r2, [sp, #24]
    5826:	000a      	movs	r2, r1
    5828:	3243      	adds	r2, #67	; 0x43
    582a:	9307      	str	r3, [sp, #28]
    582c:	9005      	str	r0, [sp, #20]
    582e:	9204      	str	r2, [sp, #16]
    5830:	7e0a      	ldrb	r2, [r1, #24]
    5832:	000c      	movs	r4, r1
    5834:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5836:	2a6e      	cmp	r2, #110	; 0x6e
    5838:	d100      	bne.n	583c <_printf_i+0x1c>
    583a:	e08f      	b.n	595c <_printf_i+0x13c>
    583c:	d817      	bhi.n	586e <_printf_i+0x4e>
    583e:	2a63      	cmp	r2, #99	; 0x63
    5840:	d02c      	beq.n	589c <_printf_i+0x7c>
    5842:	d808      	bhi.n	5856 <_printf_i+0x36>
    5844:	2a00      	cmp	r2, #0
    5846:	d100      	bne.n	584a <_printf_i+0x2a>
    5848:	e099      	b.n	597e <_printf_i+0x15e>
    584a:	2a58      	cmp	r2, #88	; 0x58
    584c:	d054      	beq.n	58f8 <_printf_i+0xd8>
    584e:	0026      	movs	r6, r4
    5850:	3642      	adds	r6, #66	; 0x42
    5852:	7032      	strb	r2, [r6, #0]
    5854:	e029      	b.n	58aa <_printf_i+0x8a>
    5856:	2a64      	cmp	r2, #100	; 0x64
    5858:	d001      	beq.n	585e <_printf_i+0x3e>
    585a:	2a69      	cmp	r2, #105	; 0x69
    585c:	d1f7      	bne.n	584e <_printf_i+0x2e>
    585e:	6821      	ldr	r1, [r4, #0]
    5860:	681a      	ldr	r2, [r3, #0]
    5862:	0608      	lsls	r0, r1, #24
    5864:	d523      	bpl.n	58ae <_printf_i+0x8e>
    5866:	1d11      	adds	r1, r2, #4
    5868:	6019      	str	r1, [r3, #0]
    586a:	6815      	ldr	r5, [r2, #0]
    586c:	e025      	b.n	58ba <_printf_i+0x9a>
    586e:	2a73      	cmp	r2, #115	; 0x73
    5870:	d100      	bne.n	5874 <_printf_i+0x54>
    5872:	e088      	b.n	5986 <_printf_i+0x166>
    5874:	d808      	bhi.n	5888 <_printf_i+0x68>
    5876:	2a6f      	cmp	r2, #111	; 0x6f
    5878:	d029      	beq.n	58ce <_printf_i+0xae>
    587a:	2a70      	cmp	r2, #112	; 0x70
    587c:	d1e7      	bne.n	584e <_printf_i+0x2e>
    587e:	2220      	movs	r2, #32
    5880:	6809      	ldr	r1, [r1, #0]
    5882:	430a      	orrs	r2, r1
    5884:	6022      	str	r2, [r4, #0]
    5886:	e003      	b.n	5890 <_printf_i+0x70>
    5888:	2a75      	cmp	r2, #117	; 0x75
    588a:	d020      	beq.n	58ce <_printf_i+0xae>
    588c:	2a78      	cmp	r2, #120	; 0x78
    588e:	d1de      	bne.n	584e <_printf_i+0x2e>
    5890:	0022      	movs	r2, r4
    5892:	2178      	movs	r1, #120	; 0x78
    5894:	3245      	adds	r2, #69	; 0x45
    5896:	7011      	strb	r1, [r2, #0]
    5898:	4a6c      	ldr	r2, [pc, #432]	; (5a4c <_printf_i+0x22c>)
    589a:	e030      	b.n	58fe <_printf_i+0xde>
    589c:	000e      	movs	r6, r1
    589e:	681a      	ldr	r2, [r3, #0]
    58a0:	3642      	adds	r6, #66	; 0x42
    58a2:	1d11      	adds	r1, r2, #4
    58a4:	6019      	str	r1, [r3, #0]
    58a6:	6813      	ldr	r3, [r2, #0]
    58a8:	7033      	strb	r3, [r6, #0]
    58aa:	2301      	movs	r3, #1
    58ac:	e079      	b.n	59a2 <_printf_i+0x182>
    58ae:	0649      	lsls	r1, r1, #25
    58b0:	d5d9      	bpl.n	5866 <_printf_i+0x46>
    58b2:	1d11      	adds	r1, r2, #4
    58b4:	6019      	str	r1, [r3, #0]
    58b6:	2300      	movs	r3, #0
    58b8:	5ed5      	ldrsh	r5, [r2, r3]
    58ba:	2d00      	cmp	r5, #0
    58bc:	da03      	bge.n	58c6 <_printf_i+0xa6>
    58be:	232d      	movs	r3, #45	; 0x2d
    58c0:	9a04      	ldr	r2, [sp, #16]
    58c2:	426d      	negs	r5, r5
    58c4:	7013      	strb	r3, [r2, #0]
    58c6:	4b62      	ldr	r3, [pc, #392]	; (5a50 <_printf_i+0x230>)
    58c8:	270a      	movs	r7, #10
    58ca:	9303      	str	r3, [sp, #12]
    58cc:	e02f      	b.n	592e <_printf_i+0x10e>
    58ce:	6820      	ldr	r0, [r4, #0]
    58d0:	6819      	ldr	r1, [r3, #0]
    58d2:	0605      	lsls	r5, r0, #24
    58d4:	d503      	bpl.n	58de <_printf_i+0xbe>
    58d6:	1d08      	adds	r0, r1, #4
    58d8:	6018      	str	r0, [r3, #0]
    58da:	680d      	ldr	r5, [r1, #0]
    58dc:	e005      	b.n	58ea <_printf_i+0xca>
    58de:	0640      	lsls	r0, r0, #25
    58e0:	d5f9      	bpl.n	58d6 <_printf_i+0xb6>
    58e2:	680d      	ldr	r5, [r1, #0]
    58e4:	1d08      	adds	r0, r1, #4
    58e6:	6018      	str	r0, [r3, #0]
    58e8:	b2ad      	uxth	r5, r5
    58ea:	4b59      	ldr	r3, [pc, #356]	; (5a50 <_printf_i+0x230>)
    58ec:	2708      	movs	r7, #8
    58ee:	9303      	str	r3, [sp, #12]
    58f0:	2a6f      	cmp	r2, #111	; 0x6f
    58f2:	d018      	beq.n	5926 <_printf_i+0x106>
    58f4:	270a      	movs	r7, #10
    58f6:	e016      	b.n	5926 <_printf_i+0x106>
    58f8:	3145      	adds	r1, #69	; 0x45
    58fa:	700a      	strb	r2, [r1, #0]
    58fc:	4a54      	ldr	r2, [pc, #336]	; (5a50 <_printf_i+0x230>)
    58fe:	9203      	str	r2, [sp, #12]
    5900:	681a      	ldr	r2, [r3, #0]
    5902:	6821      	ldr	r1, [r4, #0]
    5904:	1d10      	adds	r0, r2, #4
    5906:	6018      	str	r0, [r3, #0]
    5908:	6815      	ldr	r5, [r2, #0]
    590a:	0608      	lsls	r0, r1, #24
    590c:	d522      	bpl.n	5954 <_printf_i+0x134>
    590e:	07cb      	lsls	r3, r1, #31
    5910:	d502      	bpl.n	5918 <_printf_i+0xf8>
    5912:	2320      	movs	r3, #32
    5914:	4319      	orrs	r1, r3
    5916:	6021      	str	r1, [r4, #0]
    5918:	2710      	movs	r7, #16
    591a:	2d00      	cmp	r5, #0
    591c:	d103      	bne.n	5926 <_printf_i+0x106>
    591e:	2320      	movs	r3, #32
    5920:	6822      	ldr	r2, [r4, #0]
    5922:	439a      	bics	r2, r3
    5924:	6022      	str	r2, [r4, #0]
    5926:	0023      	movs	r3, r4
    5928:	2200      	movs	r2, #0
    592a:	3343      	adds	r3, #67	; 0x43
    592c:	701a      	strb	r2, [r3, #0]
    592e:	6863      	ldr	r3, [r4, #4]
    5930:	60a3      	str	r3, [r4, #8]
    5932:	2b00      	cmp	r3, #0
    5934:	db5c      	blt.n	59f0 <_printf_i+0x1d0>
    5936:	2204      	movs	r2, #4
    5938:	6821      	ldr	r1, [r4, #0]
    593a:	4391      	bics	r1, r2
    593c:	6021      	str	r1, [r4, #0]
    593e:	2d00      	cmp	r5, #0
    5940:	d158      	bne.n	59f4 <_printf_i+0x1d4>
    5942:	9e04      	ldr	r6, [sp, #16]
    5944:	2b00      	cmp	r3, #0
    5946:	d064      	beq.n	5a12 <_printf_i+0x1f2>
    5948:	0026      	movs	r6, r4
    594a:	9b03      	ldr	r3, [sp, #12]
    594c:	3642      	adds	r6, #66	; 0x42
    594e:	781b      	ldrb	r3, [r3, #0]
    5950:	7033      	strb	r3, [r6, #0]
    5952:	e05e      	b.n	5a12 <_printf_i+0x1f2>
    5954:	0648      	lsls	r0, r1, #25
    5956:	d5da      	bpl.n	590e <_printf_i+0xee>
    5958:	b2ad      	uxth	r5, r5
    595a:	e7d8      	b.n	590e <_printf_i+0xee>
    595c:	6809      	ldr	r1, [r1, #0]
    595e:	681a      	ldr	r2, [r3, #0]
    5960:	0608      	lsls	r0, r1, #24
    5962:	d505      	bpl.n	5970 <_printf_i+0x150>
    5964:	1d11      	adds	r1, r2, #4
    5966:	6019      	str	r1, [r3, #0]
    5968:	6813      	ldr	r3, [r2, #0]
    596a:	6962      	ldr	r2, [r4, #20]
    596c:	601a      	str	r2, [r3, #0]
    596e:	e006      	b.n	597e <_printf_i+0x15e>
    5970:	0649      	lsls	r1, r1, #25
    5972:	d5f7      	bpl.n	5964 <_printf_i+0x144>
    5974:	1d11      	adds	r1, r2, #4
    5976:	6019      	str	r1, [r3, #0]
    5978:	6813      	ldr	r3, [r2, #0]
    597a:	8aa2      	ldrh	r2, [r4, #20]
    597c:	801a      	strh	r2, [r3, #0]
    597e:	2300      	movs	r3, #0
    5980:	9e04      	ldr	r6, [sp, #16]
    5982:	6123      	str	r3, [r4, #16]
    5984:	e054      	b.n	5a30 <_printf_i+0x210>
    5986:	681a      	ldr	r2, [r3, #0]
    5988:	1d11      	adds	r1, r2, #4
    598a:	6019      	str	r1, [r3, #0]
    598c:	6816      	ldr	r6, [r2, #0]
    598e:	2100      	movs	r1, #0
    5990:	6862      	ldr	r2, [r4, #4]
    5992:	0030      	movs	r0, r6
    5994:	f000 f908 	bl	5ba8 <memchr>
    5998:	2800      	cmp	r0, #0
    599a:	d001      	beq.n	59a0 <_printf_i+0x180>
    599c:	1b80      	subs	r0, r0, r6
    599e:	6060      	str	r0, [r4, #4]
    59a0:	6863      	ldr	r3, [r4, #4]
    59a2:	6123      	str	r3, [r4, #16]
    59a4:	2300      	movs	r3, #0
    59a6:	9a04      	ldr	r2, [sp, #16]
    59a8:	7013      	strb	r3, [r2, #0]
    59aa:	e041      	b.n	5a30 <_printf_i+0x210>
    59ac:	6923      	ldr	r3, [r4, #16]
    59ae:	0032      	movs	r2, r6
    59b0:	9906      	ldr	r1, [sp, #24]
    59b2:	9805      	ldr	r0, [sp, #20]
    59b4:	9d07      	ldr	r5, [sp, #28]
    59b6:	47a8      	blx	r5
    59b8:	1c43      	adds	r3, r0, #1
    59ba:	d043      	beq.n	5a44 <_printf_i+0x224>
    59bc:	6823      	ldr	r3, [r4, #0]
    59be:	2500      	movs	r5, #0
    59c0:	079b      	lsls	r3, r3, #30
    59c2:	d40f      	bmi.n	59e4 <_printf_i+0x1c4>
    59c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59c6:	68e0      	ldr	r0, [r4, #12]
    59c8:	4298      	cmp	r0, r3
    59ca:	da3d      	bge.n	5a48 <_printf_i+0x228>
    59cc:	0018      	movs	r0, r3
    59ce:	e03b      	b.n	5a48 <_printf_i+0x228>
    59d0:	0022      	movs	r2, r4
    59d2:	2301      	movs	r3, #1
    59d4:	3219      	adds	r2, #25
    59d6:	9906      	ldr	r1, [sp, #24]
    59d8:	9805      	ldr	r0, [sp, #20]
    59da:	9e07      	ldr	r6, [sp, #28]
    59dc:	47b0      	blx	r6
    59de:	1c43      	adds	r3, r0, #1
    59e0:	d030      	beq.n	5a44 <_printf_i+0x224>
    59e2:	3501      	adds	r5, #1
    59e4:	68e3      	ldr	r3, [r4, #12]
    59e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    59e8:	1a9b      	subs	r3, r3, r2
    59ea:	429d      	cmp	r5, r3
    59ec:	dbf0      	blt.n	59d0 <_printf_i+0x1b0>
    59ee:	e7e9      	b.n	59c4 <_printf_i+0x1a4>
    59f0:	2d00      	cmp	r5, #0
    59f2:	d0a9      	beq.n	5948 <_printf_i+0x128>
    59f4:	9e04      	ldr	r6, [sp, #16]
    59f6:	0028      	movs	r0, r5
    59f8:	0039      	movs	r1, r7
    59fa:	f7fc f8c7 	bl	1b8c <__aeabi_uidivmod>
    59fe:	9b03      	ldr	r3, [sp, #12]
    5a00:	3e01      	subs	r6, #1
    5a02:	5c5b      	ldrb	r3, [r3, r1]
    5a04:	0028      	movs	r0, r5
    5a06:	7033      	strb	r3, [r6, #0]
    5a08:	0039      	movs	r1, r7
    5a0a:	f7fc f8a3 	bl	1b54 <__aeabi_uidiv>
    5a0e:	1e05      	subs	r5, r0, #0
    5a10:	d1f1      	bne.n	59f6 <_printf_i+0x1d6>
    5a12:	2f08      	cmp	r7, #8
    5a14:	d109      	bne.n	5a2a <_printf_i+0x20a>
    5a16:	6823      	ldr	r3, [r4, #0]
    5a18:	07db      	lsls	r3, r3, #31
    5a1a:	d506      	bpl.n	5a2a <_printf_i+0x20a>
    5a1c:	6863      	ldr	r3, [r4, #4]
    5a1e:	6922      	ldr	r2, [r4, #16]
    5a20:	4293      	cmp	r3, r2
    5a22:	dc02      	bgt.n	5a2a <_printf_i+0x20a>
    5a24:	2330      	movs	r3, #48	; 0x30
    5a26:	3e01      	subs	r6, #1
    5a28:	7033      	strb	r3, [r6, #0]
    5a2a:	9b04      	ldr	r3, [sp, #16]
    5a2c:	1b9b      	subs	r3, r3, r6
    5a2e:	6123      	str	r3, [r4, #16]
    5a30:	9b07      	ldr	r3, [sp, #28]
    5a32:	aa09      	add	r2, sp, #36	; 0x24
    5a34:	9300      	str	r3, [sp, #0]
    5a36:	0021      	movs	r1, r4
    5a38:	9b06      	ldr	r3, [sp, #24]
    5a3a:	9805      	ldr	r0, [sp, #20]
    5a3c:	f7ff fe82 	bl	5744 <_printf_common>
    5a40:	1c43      	adds	r3, r0, #1
    5a42:	d1b3      	bne.n	59ac <_printf_i+0x18c>
    5a44:	2001      	movs	r0, #1
    5a46:	4240      	negs	r0, r0
    5a48:	b00b      	add	sp, #44	; 0x2c
    5a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a4c:	000060be 	.word	0x000060be
    5a50:	000060ad 	.word	0x000060ad

00005a54 <_sbrk_r>:
    5a54:	2300      	movs	r3, #0
    5a56:	b570      	push	{r4, r5, r6, lr}
    5a58:	4c06      	ldr	r4, [pc, #24]	; (5a74 <_sbrk_r+0x20>)
    5a5a:	0005      	movs	r5, r0
    5a5c:	0008      	movs	r0, r1
    5a5e:	6023      	str	r3, [r4, #0]
    5a60:	f7fb fdd0 	bl	1604 <_sbrk>
    5a64:	1c43      	adds	r3, r0, #1
    5a66:	d103      	bne.n	5a70 <_sbrk_r+0x1c>
    5a68:	6823      	ldr	r3, [r4, #0]
    5a6a:	2b00      	cmp	r3, #0
    5a6c:	d000      	beq.n	5a70 <_sbrk_r+0x1c>
    5a6e:	602b      	str	r3, [r5, #0]
    5a70:	bd70      	pop	{r4, r5, r6, pc}
    5a72:	46c0      	nop			; (mov r8, r8)
    5a74:	20000668 	.word	0x20000668

00005a78 <__sread>:
    5a78:	b570      	push	{r4, r5, r6, lr}
    5a7a:	000c      	movs	r4, r1
    5a7c:	250e      	movs	r5, #14
    5a7e:	5f49      	ldrsh	r1, [r1, r5]
    5a80:	f000 f8d8 	bl	5c34 <_read_r>
    5a84:	2800      	cmp	r0, #0
    5a86:	db03      	blt.n	5a90 <__sread+0x18>
    5a88:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5a8a:	181b      	adds	r3, r3, r0
    5a8c:	6563      	str	r3, [r4, #84]	; 0x54
    5a8e:	bd70      	pop	{r4, r5, r6, pc}
    5a90:	89a3      	ldrh	r3, [r4, #12]
    5a92:	4a02      	ldr	r2, [pc, #8]	; (5a9c <__sread+0x24>)
    5a94:	4013      	ands	r3, r2
    5a96:	81a3      	strh	r3, [r4, #12]
    5a98:	e7f9      	b.n	5a8e <__sread+0x16>
    5a9a:	46c0      	nop			; (mov r8, r8)
    5a9c:	ffffefff 	.word	0xffffefff

00005aa0 <__swrite>:
    5aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aa2:	001f      	movs	r7, r3
    5aa4:	898b      	ldrh	r3, [r1, #12]
    5aa6:	0005      	movs	r5, r0
    5aa8:	000c      	movs	r4, r1
    5aaa:	0016      	movs	r6, r2
    5aac:	05db      	lsls	r3, r3, #23
    5aae:	d505      	bpl.n	5abc <__swrite+0x1c>
    5ab0:	230e      	movs	r3, #14
    5ab2:	5ec9      	ldrsh	r1, [r1, r3]
    5ab4:	2200      	movs	r2, #0
    5ab6:	2302      	movs	r3, #2
    5ab8:	f000 f862 	bl	5b80 <_lseek_r>
    5abc:	89a3      	ldrh	r3, [r4, #12]
    5abe:	4a05      	ldr	r2, [pc, #20]	; (5ad4 <__swrite+0x34>)
    5ac0:	0028      	movs	r0, r5
    5ac2:	4013      	ands	r3, r2
    5ac4:	81a3      	strh	r3, [r4, #12]
    5ac6:	0032      	movs	r2, r6
    5ac8:	230e      	movs	r3, #14
    5aca:	5ee1      	ldrsh	r1, [r4, r3]
    5acc:	003b      	movs	r3, r7
    5ace:	f000 f81f 	bl	5b10 <_write_r>
    5ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ad4:	ffffefff 	.word	0xffffefff

00005ad8 <__sseek>:
    5ad8:	b570      	push	{r4, r5, r6, lr}
    5ada:	000c      	movs	r4, r1
    5adc:	250e      	movs	r5, #14
    5ade:	5f49      	ldrsh	r1, [r1, r5]
    5ae0:	f000 f84e 	bl	5b80 <_lseek_r>
    5ae4:	89a3      	ldrh	r3, [r4, #12]
    5ae6:	1c42      	adds	r2, r0, #1
    5ae8:	d103      	bne.n	5af2 <__sseek+0x1a>
    5aea:	4a05      	ldr	r2, [pc, #20]	; (5b00 <__sseek+0x28>)
    5aec:	4013      	ands	r3, r2
    5aee:	81a3      	strh	r3, [r4, #12]
    5af0:	bd70      	pop	{r4, r5, r6, pc}
    5af2:	2280      	movs	r2, #128	; 0x80
    5af4:	0152      	lsls	r2, r2, #5
    5af6:	4313      	orrs	r3, r2
    5af8:	81a3      	strh	r3, [r4, #12]
    5afa:	6560      	str	r0, [r4, #84]	; 0x54
    5afc:	e7f8      	b.n	5af0 <__sseek+0x18>
    5afe:	46c0      	nop			; (mov r8, r8)
    5b00:	ffffefff 	.word	0xffffefff

00005b04 <__sclose>:
    5b04:	b510      	push	{r4, lr}
    5b06:	230e      	movs	r3, #14
    5b08:	5ec9      	ldrsh	r1, [r1, r3]
    5b0a:	f000 f815 	bl	5b38 <_close_r>
    5b0e:	bd10      	pop	{r4, pc}

00005b10 <_write_r>:
    5b10:	b570      	push	{r4, r5, r6, lr}
    5b12:	0005      	movs	r5, r0
    5b14:	0008      	movs	r0, r1
    5b16:	0011      	movs	r1, r2
    5b18:	2200      	movs	r2, #0
    5b1a:	4c06      	ldr	r4, [pc, #24]	; (5b34 <_write_r+0x24>)
    5b1c:	6022      	str	r2, [r4, #0]
    5b1e:	001a      	movs	r2, r3
    5b20:	f7fd fbd2 	bl	32c8 <_write>
    5b24:	1c43      	adds	r3, r0, #1
    5b26:	d103      	bne.n	5b30 <_write_r+0x20>
    5b28:	6823      	ldr	r3, [r4, #0]
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d000      	beq.n	5b30 <_write_r+0x20>
    5b2e:	602b      	str	r3, [r5, #0]
    5b30:	bd70      	pop	{r4, r5, r6, pc}
    5b32:	46c0      	nop			; (mov r8, r8)
    5b34:	20000668 	.word	0x20000668

00005b38 <_close_r>:
    5b38:	2300      	movs	r3, #0
    5b3a:	b570      	push	{r4, r5, r6, lr}
    5b3c:	4c06      	ldr	r4, [pc, #24]	; (5b58 <_close_r+0x20>)
    5b3e:	0005      	movs	r5, r0
    5b40:	0008      	movs	r0, r1
    5b42:	6023      	str	r3, [r4, #0]
    5b44:	f7fb fd70 	bl	1628 <_close>
    5b48:	1c43      	adds	r3, r0, #1
    5b4a:	d103      	bne.n	5b54 <_close_r+0x1c>
    5b4c:	6823      	ldr	r3, [r4, #0]
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d000      	beq.n	5b54 <_close_r+0x1c>
    5b52:	602b      	str	r3, [r5, #0]
    5b54:	bd70      	pop	{r4, r5, r6, pc}
    5b56:	46c0      	nop			; (mov r8, r8)
    5b58:	20000668 	.word	0x20000668

00005b5c <_fstat_r>:
    5b5c:	2300      	movs	r3, #0
    5b5e:	b570      	push	{r4, r5, r6, lr}
    5b60:	4c06      	ldr	r4, [pc, #24]	; (5b7c <_fstat_r+0x20>)
    5b62:	0005      	movs	r5, r0
    5b64:	0008      	movs	r0, r1
    5b66:	0011      	movs	r1, r2
    5b68:	6023      	str	r3, [r4, #0]
    5b6a:	f7fb fd60 	bl	162e <_fstat>
    5b6e:	1c43      	adds	r3, r0, #1
    5b70:	d103      	bne.n	5b7a <_fstat_r+0x1e>
    5b72:	6823      	ldr	r3, [r4, #0]
    5b74:	2b00      	cmp	r3, #0
    5b76:	d000      	beq.n	5b7a <_fstat_r+0x1e>
    5b78:	602b      	str	r3, [r5, #0]
    5b7a:	bd70      	pop	{r4, r5, r6, pc}
    5b7c:	20000668 	.word	0x20000668

00005b80 <_lseek_r>:
    5b80:	b570      	push	{r4, r5, r6, lr}
    5b82:	0005      	movs	r5, r0
    5b84:	0008      	movs	r0, r1
    5b86:	0011      	movs	r1, r2
    5b88:	2200      	movs	r2, #0
    5b8a:	4c06      	ldr	r4, [pc, #24]	; (5ba4 <_lseek_r+0x24>)
    5b8c:	6022      	str	r2, [r4, #0]
    5b8e:	001a      	movs	r2, r3
    5b90:	f7fb fd52 	bl	1638 <_lseek>
    5b94:	1c43      	adds	r3, r0, #1
    5b96:	d103      	bne.n	5ba0 <_lseek_r+0x20>
    5b98:	6823      	ldr	r3, [r4, #0]
    5b9a:	2b00      	cmp	r3, #0
    5b9c:	d000      	beq.n	5ba0 <_lseek_r+0x20>
    5b9e:	602b      	str	r3, [r5, #0]
    5ba0:	bd70      	pop	{r4, r5, r6, pc}
    5ba2:	46c0      	nop			; (mov r8, r8)
    5ba4:	20000668 	.word	0x20000668

00005ba8 <memchr>:
    5ba8:	b2c9      	uxtb	r1, r1
    5baa:	1882      	adds	r2, r0, r2
    5bac:	4290      	cmp	r0, r2
    5bae:	d101      	bne.n	5bb4 <memchr+0xc>
    5bb0:	2000      	movs	r0, #0
    5bb2:	4770      	bx	lr
    5bb4:	7803      	ldrb	r3, [r0, #0]
    5bb6:	428b      	cmp	r3, r1
    5bb8:	d0fb      	beq.n	5bb2 <memchr+0xa>
    5bba:	3001      	adds	r0, #1
    5bbc:	e7f6      	b.n	5bac <memchr+0x4>

00005bbe <memmove>:
    5bbe:	b510      	push	{r4, lr}
    5bc0:	4288      	cmp	r0, r1
    5bc2:	d902      	bls.n	5bca <memmove+0xc>
    5bc4:	188b      	adds	r3, r1, r2
    5bc6:	4298      	cmp	r0, r3
    5bc8:	d308      	bcc.n	5bdc <memmove+0x1e>
    5bca:	2300      	movs	r3, #0
    5bcc:	429a      	cmp	r2, r3
    5bce:	d007      	beq.n	5be0 <memmove+0x22>
    5bd0:	5ccc      	ldrb	r4, [r1, r3]
    5bd2:	54c4      	strb	r4, [r0, r3]
    5bd4:	3301      	adds	r3, #1
    5bd6:	e7f9      	b.n	5bcc <memmove+0xe>
    5bd8:	5c8b      	ldrb	r3, [r1, r2]
    5bda:	5483      	strb	r3, [r0, r2]
    5bdc:	3a01      	subs	r2, #1
    5bde:	d2fb      	bcs.n	5bd8 <memmove+0x1a>
    5be0:	bd10      	pop	{r4, pc}

00005be2 <__malloc_lock>:
    5be2:	4770      	bx	lr

00005be4 <__malloc_unlock>:
    5be4:	4770      	bx	lr

00005be6 <_realloc_r>:
    5be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5be8:	0007      	movs	r7, r0
    5bea:	000d      	movs	r5, r1
    5bec:	0016      	movs	r6, r2
    5bee:	2900      	cmp	r1, #0
    5bf0:	d105      	bne.n	5bfe <_realloc_r+0x18>
    5bf2:	0011      	movs	r1, r2
    5bf4:	f7ff fbe2 	bl	53bc <_malloc_r>
    5bf8:	0004      	movs	r4, r0
    5bfa:	0020      	movs	r0, r4
    5bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bfe:	2a00      	cmp	r2, #0
    5c00:	d103      	bne.n	5c0a <_realloc_r+0x24>
    5c02:	f7ff fb91 	bl	5328 <_free_r>
    5c06:	0034      	movs	r4, r6
    5c08:	e7f7      	b.n	5bfa <_realloc_r+0x14>
    5c0a:	f000 f827 	bl	5c5c <_malloc_usable_size_r>
    5c0e:	002c      	movs	r4, r5
    5c10:	4286      	cmp	r6, r0
    5c12:	d9f2      	bls.n	5bfa <_realloc_r+0x14>
    5c14:	0031      	movs	r1, r6
    5c16:	0038      	movs	r0, r7
    5c18:	f7ff fbd0 	bl	53bc <_malloc_r>
    5c1c:	1e04      	subs	r4, r0, #0
    5c1e:	d0ec      	beq.n	5bfa <_realloc_r+0x14>
    5c20:	0029      	movs	r1, r5
    5c22:	0032      	movs	r2, r6
    5c24:	f7ff f8d8 	bl	4dd8 <memcpy>
    5c28:	0029      	movs	r1, r5
    5c2a:	0038      	movs	r0, r7
    5c2c:	f7ff fb7c 	bl	5328 <_free_r>
    5c30:	e7e3      	b.n	5bfa <_realloc_r+0x14>
	...

00005c34 <_read_r>:
    5c34:	b570      	push	{r4, r5, r6, lr}
    5c36:	0005      	movs	r5, r0
    5c38:	0008      	movs	r0, r1
    5c3a:	0011      	movs	r1, r2
    5c3c:	2200      	movs	r2, #0
    5c3e:	4c06      	ldr	r4, [pc, #24]	; (5c58 <_read_r+0x24>)
    5c40:	6022      	str	r2, [r4, #0]
    5c42:	001a      	movs	r2, r3
    5c44:	f7fd fb2c 	bl	32a0 <_read>
    5c48:	1c43      	adds	r3, r0, #1
    5c4a:	d103      	bne.n	5c54 <_read_r+0x20>
    5c4c:	6823      	ldr	r3, [r4, #0]
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d000      	beq.n	5c54 <_read_r+0x20>
    5c52:	602b      	str	r3, [r5, #0]
    5c54:	bd70      	pop	{r4, r5, r6, pc}
    5c56:	46c0      	nop			; (mov r8, r8)
    5c58:	20000668 	.word	0x20000668

00005c5c <_malloc_usable_size_r>:
    5c5c:	1f0b      	subs	r3, r1, #4
    5c5e:	681b      	ldr	r3, [r3, #0]
    5c60:	1f18      	subs	r0, r3, #4
    5c62:	2b00      	cmp	r3, #0
    5c64:	da01      	bge.n	5c6a <_malloc_usable_size_r+0xe>
    5c66:	580b      	ldr	r3, [r1, r0]
    5c68:	18c0      	adds	r0, r0, r3
    5c6a:	4770      	bx	lr
    5c6c:	682f2e2e 	.word	0x682f2e2e
    5c70:	732f6c61 	.word	0x732f6c61
    5c74:	682f6372 	.word	0x682f6372
    5c78:	635f6c61 	.word	0x635f6c61
    5c7c:	615f6e61 	.word	0x615f6e61
    5c80:	636e7973 	.word	0x636e7973
    5c84:	0000632e 	.word	0x0000632e
    5c88:	682f2e2e 	.word	0x682f2e2e
    5c8c:	732f6c61 	.word	0x732f6c61
    5c90:	682f6372 	.word	0x682f6372
    5c94:	695f6c61 	.word	0x695f6c61
    5c98:	00632e6f 	.word	0x00632e6f
    5c9c:	682f2e2e 	.word	0x682f2e2e
    5ca0:	732f6c61 	.word	0x732f6c61
    5ca4:	682f6372 	.word	0x682f6372
    5ca8:	735f6c61 	.word	0x735f6c61
    5cac:	6d5f6970 	.word	0x6d5f6970
    5cb0:	6e79735f 	.word	0x6e79735f
    5cb4:	00632e63 	.word	0x00632e63
    5cb8:	682f2e2e 	.word	0x682f2e2e
    5cbc:	732f6c61 	.word	0x732f6c61
    5cc0:	682f6372 	.word	0x682f6372
    5cc4:	745f6c61 	.word	0x745f6c61
    5cc8:	72656d69 	.word	0x72656d69
    5ccc:	0000632e 	.word	0x0000632e
    5cd0:	682f2e2e 	.word	0x682f2e2e
    5cd4:	732f6c61 	.word	0x732f6c61
    5cd8:	682f6372 	.word	0x682f6372
    5cdc:	755f6c61 	.word	0x755f6c61
    5ce0:	74726173 	.word	0x74726173
    5ce4:	6e79735f 	.word	0x6e79735f
    5ce8:	00632e63 	.word	0x00632e63
    5cec:	682f2e2e 	.word	0x682f2e2e
    5cf0:	752f6c61 	.word	0x752f6c61
    5cf4:	736c6974 	.word	0x736c6974
    5cf8:	6372732f 	.word	0x6372732f
    5cfc:	6974752f 	.word	0x6974752f
    5d00:	6c5f736c 	.word	0x6c5f736c
    5d04:	2e747369 	.word	0x2e747369
    5d08:	00000063 	.word	0x00000063
    5d0c:	03020100 	.word	0x03020100
    5d10:	07060504 	.word	0x07060504
    5d14:	14100c08 	.word	0x14100c08
    5d18:	40302018 	.word	0x40302018
    5d1c:	682f2e2e 	.word	0x682f2e2e
    5d20:	722f6c70 	.word	0x722f6c70
    5d24:	682f6374 	.word	0x682f6374
    5d28:	725f6c70 	.word	0x725f6c70
    5d2c:	632e6374 	.word	0x632e6374
    5d30:	00000000 	.word	0x00000000

00005d34 <_usarts>:
    5d34:	00000000 40100004 00030000 0000ff2e     .......@........
    5d44:	00000000                                ....

00005d48 <_i2cms>:
	...

00005d60 <_i2css>:
	...

00005d70 <sercomspi_regs>:
    5d70:	0023000c 00020000 00000000 01ff0001     ..#.............
    5d80:	00000001 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    5d90:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    5da0:	00000000 ffffff00 0000ffff 00000000     ................
    5db0:	00005f00 00005f08 00005f10 00005f18     ._..._..._..._..
    5dc0:	00005f20 00005f28 00005f28 00005f30      _..(_..(_..0_..
    5dd0:	00000025 544c4f56 4554454d 00000052     %...VOLTMETER...
    5de0:	616d2025 6f762078 6761746c 00000065     % max voltage...
    5df0:	454d4d41 00524554 616d2025 75632078     AMMETER.% max cu
    5e00:	6e657272 00000074 54544142 20595245     rrent...BATTERY 
    5e10:	52414843 00004547 54544142 00595245     CHARGE..BATTERY.
    5e20:	504d4554 00000000 67656428 00002943     TEMP....(degC)..
    5e30:	4f544f4d 00000052 67676f4c 3a676e69     MOTOR...Logging:
    5e40:	00000000 69746341 00006576 63616e49     ....Active..Inac
    5e50:	65766974 00000000 44534d45 616c2043     tive....EMSDC la
    5e60:	65686374 70202c64 7265776f 63796320     tched, power cyc
    5e70:	7420656c 6572206f 00746573 69736f50     le to reset.Posi
    5e80:	65766974 656c7320 61722077 203a6574     tive slew rate: 
    5e90:	00006425 6167654e 65766974 656c7320     %d..Negative sle
    5ea0:	61722077 203a6574 00006425 2078614d     w rate: %d..Max 
    5eb0:	72727563 3a746e65 20642520 00000041     current: %d A...
    5ec0:	71726f54 56206575 6f746365 676e6972     Torque Vectoring
    5ed0:	74634120 00657669 71726f54 56206575      Active.Torque V
    5ee0:	6f746365 676e6972 616e4920 76697463     ectoring Inactiv
    5ef0:	00000065 444f4f47 43554c20 0000004b     e...GOOD LUCK...
    5f00:	5f766e69 00727265 5f637270 00727265     inv_err.prc_err.
    5f10:	656d6974 0074756f 64736d65 00000063     timeout.emsdc...
    5f20:	5f736e69 00727265 73756e75 00006465     ins_err.unused..
    5f30:	6d6d6f63 00000073 000035a8 00003578     comms....5..x5..
    5f40:	0000358a 000034cc 0000358a 0000356e     .5...4...5..n5..
    5f50:	0000358a 000034cc 00003578 00003578     .5...4..x5..x5..
    5f60:	0000356e 000034cc 000034d4 000034d4     n5...4...4...4..
    5f70:	000034d4 00003590 00003578 00003578     .4...5..x5..x5..
    5f80:	0000354c 00003630 0000354c 0000356e     L5..06..L5..n5..
    5f90:	0000354c 00003630 00003578 00003578     L5..06..x5..x5..
    5fa0:	0000356e 00003630 000034d4 000034d4     n5..06...4...4..
    5fb0:	000034d4 0000363a 00003928 00003878     .4..:6..(9..x8..
    5fc0:	00003878 00003876 0000391a 0000391a     x8..v8...9...9..
    5fd0:	00003910 00003876 0000391a 00003910     .9..v8...9...9..
    5fe0:	0000391a 00003876 00003920 00003920     .9..v8.. 9.. 9..
    5ff0:	00003920 000039b0 0000432c 000041ec      9...9..,C...A..
    6000:	000041ec 000041e8 00004304 00004304     .A...A...C...C..
    6010:	000042f6 000041e8 00004304 000042f6     .B...A...C...B..
    6020:	00004304 000041e8 0000430c 0000430c     .C...A...C...C..
    6030:	0000430c 00004510                       .C...E..

00006038 <_global_impure_ptr>:
    6038:	20000028                                (.. 

0000603c <__sf_fake_stderr>:
	...

0000605c <__sf_fake_stdin>:
	...

0000607c <__sf_fake_stdout>:
	...
    609c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    60ac:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    60bc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    60cc:	00006665                                ef..

000060d0 <_init>:
    60d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60d2:	46c0      	nop			; (mov r8, r8)
    60d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    60d6:	bc08      	pop	{r3}
    60d8:	469e      	mov	lr, r3
    60da:	4770      	bx	lr

000060dc <__init_array_start>:
    60dc:	000000e5 	.word	0x000000e5

000060e0 <_fini>:
    60e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60e2:	46c0      	nop			; (mov r8, r8)
    60e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    60e6:	bc08      	pop	{r3}
    60e8:	469e      	mov	lr, r3
    60ea:	4770      	bx	lr

000060ec <__fini_array_start>:
    60ec:	000000bd 	.word	0x000000bd
